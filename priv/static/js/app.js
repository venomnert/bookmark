/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/js/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./css/app.scss":
/*!**********************!*\
  !*** ./css/app.scss ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jc3MvYXBwLnNjc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jc3MvYXBwLnNjc3M/OGQ2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./css/app.scss\n");

/***/ }),

/***/ "./js/app.js":
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _css_app_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/app.scss */ \"./css/app.scss\");\n/* harmony import */ var _css_app_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_app_scss__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var phoenix_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! phoenix_html */ \"./node_modules/phoenix_html/priv/static/phoenix_html.js\");\n/* harmony import */ var phoenix_html__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(phoenix_html__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var phoenix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! phoenix */ \"./node_modules/phoenix/priv/static/phoenix.js\");\n/* harmony import */ var phoenix__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(phoenix__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var nprogress__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! nprogress */ \"./node_modules/nprogress/nprogress.js\");\n/* harmony import */ var nprogress__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(nprogress__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var phoenix_live_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! phoenix_live_view */ \"./node_modules/phoenix_live_view/priv/static/phoenix_live_view.js\");\n/* harmony import */ var phoenix_live_view__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(phoenix_live_view__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _init_toast_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./init_toast.js */ \"./js/init_toast.js\");\n/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! alpinejs */ \"./node_modules/alpinejs/dist/alpine.js\");\n/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(alpinejs__WEBPACK_IMPORTED_MODULE_6__);\n// We need to import the CSS so that webpack will load it.\n// The MiniCssExtractPlugin is used to separate it out into\n// its own CSS file.\n // webpack automatically bundles all modules in your\n// entry points. Those entry points can be configured\n// in \"webpack.config.js\".\n//\n// Import deps with the dep name or local files with a relative path, for example:\n//\n//     import {Socket} from \"phoenix\"\n//     import socket from \"./socket\"\n//\n\n\n\n\n\n\nvar Hooks = {};\nHooks.InitToast = _init_toast_js__WEBPACK_IMPORTED_MODULE_5__[\"InitToast\"];\nvar csrfToken = document.querySelector(\"meta[name='csrf-token']\").getAttribute(\"content\");\nvar liveSocket = new phoenix_live_view__WEBPACK_IMPORTED_MODULE_4__[\"LiveSocket\"](\"/live\", phoenix__WEBPACK_IMPORTED_MODULE_2__[\"Socket\"], {\n  hooks: Hooks,\n  params: {\n    _csrf_token: csrfToken\n  },\n  dom: {\n    onBeforeElUpdated: function onBeforeElUpdated(from, to) {\n      if (from.__x) {\n        window.Alpine.clone(from.__x, to);\n      }\n    }\n  }\n}); // Show progress bar on live navigation and form submits\n\nwindow.addEventListener(\"phx:page-loading-start\", function (info) {\n  return nprogress__WEBPACK_IMPORTED_MODULE_3___default.a.start();\n});\nwindow.addEventListener(\"phx:page-loading-stop\", function (info) {\n  return nprogress__WEBPACK_IMPORTED_MODULE_3___default.a.done();\n}); // connect if there are any LiveViews on the page\n\nliveSocket.connect(); // expose liveSocket on window for web console debug logs and latency simulation:\n// >> liveSocket.enableDebug()\n// >> liveSocket.enableLatencySim(1000)  // enabled for duration of browser session\n// >> liveSocket.disableLatencySim()\n\nwindow.liveSocket = liveSocket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9hcHAuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9hcHAuanM/NzQ3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSBuZWVkIHRvIGltcG9ydCB0aGUgQ1NTIHNvIHRoYXQgd2VicGFjayB3aWxsIGxvYWQgaXQuXG4vLyBUaGUgTWluaUNzc0V4dHJhY3RQbHVnaW4gaXMgdXNlZCB0byBzZXBhcmF0ZSBpdCBvdXQgaW50b1xuLy8gaXRzIG93biBDU1MgZmlsZS5cbmltcG9ydCBcIi4uL2Nzcy9hcHAuc2Nzc1wiXG5cbi8vIHdlYnBhY2sgYXV0b21hdGljYWxseSBidW5kbGVzIGFsbCBtb2R1bGVzIGluIHlvdXJcbi8vIGVudHJ5IHBvaW50cy4gVGhvc2UgZW50cnkgcG9pbnRzIGNhbiBiZSBjb25maWd1cmVkXG4vLyBpbiBcIndlYnBhY2suY29uZmlnLmpzXCIuXG4vL1xuLy8gSW1wb3J0IGRlcHMgd2l0aCB0aGUgZGVwIG5hbWUgb3IgbG9jYWwgZmlsZXMgd2l0aCBhIHJlbGF0aXZlIHBhdGgsIGZvciBleGFtcGxlOlxuLy9cbi8vICAgICBpbXBvcnQge1NvY2tldH0gZnJvbSBcInBob2VuaXhcIlxuLy8gICAgIGltcG9ydCBzb2NrZXQgZnJvbSBcIi4vc29ja2V0XCJcbi8vXG5pbXBvcnQgXCJwaG9lbml4X2h0bWxcIlxuaW1wb3J0IHtTb2NrZXR9IGZyb20gXCJwaG9lbml4XCJcbmltcG9ydCBOUHJvZ3Jlc3MgZnJvbSBcIm5wcm9ncmVzc1wiXG5pbXBvcnQge0xpdmVTb2NrZXR9IGZyb20gXCJwaG9lbml4X2xpdmVfdmlld1wiXG5pbXBvcnQge0luaXRUb2FzdH0gZnJvbSBcIi4vaW5pdF90b2FzdC5qc1wiXG5cbmxldCBIb29rcyA9IHt9XG5Ib29rcy5Jbml0VG9hc3QgPSBJbml0VG9hc3RcblxubGV0IGNzcmZUb2tlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtZXRhW25hbWU9J2NzcmYtdG9rZW4nXVwiKS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpXG5sZXQgbGl2ZVNvY2tldCA9IG5ldyBMaXZlU29ja2V0KFwiL2xpdmVcIiwgU29ja2V0LCB7XG4gIGhvb2tzOiBIb29rcyxcbiAgcGFyYW1zOiB7X2NzcmZfdG9rZW46IGNzcmZUb2tlbn0sXG4gIGRvbToge1xuICAgIG9uQmVmb3JlRWxVcGRhdGVkKGZyb20sIHRvKXtcbiAgICAgIGlmKGZyb20uX194KXsgd2luZG93LkFscGluZS5jbG9uZShmcm9tLl9feCwgdG8pIH1cbiAgICB9XG4gIH1cbn0pXG5cblxuLy8gU2hvdyBwcm9ncmVzcyBiYXIgb24gbGl2ZSBuYXZpZ2F0aW9uIGFuZCBmb3JtIHN1Ym1pdHNcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGh4OnBhZ2UtbG9hZGluZy1zdGFydFwiLCBpbmZvID0+IE5Qcm9ncmVzcy5zdGFydCgpKVxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwaHg6cGFnZS1sb2FkaW5nLXN0b3BcIiwgaW5mbyA9PiBOUHJvZ3Jlc3MuZG9uZSgpKVxuXG4vLyBjb25uZWN0IGlmIHRoZXJlIGFyZSBhbnkgTGl2ZVZpZXdzIG9uIHRoZSBwYWdlXG5saXZlU29ja2V0LmNvbm5lY3QoKVxuXG4vLyBleHBvc2UgbGl2ZVNvY2tldCBvbiB3aW5kb3cgZm9yIHdlYiBjb25zb2xlIGRlYnVnIGxvZ3MgYW5kIGxhdGVuY3kgc2ltdWxhdGlvbjpcbi8vID4+IGxpdmVTb2NrZXQuZW5hYmxlRGVidWcoKVxuLy8gPj4gbGl2ZVNvY2tldC5lbmFibGVMYXRlbmN5U2ltKDEwMDApICAvLyBlbmFibGVkIGZvciBkdXJhdGlvbiBvZiBicm93c2VyIHNlc3Npb25cbi8vID4+IGxpdmVTb2NrZXQuZGlzYWJsZUxhdGVuY3lTaW0oKVxud2luZG93LmxpdmVTb2NrZXQgPSBsaXZlU29ja2V0XG5cblxuaW1wb3J0IFwiYWxwaW5lanNcIiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFIQTtBQUhBO0FBQ0E7QUFXQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./js/app.js\n");

/***/ }),

/***/ "./js/init_toast.js":
/*!**************************!*\
  !*** ./js/init_toast.js ***!
  \**************************/
/*! exports provided: InitToast */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InitToast\", function() { return InitToast; });\nvar InitToast = {\n  mounted: function mounted() {\n    init();\n  }\n};\n\nvar init = function init() {\n  var toastEl = document.querySelector('.toast');\n\n  if (toastEl && toastEl.innerText !== '') {\n    toastEl.classList.add(\"mr-4\");\n    setTimeout(function () {\n      toastEl.classList.toggle(\"-mr-64\", \"mr-4\");\n    }, 3000);\n  }\n};\n\ninit();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9pbml0X3RvYXN0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vanMvaW5pdF90b2FzdC5qcz84OGU0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBJbml0VG9hc3QgPSB7XG4gIG1vdW50ZWQoKSB7XG4gICAgaW5pdCgpXG4gIH1cbn1cblxuY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgY29uc3QgdG9hc3RFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2FzdCcpXG4gIGlmICh0b2FzdEVsICYmIHRvYXN0RWwuaW5uZXJUZXh0ICE9PSAnJykge1xuICAgIHRvYXN0RWwuY2xhc3NMaXN0LmFkZChcIm1yLTRcIilcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdG9hc3RFbC5jbGFzc0xpc3QudG9nZ2xlKFwiLW1yLTY0XCIsIFwibXItNFwiKVxuICAgIH0sIDMwMDApO1xuICB9XG59XG5cbmluaXQoKVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/init_toast.js\n");

/***/ }),

/***/ "./node_modules/alpinejs/dist/alpine.js":
/*!**********************************************!*\
  !*** ./node_modules/alpinejs/dist/alpine.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, (function () { 'use strict';\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  // Thanks @stimulus:\n  // https://github.com/stimulusjs/stimulus/blob/master/packages/%40stimulus/core/src/application.ts\n  function domReady() {\n    return new Promise(resolve => {\n      if (document.readyState == \"loading\") {\n        document.addEventListener(\"DOMContentLoaded\", resolve);\n      } else {\n        resolve();\n      }\n    });\n  }\n  function arrayUnique(array) {\n    return Array.from(new Set(array));\n  }\n  function isTesting() {\n    return navigator.userAgent.includes(\"Node.js\") || navigator.userAgent.includes(\"jsdom\");\n  }\n  function checkedAttrLooseCompare(valueA, valueB) {\n    return valueA == valueB;\n  }\n  function warnIfMalformedTemplate(el, directive) {\n    if (el.tagName.toLowerCase() !== 'template') {\n      console.warn(`Alpine: [${directive}] directive should only be added to <template> tags. See https://github.com/alpinejs/alpine#${directive}`);\n    } else if (el.content.childElementCount !== 1) {\n      console.warn(`Alpine: <template> tag with [${directive}] encountered with multiple element roots. Make sure <template> only has a single child element.`);\n    }\n  }\n  function kebabCase(subject) {\n    return subject.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[_\\s]/, '-').toLowerCase();\n  }\n  function camelCase(subject) {\n    return subject.toLowerCase().replace(/-(\\w)/g, (match, char) => char.toUpperCase());\n  }\n  function walk(el, callback) {\n    if (callback(el) === false) return;\n    let node = el.firstElementChild;\n\n    while (node) {\n      walk(node, callback);\n      node = node.nextElementSibling;\n    }\n  }\n  function debounce(func, wait) {\n    var timeout;\n    return function () {\n      var context = this,\n          args = arguments;\n\n      var later = function later() {\n        timeout = null;\n        func.apply(context, args);\n      };\n\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n  function saferEval(expression, dataContext, additionalHelperVariables = {}) {\n    if (typeof expression === 'function') {\n      return expression.call(dataContext);\n    }\n\n    return new Function(['$data', ...Object.keys(additionalHelperVariables)], `var __alpine_result; with($data) { __alpine_result = ${expression} }; return __alpine_result`)(dataContext, ...Object.values(additionalHelperVariables));\n  }\n  function saferEvalNoReturn(expression, dataContext, additionalHelperVariables = {}) {\n    if (typeof expression === 'function') {\n      return Promise.resolve(expression.call(dataContext, additionalHelperVariables['$event']));\n    }\n\n    let AsyncFunction = Function;\n    /* MODERN-ONLY:START */\n\n    AsyncFunction = Object.getPrototypeOf(async function () {}).constructor;\n    /* MODERN-ONLY:END */\n    // For the cases when users pass only a function reference to the caller: `x-on:click=\"foo\"`\n    // Where \"foo\" is a function. Also, we'll pass the function the event instance when we call it.\n\n    if (Object.keys(dataContext).includes(expression)) {\n      let methodReference = new Function(['dataContext', ...Object.keys(additionalHelperVariables)], `with(dataContext) { return ${expression} }`)(dataContext, ...Object.values(additionalHelperVariables));\n\n      if (typeof methodReference === 'function') {\n        return Promise.resolve(methodReference.call(dataContext, additionalHelperVariables['$event']));\n      } else {\n        return Promise.resolve();\n      }\n    }\n\n    return Promise.resolve(new AsyncFunction(['dataContext', ...Object.keys(additionalHelperVariables)], `with(dataContext) { ${expression} }`)(dataContext, ...Object.values(additionalHelperVariables)));\n  }\n  const xAttrRE = /^x-(on|bind|data|text|html|model|if|for|show|cloak|transition|ref|spread)\\b/;\n  function isXAttr(attr) {\n    const name = replaceAtAndColonWithStandardSyntax(attr.name);\n    return xAttrRE.test(name);\n  }\n  function getXAttrs(el, component, type) {\n    let directives = Array.from(el.attributes).filter(isXAttr).map(parseHtmlAttribute); // Get an object of directives from x-spread.\n\n    let spreadDirective = directives.filter(directive => directive.type === 'spread')[0];\n\n    if (spreadDirective) {\n      let spreadObject = saferEval(spreadDirective.expression, component.$data); // Add x-spread directives to the pile of existing directives.\n\n      directives = directives.concat(Object.entries(spreadObject).map(([name, value]) => parseHtmlAttribute({\n        name,\n        value\n      })));\n    }\n\n    if (type) return directives.filter(i => i.type === type);\n    return sortDirectives(directives);\n  }\n\n  function sortDirectives(directives) {\n    let directiveOrder = ['bind', 'model', 'show', 'catch-all'];\n    return directives.sort((a, b) => {\n      let typeA = directiveOrder.indexOf(a.type) === -1 ? 'catch-all' : a.type;\n      let typeB = directiveOrder.indexOf(b.type) === -1 ? 'catch-all' : b.type;\n      return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);\n    });\n  }\n\n  function parseHtmlAttribute({\n    name,\n    value\n  }) {\n    const normalizedName = replaceAtAndColonWithStandardSyntax(name);\n    const typeMatch = normalizedName.match(xAttrRE);\n    const valueMatch = normalizedName.match(/:([a-zA-Z0-9\\-:]+)/);\n    const modifiers = normalizedName.match(/\\.[^.\\]]+(?=[^\\]]*$)/g) || [];\n    return {\n      type: typeMatch ? typeMatch[1] : null,\n      value: valueMatch ? valueMatch[1] : null,\n      modifiers: modifiers.map(i => i.replace('.', '')),\n      expression: value\n    };\n  }\n  function isBooleanAttr(attrName) {\n    // As per HTML spec table https://html.spec.whatwg.org/multipage/indices.html#attributes-3:boolean-attribute\n    // Array roughly ordered by estimated usage\n    const booleanAttributes = ['disabled', 'checked', 'required', 'readonly', 'hidden', 'open', 'selected', 'autofocus', 'itemscope', 'multiple', 'novalidate', 'allowfullscreen', 'allowpaymentrequest', 'formnovalidate', 'autoplay', 'controls', 'loop', 'muted', 'playsinline', 'default', 'ismap', 'reversed', 'async', 'defer', 'nomodule'];\n    return booleanAttributes.includes(attrName);\n  }\n  function replaceAtAndColonWithStandardSyntax(name) {\n    if (name.startsWith('@')) {\n      return name.replace('@', 'x-on:');\n    } else if (name.startsWith(':')) {\n      return name.replace(':', 'x-bind:');\n    }\n\n    return name;\n  }\n  function convertClassStringToArray(classList, filterFn = Boolean) {\n    return classList.split(' ').filter(filterFn);\n  }\n  const TRANSITION_TYPE_IN = 'in';\n  const TRANSITION_TYPE_OUT = 'out';\n  const TRANSITION_CANCELLED = 'cancelled';\n  function transitionIn(el, show, reject, component, forceSkip = false) {\n    // We don't want to transition on the initial page load.\n    if (forceSkip) return show();\n\n    if (el.__x_transition && el.__x_transition.type === TRANSITION_TYPE_IN) {\n      // there is already a similar transition going on, this was probably triggered by\n      // a change in a different property, let's just leave the previous one doing its job\n      return;\n    }\n\n    const attrs = getXAttrs(el, component, 'transition');\n    const showAttr = getXAttrs(el, component, 'show')[0]; // If this is triggered by a x-show.transition.\n\n    if (showAttr && showAttr.modifiers.includes('transition')) {\n      let modifiers = showAttr.modifiers; // If x-show.transition.out, we'll skip the \"in\" transition.\n\n      if (modifiers.includes('out') && !modifiers.includes('in')) return show();\n      const settingBothSidesOfTransition = modifiers.includes('in') && modifiers.includes('out'); // If x-show.transition.in...out... only use \"in\" related modifiers for this transition.\n\n      modifiers = settingBothSidesOfTransition ? modifiers.filter((i, index) => index < modifiers.indexOf('out')) : modifiers;\n      transitionHelperIn(el, modifiers, show, reject); // Otherwise, we can assume x-transition:enter.\n    } else if (attrs.some(attr => ['enter', 'enter-start', 'enter-end'].includes(attr.value))) {\n      transitionClassesIn(el, component, attrs, show, reject);\n    } else {\n      // If neither, just show that damn thing.\n      show();\n    }\n  }\n  function transitionOut(el, hide, reject, component, forceSkip = false) {\n    // We don't want to transition on the initial page load.\n    if (forceSkip) return hide();\n\n    if (el.__x_transition && el.__x_transition.type === TRANSITION_TYPE_OUT) {\n      // there is already a similar transition going on, this was probably triggered by\n      // a change in a different property, let's just leave the previous one doing its job\n      return;\n    }\n\n    const attrs = getXAttrs(el, component, 'transition');\n    const showAttr = getXAttrs(el, component, 'show')[0];\n\n    if (showAttr && showAttr.modifiers.includes('transition')) {\n      let modifiers = showAttr.modifiers;\n      if (modifiers.includes('in') && !modifiers.includes('out')) return hide();\n      const settingBothSidesOfTransition = modifiers.includes('in') && modifiers.includes('out');\n      modifiers = settingBothSidesOfTransition ? modifiers.filter((i, index) => index > modifiers.indexOf('out')) : modifiers;\n      transitionHelperOut(el, modifiers, settingBothSidesOfTransition, hide, reject);\n    } else if (attrs.some(attr => ['leave', 'leave-start', 'leave-end'].includes(attr.value))) {\n      transitionClassesOut(el, component, attrs, hide, reject);\n    } else {\n      hide();\n    }\n  }\n  function transitionHelperIn(el, modifiers, showCallback, reject) {\n    // Default values inspired by: https://material.io/design/motion/speed.html#duration\n    const styleValues = {\n      duration: modifierValue(modifiers, 'duration', 150),\n      origin: modifierValue(modifiers, 'origin', 'center'),\n      first: {\n        opacity: 0,\n        scale: modifierValue(modifiers, 'scale', 95)\n      },\n      second: {\n        opacity: 1,\n        scale: 100\n      }\n    };\n    transitionHelper(el, modifiers, showCallback, () => {}, reject, styleValues, TRANSITION_TYPE_IN);\n  }\n  function transitionHelperOut(el, modifiers, settingBothSidesOfTransition, hideCallback, reject) {\n    // Make the \"out\" transition .5x slower than the \"in\". (Visually better)\n    // HOWEVER, if they explicitly set a duration for the \"out\" transition,\n    // use that.\n    const duration = settingBothSidesOfTransition ? modifierValue(modifiers, 'duration', 150) : modifierValue(modifiers, 'duration', 150) / 2;\n    const styleValues = {\n      duration: duration,\n      origin: modifierValue(modifiers, 'origin', 'center'),\n      first: {\n        opacity: 1,\n        scale: 100\n      },\n      second: {\n        opacity: 0,\n        scale: modifierValue(modifiers, 'scale', 95)\n      }\n    };\n    transitionHelper(el, modifiers, () => {}, hideCallback, reject, styleValues, TRANSITION_TYPE_OUT);\n  }\n\n  function modifierValue(modifiers, key, fallback) {\n    // If the modifier isn't present, use the default.\n    if (modifiers.indexOf(key) === -1) return fallback; // If it IS present, grab the value after it: x-show.transition.duration.500ms\n\n    const rawValue = modifiers[modifiers.indexOf(key) + 1];\n    if (!rawValue) return fallback;\n\n    if (key === 'scale') {\n      // Check if the very next value is NOT a number and return the fallback.\n      // If x-show.transition.scale, we'll use the default scale value.\n      // That is how a user opts out of the opacity transition.\n      if (!isNumeric(rawValue)) return fallback;\n    }\n\n    if (key === 'duration') {\n      // Support x-show.transition.duration.500ms && duration.500\n      let match = rawValue.match(/([0-9]+)ms/);\n      if (match) return match[1];\n    }\n\n    if (key === 'origin') {\n      // Support chaining origin directions: x-show.transition.top.right\n      if (['top', 'right', 'left', 'center', 'bottom'].includes(modifiers[modifiers.indexOf(key) + 2])) {\n        return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(' ');\n      }\n    }\n\n    return rawValue;\n  }\n\n  function transitionHelper(el, modifiers, hook1, hook2, reject, styleValues, type) {\n    // clear the previous transition if exists to avoid caching the wrong styles\n    if (el.__x_transition) {\n      el.__x_transition.cancel && el.__x_transition.cancel();\n    } // If the user set these style values, we'll put them back when we're done with them.\n\n\n    const opacityCache = el.style.opacity;\n    const transformCache = el.style.transform;\n    const transformOriginCache = el.style.transformOrigin; // If no modifiers are present: x-show.transition, we'll default to both opacity and scale.\n\n    const noModifiers = !modifiers.includes('opacity') && !modifiers.includes('scale');\n    const transitionOpacity = noModifiers || modifiers.includes('opacity');\n    const transitionScale = noModifiers || modifiers.includes('scale'); // These are the explicit stages of a transition (same stages for in and for out).\n    // This way you can get a birds eye view of the hooks, and the differences\n    // between them.\n\n    const stages = {\n      start() {\n        if (transitionOpacity) el.style.opacity = styleValues.first.opacity;\n        if (transitionScale) el.style.transform = `scale(${styleValues.first.scale / 100})`;\n      },\n\n      during() {\n        if (transitionScale) el.style.transformOrigin = styleValues.origin;\n        el.style.transitionProperty = [transitionOpacity ? `opacity` : ``, transitionScale ? `transform` : ``].join(' ').trim();\n        el.style.transitionDuration = `${styleValues.duration / 1000}s`;\n        el.style.transitionTimingFunction = `cubic-bezier(0.4, 0.0, 0.2, 1)`;\n      },\n\n      show() {\n        hook1();\n      },\n\n      end() {\n        if (transitionOpacity) el.style.opacity = styleValues.second.opacity;\n        if (transitionScale) el.style.transform = `scale(${styleValues.second.scale / 100})`;\n      },\n\n      hide() {\n        hook2();\n      },\n\n      cleanup() {\n        if (transitionOpacity) el.style.opacity = opacityCache;\n        if (transitionScale) el.style.transform = transformCache;\n        if (transitionScale) el.style.transformOrigin = transformOriginCache;\n        el.style.transitionProperty = null;\n        el.style.transitionDuration = null;\n        el.style.transitionTimingFunction = null;\n      }\n\n    };\n    transition(el, stages, type, reject);\n  }\n\n  const ensureStringExpression = (expression, el, component) => {\n    return typeof expression === 'function' ? component.evaluateReturnExpression(el, expression) : expression;\n  };\n\n  function transitionClassesIn(el, component, directives, showCallback, reject) {\n    const enter = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter') || {\n      expression: ''\n    }).expression, el, component));\n    const enterStart = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter-start') || {\n      expression: ''\n    }).expression, el, component));\n    const enterEnd = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter-end') || {\n      expression: ''\n    }).expression, el, component));\n    transitionClasses(el, enter, enterStart, enterEnd, showCallback, () => {}, TRANSITION_TYPE_IN, reject);\n  }\n  function transitionClassesOut(el, component, directives, hideCallback, reject) {\n    const leave = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave') || {\n      expression: ''\n    }).expression, el, component));\n    const leaveStart = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave-start') || {\n      expression: ''\n    }).expression, el, component));\n    const leaveEnd = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave-end') || {\n      expression: ''\n    }).expression, el, component));\n    transitionClasses(el, leave, leaveStart, leaveEnd, () => {}, hideCallback, TRANSITION_TYPE_OUT, reject);\n  }\n  function transitionClasses(el, classesDuring, classesStart, classesEnd, hook1, hook2, type, reject) {\n    // clear the previous transition if exists to avoid caching the wrong classes\n    if (el.__x_transition) {\n      el.__x_transition.cancel && el.__x_transition.cancel();\n    }\n\n    const originalClasses = el.__x_original_classes || [];\n    const stages = {\n      start() {\n        el.classList.add(...classesStart);\n      },\n\n      during() {\n        el.classList.add(...classesDuring);\n      },\n\n      show() {\n        hook1();\n      },\n\n      end() {\n        // Don't remove classes that were in the original class attribute.\n        el.classList.remove(...classesStart.filter(i => !originalClasses.includes(i)));\n        el.classList.add(...classesEnd);\n      },\n\n      hide() {\n        hook2();\n      },\n\n      cleanup() {\n        el.classList.remove(...classesDuring.filter(i => !originalClasses.includes(i)));\n        el.classList.remove(...classesEnd.filter(i => !originalClasses.includes(i)));\n      }\n\n    };\n    transition(el, stages, type, reject);\n  }\n  function transition(el, stages, type, reject) {\n    const finish = once(() => {\n      stages.hide(); // Adding an \"isConnected\" check, in case the callback\n      // removed the element from the DOM.\n\n      if (el.isConnected) {\n        stages.cleanup();\n      }\n\n      delete el.__x_transition;\n    });\n    el.__x_transition = {\n      // Set transition type so we can avoid clearing transition if the direction is the same\n      type: type,\n      // create a callback for the last stages of the transition so we can call it\n      // from different point and early terminate it. Once will ensure that function\n      // is only called one time.\n      cancel: once(() => {\n        reject(TRANSITION_CANCELLED);\n        finish();\n      }),\n      finish,\n      // This store the next animation frame so we can cancel it\n      nextFrame: null\n    };\n    stages.start();\n    stages.during();\n    el.__x_transition.nextFrame = requestAnimationFrame(() => {\n      // Note: Safari's transitionDuration property will list out comma separated transition durations\n      // for every single transition property. Let's grab the first one and call it a day.\n      let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, '').replace('s', '')) * 1000;\n\n      if (duration === 0) {\n        duration = Number(getComputedStyle(el).animationDuration.replace('s', '')) * 1000;\n      }\n\n      stages.show();\n      el.__x_transition.nextFrame = requestAnimationFrame(() => {\n        stages.end();\n        setTimeout(el.__x_transition.finish, duration);\n      });\n    });\n  }\n  function isNumeric(subject) {\n    return !Array.isArray(subject) && !isNaN(subject);\n  } // Thanks @vuejs\n  // https://github.com/vuejs/vue/blob/4de4649d9637262a9b007720b59f80ac72a5620c/src/shared/util.js\n\n  function once(callback) {\n    let called = false;\n    return function () {\n      if (!called) {\n        called = true;\n        callback.apply(this, arguments);\n      }\n    };\n  }\n\n  function handleForDirective(component, templateEl, expression, initialUpdate, extraVars) {\n    warnIfMalformedTemplate(templateEl, 'x-for');\n    let iteratorNames = typeof expression === 'function' ? parseForExpression(component.evaluateReturnExpression(templateEl, expression)) : parseForExpression(expression);\n    let items = evaluateItemsAndReturnEmptyIfXIfIsPresentAndFalseOnElement(component, templateEl, iteratorNames, extraVars); // As we walk the array, we'll also walk the DOM (updating/creating as we go).\n\n    let currentEl = templateEl;\n    items.forEach((item, index) => {\n      let iterationScopeVariables = getIterationScopeVariables(iteratorNames, item, index, items, extraVars());\n      let currentKey = generateKeyForIteration(component, templateEl, index, iterationScopeVariables);\n      let nextEl = lookAheadForMatchingKeyedElementAndMoveItIfFound(currentEl.nextElementSibling, currentKey); // If we haven't found a matching key, insert the element at the current position.\n\n      if (!nextEl) {\n        nextEl = addElementInLoopAfterCurrentEl(templateEl, currentEl); // And transition it in if it's not the first page load.\n\n        transitionIn(nextEl, () => {}, () => {}, component, initialUpdate);\n        nextEl.__x_for = iterationScopeVariables;\n        component.initializeElements(nextEl, () => nextEl.__x_for); // Otherwise update the element we found.\n      } else {\n        // Temporarily remove the key indicator to allow the normal \"updateElements\" to work.\n        delete nextEl.__x_for_key;\n        nextEl.__x_for = iterationScopeVariables;\n        component.updateElements(nextEl, () => nextEl.__x_for);\n      }\n\n      currentEl = nextEl;\n      currentEl.__x_for_key = currentKey;\n    });\n    removeAnyLeftOverElementsFromPreviousUpdate(currentEl, component);\n  } // This was taken from VueJS 2.* core. Thanks Vue!\n\n  function parseForExpression(expression) {\n    let forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\n    let stripParensRE = /^\\(|\\)$/g;\n    let forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\n    let inMatch = expression.match(forAliasRE);\n    if (!inMatch) return;\n    let res = {};\n    res.items = inMatch[2].trim();\n    let item = inMatch[1].trim().replace(stripParensRE, '');\n    let iteratorMatch = item.match(forIteratorRE);\n\n    if (iteratorMatch) {\n      res.item = item.replace(forIteratorRE, '').trim();\n      res.index = iteratorMatch[1].trim();\n\n      if (iteratorMatch[2]) {\n        res.collection = iteratorMatch[2].trim();\n      }\n    } else {\n      res.item = item;\n    }\n\n    return res;\n  }\n\n  function getIterationScopeVariables(iteratorNames, item, index, items, extraVars) {\n    // We must create a new object, so each iteration has a new scope\n    let scopeVariables = extraVars ? _objectSpread2({}, extraVars) : {};\n    scopeVariables[iteratorNames.item] = item;\n    if (iteratorNames.index) scopeVariables[iteratorNames.index] = index;\n    if (iteratorNames.collection) scopeVariables[iteratorNames.collection] = items;\n    return scopeVariables;\n  }\n\n  function generateKeyForIteration(component, el, index, iterationScopeVariables) {\n    let bindKeyAttribute = getXAttrs(el, component, 'bind').filter(attr => attr.value === 'key')[0]; // If the dev hasn't specified a key, just return the index of the iteration.\n\n    if (!bindKeyAttribute) return index;\n    return component.evaluateReturnExpression(el, bindKeyAttribute.expression, () => iterationScopeVariables);\n  }\n\n  function evaluateItemsAndReturnEmptyIfXIfIsPresentAndFalseOnElement(component, el, iteratorNames, extraVars) {\n    let ifAttribute = getXAttrs(el, component, 'if')[0];\n\n    if (ifAttribute && !component.evaluateReturnExpression(el, ifAttribute.expression)) {\n      return [];\n    }\n\n    let items = component.evaluateReturnExpression(el, iteratorNames.items, extraVars); // This adds support for the `i in n` syntax.\n\n    if (isNumeric(items) && items > 0) {\n      items = Array.from(Array(items).keys(), i => i + 1);\n    }\n\n    return items;\n  }\n\n  function addElementInLoopAfterCurrentEl(templateEl, currentEl) {\n    let clone = document.importNode(templateEl.content, true);\n    currentEl.parentElement.insertBefore(clone, currentEl.nextElementSibling);\n    return currentEl.nextElementSibling;\n  }\n\n  function lookAheadForMatchingKeyedElementAndMoveItIfFound(nextEl, currentKey) {\n    if (!nextEl) return; // If the the key's DO match, no need to look ahead.\n\n    if (nextEl.__x_for_key === currentKey) return nextEl; // If they don't, we'll look ahead for a match.\n    // If we find it, we'll move it to the current position in the loop.\n\n    let tmpNextEl = nextEl;\n\n    while (tmpNextEl) {\n      if (tmpNextEl.__x_for_key === currentKey) {\n        return tmpNextEl.parentElement.insertBefore(tmpNextEl, nextEl);\n      }\n\n      tmpNextEl = tmpNextEl.nextElementSibling && tmpNextEl.nextElementSibling.__x_for_key !== undefined ? tmpNextEl.nextElementSibling : false;\n    }\n  }\n\n  function removeAnyLeftOverElementsFromPreviousUpdate(currentEl, component) {\n    var nextElementFromOldLoop = currentEl.nextElementSibling && currentEl.nextElementSibling.__x_for_key !== undefined ? currentEl.nextElementSibling : false;\n\n    while (nextElementFromOldLoop) {\n      let nextElementFromOldLoopImmutable = nextElementFromOldLoop;\n      let nextSibling = nextElementFromOldLoop.nextElementSibling;\n      transitionOut(nextElementFromOldLoop, () => {\n        nextElementFromOldLoopImmutable.remove();\n      }, () => {}, component);\n      nextElementFromOldLoop = nextSibling && nextSibling.__x_for_key !== undefined ? nextSibling : false;\n    }\n  }\n\n  function handleAttributeBindingDirective(component, el, attrName, expression, extraVars, attrType, modifiers) {\n    var value = component.evaluateReturnExpression(el, expression, extraVars);\n\n    if (attrName === 'value') {\n      if (Alpine.ignoreFocusedForValueBinding && document.activeElement.isSameNode(el)) return; // If nested model key is undefined, set the default value to empty string.\n\n      if (value === undefined && expression.match(/\\./)) {\n        value = '';\n      }\n\n      if (el.type === 'radio') {\n        // Set radio value from x-bind:value, if no \"value\" attribute exists.\n        // If there are any initial state values, radio will have a correct\n        // \"checked\" value since x-bind:value is processed before x-model.\n        if (el.attributes.value === undefined && attrType === 'bind') {\n          el.value = value;\n        } else if (attrType !== 'bind') {\n          el.checked = checkedAttrLooseCompare(el.value, value);\n        }\n      } else if (el.type === 'checkbox') {\n        // If we are explicitly binding a string to the :value, set the string,\n        // If the value is a boolean, leave it alone, it will be set to \"on\"\n        // automatically.\n        if (typeof value !== 'boolean' && ![null, undefined].includes(value) && attrType === 'bind') {\n          el.value = String(value);\n        } else if (attrType !== 'bind') {\n          if (Array.isArray(value)) {\n            // I'm purposely not using Array.includes here because it's\n            // strict, and because of Numeric/String mis-casting, I\n            // want the \"includes\" to be \"fuzzy\".\n            el.checked = value.some(val => checkedAttrLooseCompare(val, el.value));\n          } else {\n            el.checked = !!value;\n          }\n        }\n      } else if (el.tagName === 'SELECT') {\n        updateSelect(el, value);\n      } else {\n        if (el.value === value) return;\n        el.value = value;\n      }\n    } else if (attrName === 'class') {\n      if (Array.isArray(value)) {\n        const originalClasses = el.__x_original_classes || [];\n        el.setAttribute('class', arrayUnique(originalClasses.concat(value)).join(' '));\n      } else if (typeof value === 'object') {\n        // Sorting the keys / class names by their boolean value will ensure that\n        // anything that evaluates to `false` and needs to remove classes is run first.\n        const keysSortedByBooleanValue = Object.keys(value).sort((a, b) => value[a] - value[b]);\n        keysSortedByBooleanValue.forEach(classNames => {\n          if (value[classNames]) {\n            convertClassStringToArray(classNames).forEach(className => el.classList.add(className));\n          } else {\n            convertClassStringToArray(classNames).forEach(className => el.classList.remove(className));\n          }\n        });\n      } else {\n        const originalClasses = el.__x_original_classes || [];\n        const newClasses = convertClassStringToArray(value);\n        el.setAttribute('class', arrayUnique(originalClasses.concat(newClasses)).join(' '));\n      }\n    } else {\n      attrName = modifiers.includes('camel') ? camelCase(attrName) : attrName; // If an attribute's bound value is null, undefined or false, remove the attribute\n\n      if ([null, undefined, false].includes(value)) {\n        el.removeAttribute(attrName);\n      } else {\n        isBooleanAttr(attrName) ? setIfChanged(el, attrName, attrName) : setIfChanged(el, attrName, value);\n      }\n    }\n  }\n\n  function setIfChanged(el, attrName, value) {\n    if (el.getAttribute(attrName) != value) {\n      el.setAttribute(attrName, value);\n    }\n  }\n\n  function updateSelect(el, value) {\n    const arrayWrappedValue = [].concat(value).map(value => {\n      return value + '';\n    });\n    Array.from(el.options).forEach(option => {\n      option.selected = arrayWrappedValue.includes(option.value || option.text);\n    });\n  }\n\n  function handleTextDirective(el, output, expression) {\n    // If nested model key is undefined, set the default value to empty string.\n    if (output === undefined && expression.match(/\\./)) {\n      output = '';\n    }\n\n    el.textContent = output;\n  }\n\n  function handleHtmlDirective(component, el, expression, extraVars) {\n    el.innerHTML = component.evaluateReturnExpression(el, expression, extraVars);\n  }\n\n  function handleShowDirective(component, el, value, modifiers, initialUpdate = false) {\n    const hide = () => {\n      el.style.display = 'none';\n      el.__x_is_shown = false;\n    };\n\n    const show = () => {\n      if (el.style.length === 1 && el.style.display === 'none') {\n        el.removeAttribute('style');\n      } else {\n        el.style.removeProperty('display');\n      }\n\n      el.__x_is_shown = true;\n    };\n\n    if (initialUpdate === true) {\n      if (value) {\n        show();\n      } else {\n        hide();\n      }\n\n      return;\n    }\n\n    const handle = (resolve, reject) => {\n      if (value) {\n        if (el.style.display === 'none' || el.__x_transition) {\n          transitionIn(el, () => {\n            show();\n          }, reject, component);\n        }\n\n        resolve(() => {});\n      } else {\n        if (el.style.display !== 'none') {\n          transitionOut(el, () => {\n            resolve(() => {\n              hide();\n            });\n          }, reject, component);\n        } else {\n          resolve(() => {});\n        }\n      }\n    }; // The working of x-show is a bit complex because we need to\n    // wait for any child transitions to finish before hiding\n    // some element. Also, this has to be done recursively.\n    // If x-show.immediate, foregoe the waiting.\n\n\n    if (modifiers.includes('immediate')) {\n      handle(finish => finish(), () => {});\n      return;\n    } // x-show is encountered during a DOM tree walk. If an element\n    // we encounter is NOT a child of another x-show element we\n    // can execute the previous x-show stack (if one exists).\n\n\n    if (component.showDirectiveLastElement && !component.showDirectiveLastElement.contains(el)) {\n      component.executeAndClearRemainingShowDirectiveStack();\n    }\n\n    component.showDirectiveStack.push(handle);\n    component.showDirectiveLastElement = el;\n  }\n\n  function handleIfDirective(component, el, expressionResult, initialUpdate, extraVars) {\n    warnIfMalformedTemplate(el, 'x-if');\n    const elementHasAlreadyBeenAdded = el.nextElementSibling && el.nextElementSibling.__x_inserted_me === true;\n\n    if (expressionResult && (!elementHasAlreadyBeenAdded || el.__x_transition)) {\n      const clone = document.importNode(el.content, true);\n      el.parentElement.insertBefore(clone, el.nextElementSibling);\n      transitionIn(el.nextElementSibling, () => {}, () => {}, component, initialUpdate);\n      component.initializeElements(el.nextElementSibling, extraVars);\n      el.nextElementSibling.__x_inserted_me = true;\n    } else if (!expressionResult && elementHasAlreadyBeenAdded) {\n      transitionOut(el.nextElementSibling, () => {\n        el.nextElementSibling.remove();\n      }, () => {}, component, initialUpdate);\n    }\n  }\n\n  function registerListener(component, el, event, modifiers, expression, extraVars = {}) {\n    const options = {\n      passive: modifiers.includes('passive')\n    };\n\n    if (modifiers.includes('camel')) {\n      event = camelCase(event);\n    }\n\n    if (modifiers.includes('away')) {\n      let handler = e => {\n        // Don't do anything if the click came from the element or within it.\n        if (el.contains(e.target)) return; // Don't do anything if this element isn't currently visible.\n\n        if (el.offsetWidth < 1 && el.offsetHeight < 1) return; // Now that we are sure the element is visible, AND the click\n        // is from outside it, let's run the expression.\n\n        runListenerHandler(component, expression, e, extraVars);\n\n        if (modifiers.includes('once')) {\n          document.removeEventListener(event, handler, options);\n        }\n      }; // Listen for this event at the root level.\n\n\n      document.addEventListener(event, handler, options);\n    } else {\n      let listenerTarget = modifiers.includes('window') ? window : modifiers.includes('document') ? document : el;\n\n      let handler = e => {\n        // Remove this global event handler if the element that declared it\n        // has been removed. It's now stale.\n        if (listenerTarget === window || listenerTarget === document) {\n          if (!document.body.contains(el)) {\n            listenerTarget.removeEventListener(event, handler, options);\n            return;\n          }\n        }\n\n        if (isKeyEvent(event)) {\n          if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {\n            return;\n          }\n        }\n\n        if (modifiers.includes('prevent')) e.preventDefault();\n        if (modifiers.includes('stop')) e.stopPropagation(); // If the .self modifier isn't present, or if it is present and\n        // the target element matches the element we are registering the\n        // event on, run the handler\n\n        if (!modifiers.includes('self') || e.target === el) {\n          const returnValue = runListenerHandler(component, expression, e, extraVars);\n          returnValue.then(value => {\n            if (value === false) {\n              e.preventDefault();\n            } else {\n              if (modifiers.includes('once')) {\n                listenerTarget.removeEventListener(event, handler, options);\n              }\n            }\n          });\n        }\n      };\n\n      if (modifiers.includes('debounce')) {\n        let nextModifier = modifiers[modifiers.indexOf('debounce') + 1] || 'invalid-wait';\n        let wait = isNumeric(nextModifier.split('ms')[0]) ? Number(nextModifier.split('ms')[0]) : 250;\n        handler = debounce(handler, wait);\n      }\n\n      listenerTarget.addEventListener(event, handler, options);\n    }\n  }\n\n  function runListenerHandler(component, expression, e, extraVars) {\n    return component.evaluateCommandExpression(e.target, expression, () => {\n      return _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        '$event': e\n      });\n    });\n  }\n\n  function isKeyEvent(event) {\n    return ['keydown', 'keyup'].includes(event);\n  }\n\n  function isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {\n    let keyModifiers = modifiers.filter(i => {\n      return !['window', 'document', 'prevent', 'stop'].includes(i);\n    });\n\n    if (keyModifiers.includes('debounce')) {\n      let debounceIndex = keyModifiers.indexOf('debounce');\n      keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || 'invalid-wait').split('ms')[0]) ? 2 : 1);\n    } // If no modifier is specified, we'll call it a press.\n\n\n    if (keyModifiers.length === 0) return false; // If one is passed, AND it matches the key pressed, we'll call it a press.\n\n    if (keyModifiers.length === 1 && keyModifiers[0] === keyToModifier(e.key)) return false; // The user is listening for key combinations.\n\n    const systemKeyModifiers = ['ctrl', 'shift', 'alt', 'meta', 'cmd', 'super'];\n    const selectedSystemKeyModifiers = systemKeyModifiers.filter(modifier => keyModifiers.includes(modifier));\n    keyModifiers = keyModifiers.filter(i => !selectedSystemKeyModifiers.includes(i));\n\n    if (selectedSystemKeyModifiers.length > 0) {\n      const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter(modifier => {\n        // Alias \"cmd\" and \"super\" to \"meta\"\n        if (modifier === 'cmd' || modifier === 'super') modifier = 'meta';\n        return e[`${modifier}Key`];\n      }); // If all the modifiers selected are pressed, ...\n\n      if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {\n        // AND the remaining key is pressed as well. It's a press.\n        if (keyModifiers[0] === keyToModifier(e.key)) return false;\n      }\n    } // We'll call it NOT a valid keypress.\n\n\n    return true;\n  }\n\n  function keyToModifier(key) {\n    switch (key) {\n      case '/':\n        return 'slash';\n\n      case ' ':\n      case 'Spacebar':\n        return 'space';\n\n      default:\n        return key && kebabCase(key);\n    }\n  }\n\n  function registerModelListener(component, el, modifiers, expression, extraVars) {\n    // If the element we are binding to is a select, a radio, or checkbox\n    // we'll listen for the change event instead of the \"input\" event.\n    var event = el.tagName.toLowerCase() === 'select' || ['checkbox', 'radio'].includes(el.type) || modifiers.includes('lazy') ? 'change' : 'input';\n    const listenerExpression = `${expression} = rightSideOfExpression($event, ${expression})`;\n    registerListener(component, el, event, modifiers, listenerExpression, () => {\n      return _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        rightSideOfExpression: generateModelAssignmentFunction(el, modifiers, expression)\n      });\n    });\n  }\n\n  function generateModelAssignmentFunction(el, modifiers, expression) {\n    if (el.type === 'radio') {\n      // Radio buttons only work properly when they share a name attribute.\n      // People might assume we take care of that for them, because\n      // they already set a shared \"x-model\" attribute.\n      if (!el.hasAttribute('name')) el.setAttribute('name', expression);\n    }\n\n    return (event, currentValue) => {\n      // Check for event.detail due to an issue where IE11 handles other events as a CustomEvent.\n      if (event instanceof CustomEvent && event.detail) {\n        return event.detail;\n      } else if (el.type === 'checkbox') {\n        // If the data we are binding to is an array, toggle its value inside the array.\n        if (Array.isArray(currentValue)) {\n          const newValue = modifiers.includes('number') ? safeParseNumber(event.target.value) : event.target.value;\n          return event.target.checked ? currentValue.concat([newValue]) : currentValue.filter(el => !checkedAttrLooseCompare(el, newValue));\n        } else {\n          return event.target.checked;\n        }\n      } else if (el.tagName.toLowerCase() === 'select' && el.multiple) {\n        return modifiers.includes('number') ? Array.from(event.target.selectedOptions).map(option => {\n          const rawValue = option.value || option.text;\n          return safeParseNumber(rawValue);\n        }) : Array.from(event.target.selectedOptions).map(option => {\n          return option.value || option.text;\n        });\n      } else {\n        const rawValue = event.target.value;\n        return modifiers.includes('number') ? safeParseNumber(rawValue) : modifiers.includes('trim') ? rawValue.trim() : rawValue;\n      }\n    };\n  }\n\n  function safeParseNumber(rawValue) {\n    const number = rawValue ? parseFloat(rawValue) : null;\n    return isNumeric(number) ? number : rawValue;\n  }\n\n  /**\n   * Copyright (C) 2017 salesforce.com, inc.\n   */\n  const { isArray } = Array;\n  const { getPrototypeOf, create: ObjectCreate, defineProperty: ObjectDefineProperty, defineProperties: ObjectDefineProperties, isExtensible, getOwnPropertyDescriptor, getOwnPropertyNames, getOwnPropertySymbols, preventExtensions, hasOwnProperty, } = Object;\n  const { push: ArrayPush, concat: ArrayConcat, map: ArrayMap, } = Array.prototype;\n  function isUndefined(obj) {\n      return obj === undefined;\n  }\n  function isFunction(obj) {\n      return typeof obj === 'function';\n  }\n  function isObject(obj) {\n      return typeof obj === 'object';\n  }\n  const proxyToValueMap = new WeakMap();\n  function registerProxy(proxy, value) {\n      proxyToValueMap.set(proxy, value);\n  }\n  const unwrap = (replicaOrAny) => proxyToValueMap.get(replicaOrAny) || replicaOrAny;\n\n  function wrapValue(membrane, value) {\n      return membrane.valueIsObservable(value) ? membrane.getProxy(value) : value;\n  }\n  /**\n   * Unwrap property descriptors will set value on original descriptor\n   * We only need to unwrap if value is specified\n   * @param descriptor external descrpitor provided to define new property on original value\n   */\n  function unwrapDescriptor(descriptor) {\n      if (hasOwnProperty.call(descriptor, 'value')) {\n          descriptor.value = unwrap(descriptor.value);\n      }\n      return descriptor;\n  }\n  function lockShadowTarget(membrane, shadowTarget, originalTarget) {\n      const targetKeys = ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));\n      targetKeys.forEach((key) => {\n          let descriptor = getOwnPropertyDescriptor(originalTarget, key);\n          // We do not need to wrap the descriptor if configurable\n          // Because we can deal with wrapping it when user goes through\n          // Get own property descriptor. There is also a chance that this descriptor\n          // could change sometime in the future, so we can defer wrapping\n          // until we need to\n          if (!descriptor.configurable) {\n              descriptor = wrapDescriptor(membrane, descriptor, wrapValue);\n          }\n          ObjectDefineProperty(shadowTarget, key, descriptor);\n      });\n      preventExtensions(shadowTarget);\n  }\n  class ReactiveProxyHandler {\n      constructor(membrane, value) {\n          this.originalTarget = value;\n          this.membrane = membrane;\n      }\n      get(shadowTarget, key) {\n          const { originalTarget, membrane } = this;\n          const value = originalTarget[key];\n          const { valueObserved } = membrane;\n          valueObserved(originalTarget, key);\n          return membrane.getProxy(value);\n      }\n      set(shadowTarget, key, value) {\n          const { originalTarget, membrane: { valueMutated } } = this;\n          const oldValue = originalTarget[key];\n          if (oldValue !== value) {\n              originalTarget[key] = value;\n              valueMutated(originalTarget, key);\n          }\n          else if (key === 'length' && isArray(originalTarget)) {\n              // fix for issue #236: push will add the new index, and by the time length\n              // is updated, the internal length is already equal to the new length value\n              // therefore, the oldValue is equal to the value. This is the forking logic\n              // to support this use case.\n              valueMutated(originalTarget, key);\n          }\n          return true;\n      }\n      deleteProperty(shadowTarget, key) {\n          const { originalTarget, membrane: { valueMutated } } = this;\n          delete originalTarget[key];\n          valueMutated(originalTarget, key);\n          return true;\n      }\n      apply(shadowTarget, thisArg, argArray) {\n          /* No op */\n      }\n      construct(target, argArray, newTarget) {\n          /* No op */\n      }\n      has(shadowTarget, key) {\n          const { originalTarget, membrane: { valueObserved } } = this;\n          valueObserved(originalTarget, key);\n          return key in originalTarget;\n      }\n      ownKeys(shadowTarget) {\n          const { originalTarget } = this;\n          return ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));\n      }\n      isExtensible(shadowTarget) {\n          const shadowIsExtensible = isExtensible(shadowTarget);\n          if (!shadowIsExtensible) {\n              return shadowIsExtensible;\n          }\n          const { originalTarget, membrane } = this;\n          const targetIsExtensible = isExtensible(originalTarget);\n          if (!targetIsExtensible) {\n              lockShadowTarget(membrane, shadowTarget, originalTarget);\n          }\n          return targetIsExtensible;\n      }\n      setPrototypeOf(shadowTarget, prototype) {\n      }\n      getPrototypeOf(shadowTarget) {\n          const { originalTarget } = this;\n          return getPrototypeOf(originalTarget);\n      }\n      getOwnPropertyDescriptor(shadowTarget, key) {\n          const { originalTarget, membrane } = this;\n          const { valueObserved } = this.membrane;\n          // keys looked up via hasOwnProperty need to be reactive\n          valueObserved(originalTarget, key);\n          let desc = getOwnPropertyDescriptor(originalTarget, key);\n          if (isUndefined(desc)) {\n              return desc;\n          }\n          const shadowDescriptor = getOwnPropertyDescriptor(shadowTarget, key);\n          if (!isUndefined(shadowDescriptor)) {\n              return shadowDescriptor;\n          }\n          // Note: by accessing the descriptor, the key is marked as observed\n          // but access to the value, setter or getter (if available) cannot observe\n          // mutations, just like regular methods, in which case we just do nothing.\n          desc = wrapDescriptor(membrane, desc, wrapValue);\n          if (!desc.configurable) {\n              // If descriptor from original target is not configurable,\n              // We must copy the wrapped descriptor over to the shadow target.\n              // Otherwise, proxy will throw an invariant error.\n              // This is our last chance to lock the value.\n              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor#Invariants\n              ObjectDefineProperty(shadowTarget, key, desc);\n          }\n          return desc;\n      }\n      preventExtensions(shadowTarget) {\n          const { originalTarget, membrane } = this;\n          lockShadowTarget(membrane, shadowTarget, originalTarget);\n          preventExtensions(originalTarget);\n          return true;\n      }\n      defineProperty(shadowTarget, key, descriptor) {\n          const { originalTarget, membrane } = this;\n          const { valueMutated } = membrane;\n          const { configurable } = descriptor;\n          // We have to check for value in descriptor\n          // because Object.freeze(proxy) calls this method\n          // with only { configurable: false, writeable: false }\n          // Additionally, method will only be called with writeable:false\n          // if the descriptor has a value, as opposed to getter/setter\n          // So we can just check if writable is present and then see if\n          // value is present. This eliminates getter and setter descriptors\n          if (hasOwnProperty.call(descriptor, 'writable') && !hasOwnProperty.call(descriptor, 'value')) {\n              const originalDescriptor = getOwnPropertyDescriptor(originalTarget, key);\n              descriptor.value = originalDescriptor.value;\n          }\n          ObjectDefineProperty(originalTarget, key, unwrapDescriptor(descriptor));\n          if (configurable === false) {\n              ObjectDefineProperty(shadowTarget, key, wrapDescriptor(membrane, descriptor, wrapValue));\n          }\n          valueMutated(originalTarget, key);\n          return true;\n      }\n  }\n\n  function wrapReadOnlyValue(membrane, value) {\n      return membrane.valueIsObservable(value) ? membrane.getReadOnlyProxy(value) : value;\n  }\n  class ReadOnlyHandler {\n      constructor(membrane, value) {\n          this.originalTarget = value;\n          this.membrane = membrane;\n      }\n      get(shadowTarget, key) {\n          const { membrane, originalTarget } = this;\n          const value = originalTarget[key];\n          const { valueObserved } = membrane;\n          valueObserved(originalTarget, key);\n          return membrane.getReadOnlyProxy(value);\n      }\n      set(shadowTarget, key, value) {\n          return false;\n      }\n      deleteProperty(shadowTarget, key) {\n          return false;\n      }\n      apply(shadowTarget, thisArg, argArray) {\n          /* No op */\n      }\n      construct(target, argArray, newTarget) {\n          /* No op */\n      }\n      has(shadowTarget, key) {\n          const { originalTarget, membrane: { valueObserved } } = this;\n          valueObserved(originalTarget, key);\n          return key in originalTarget;\n      }\n      ownKeys(shadowTarget) {\n          const { originalTarget } = this;\n          return ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));\n      }\n      setPrototypeOf(shadowTarget, prototype) {\n      }\n      getOwnPropertyDescriptor(shadowTarget, key) {\n          const { originalTarget, membrane } = this;\n          const { valueObserved } = membrane;\n          // keys looked up via hasOwnProperty need to be reactive\n          valueObserved(originalTarget, key);\n          let desc = getOwnPropertyDescriptor(originalTarget, key);\n          if (isUndefined(desc)) {\n              return desc;\n          }\n          const shadowDescriptor = getOwnPropertyDescriptor(shadowTarget, key);\n          if (!isUndefined(shadowDescriptor)) {\n              return shadowDescriptor;\n          }\n          // Note: by accessing the descriptor, the key is marked as observed\n          // but access to the value or getter (if available) cannot be observed,\n          // just like regular methods, in which case we just do nothing.\n          desc = wrapDescriptor(membrane, desc, wrapReadOnlyValue);\n          if (hasOwnProperty.call(desc, 'set')) {\n              desc.set = undefined; // readOnly membrane does not allow setters\n          }\n          if (!desc.configurable) {\n              // If descriptor from original target is not configurable,\n              // We must copy the wrapped descriptor over to the shadow target.\n              // Otherwise, proxy will throw an invariant error.\n              // This is our last chance to lock the value.\n              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor#Invariants\n              ObjectDefineProperty(shadowTarget, key, desc);\n          }\n          return desc;\n      }\n      preventExtensions(shadowTarget) {\n          return false;\n      }\n      defineProperty(shadowTarget, key, descriptor) {\n          return false;\n      }\n  }\n  function createShadowTarget(value) {\n      let shadowTarget = undefined;\n      if (isArray(value)) {\n          shadowTarget = [];\n      }\n      else if (isObject(value)) {\n          shadowTarget = {};\n      }\n      return shadowTarget;\n  }\n  const ObjectDotPrototype = Object.prototype;\n  function defaultValueIsObservable(value) {\n      // intentionally checking for null\n      if (value === null) {\n          return false;\n      }\n      // treat all non-object types, including undefined, as non-observable values\n      if (typeof value !== 'object') {\n          return false;\n      }\n      if (isArray(value)) {\n          return true;\n      }\n      const proto = getPrototypeOf(value);\n      return (proto === ObjectDotPrototype || proto === null || getPrototypeOf(proto) === null);\n  }\n  const defaultValueObserved = (obj, key) => {\n      /* do nothing */\n  };\n  const defaultValueMutated = (obj, key) => {\n      /* do nothing */\n  };\n  const defaultValueDistortion = (value) => value;\n  function wrapDescriptor(membrane, descriptor, getValue) {\n      const { set, get } = descriptor;\n      if (hasOwnProperty.call(descriptor, 'value')) {\n          descriptor.value = getValue(membrane, descriptor.value);\n      }\n      else {\n          if (!isUndefined(get)) {\n              descriptor.get = function () {\n                  // invoking the original getter with the original target\n                  return getValue(membrane, get.call(unwrap(this)));\n              };\n          }\n          if (!isUndefined(set)) {\n              descriptor.set = function (value) {\n                  // At this point we don't have a clear indication of whether\n                  // or not a valid mutation will occur, we don't have the key,\n                  // and we are not sure why and how they are invoking this setter.\n                  // Nevertheless we preserve the original semantics by invoking the\n                  // original setter with the original target and the unwrapped value\n                  set.call(unwrap(this), membrane.unwrapProxy(value));\n              };\n          }\n      }\n      return descriptor;\n  }\n  class ReactiveMembrane {\n      constructor(options) {\n          this.valueDistortion = defaultValueDistortion;\n          this.valueMutated = defaultValueMutated;\n          this.valueObserved = defaultValueObserved;\n          this.valueIsObservable = defaultValueIsObservable;\n          this.objectGraph = new WeakMap();\n          if (!isUndefined(options)) {\n              const { valueDistortion, valueMutated, valueObserved, valueIsObservable } = options;\n              this.valueDistortion = isFunction(valueDistortion) ? valueDistortion : defaultValueDistortion;\n              this.valueMutated = isFunction(valueMutated) ? valueMutated : defaultValueMutated;\n              this.valueObserved = isFunction(valueObserved) ? valueObserved : defaultValueObserved;\n              this.valueIsObservable = isFunction(valueIsObservable) ? valueIsObservable : defaultValueIsObservable;\n          }\n      }\n      getProxy(value) {\n          const unwrappedValue = unwrap(value);\n          const distorted = this.valueDistortion(unwrappedValue);\n          if (this.valueIsObservable(distorted)) {\n              const o = this.getReactiveState(unwrappedValue, distorted);\n              // when trying to extract the writable version of a readonly\n              // we return the readonly.\n              return o.readOnly === value ? value : o.reactive;\n          }\n          return distorted;\n      }\n      getReadOnlyProxy(value) {\n          value = unwrap(value);\n          const distorted = this.valueDistortion(value);\n          if (this.valueIsObservable(distorted)) {\n              return this.getReactiveState(value, distorted).readOnly;\n          }\n          return distorted;\n      }\n      unwrapProxy(p) {\n          return unwrap(p);\n      }\n      getReactiveState(value, distortedValue) {\n          const { objectGraph, } = this;\n          let reactiveState = objectGraph.get(distortedValue);\n          if (reactiveState) {\n              return reactiveState;\n          }\n          const membrane = this;\n          reactiveState = {\n              get reactive() {\n                  const reactiveHandler = new ReactiveProxyHandler(membrane, distortedValue);\n                  // caching the reactive proxy after the first time it is accessed\n                  const proxy = new Proxy(createShadowTarget(distortedValue), reactiveHandler);\n                  registerProxy(proxy, value);\n                  ObjectDefineProperty(this, 'reactive', { value: proxy });\n                  return proxy;\n              },\n              get readOnly() {\n                  const readOnlyHandler = new ReadOnlyHandler(membrane, distortedValue);\n                  // caching the readOnly proxy after the first time it is accessed\n                  const proxy = new Proxy(createShadowTarget(distortedValue), readOnlyHandler);\n                  registerProxy(proxy, value);\n                  ObjectDefineProperty(this, 'readOnly', { value: proxy });\n                  return proxy;\n              }\n          };\n          objectGraph.set(distortedValue, reactiveState);\n          return reactiveState;\n      }\n  }\n  /** version: 0.26.0 */\n\n  function wrap(data, mutationCallback) {\n\n    let membrane = new ReactiveMembrane({\n      valueMutated(target, key) {\n        mutationCallback(target, key);\n      }\n\n    });\n    return {\n      data: membrane.getProxy(data),\n      membrane: membrane\n    };\n  }\n  function unwrap$1(membrane, observable) {\n    let unwrappedData = membrane.unwrapProxy(observable);\n    let copy = {};\n    Object.keys(unwrappedData).forEach(key => {\n      if (['$el', '$refs', '$nextTick', '$watch'].includes(key)) return;\n      copy[key] = unwrappedData[key];\n    });\n    return copy;\n  }\n\n  class Component {\n    constructor(el, componentForClone = null) {\n      this.$el = el;\n      const dataAttr = this.$el.getAttribute('x-data');\n      const dataExpression = dataAttr === '' ? '{}' : dataAttr;\n      const initExpression = this.$el.getAttribute('x-init');\n      let dataExtras = {\n        $el: this.$el\n      };\n      let canonicalComponentElementReference = componentForClone ? componentForClone.$el : this.$el;\n      Object.entries(Alpine.magicProperties).forEach(([name, callback]) => {\n        Object.defineProperty(dataExtras, `$${name}`, {\n          get: function get() {\n            return callback(canonicalComponentElementReference);\n          }\n        });\n      });\n      this.unobservedData = componentForClone ? componentForClone.getUnobservedData() : saferEval(dataExpression, dataExtras);\n      // Construct a Proxy-based observable. This will be used to handle reactivity.\n\n      let {\n        membrane,\n        data\n      } = this.wrapDataInObservable(this.unobservedData);\n      this.$data = data;\n      this.membrane = membrane; // After making user-supplied data methods reactive, we can now add\n      // our magic properties to the original data for access.\n\n      this.unobservedData.$el = this.$el;\n      this.unobservedData.$refs = this.getRefsProxy();\n      this.nextTickStack = [];\n\n      this.unobservedData.$nextTick = callback => {\n        this.nextTickStack.push(callback);\n      };\n\n      this.watchers = {};\n\n      this.unobservedData.$watch = (property, callback) => {\n        if (!this.watchers[property]) this.watchers[property] = [];\n        this.watchers[property].push(callback);\n      };\n      /* MODERN-ONLY:START */\n      // We remove this piece of code from the legacy build.\n      // In IE11, we have already defined our helpers at this point.\n      // Register custom magic properties.\n\n\n      Object.entries(Alpine.magicProperties).forEach(([name, callback]) => {\n        Object.defineProperty(this.unobservedData, `$${name}`, {\n          get: function get() {\n            return callback(canonicalComponentElementReference);\n          }\n        });\n      });\n      /* MODERN-ONLY:END */\n\n      this.showDirectiveStack = [];\n      this.showDirectiveLastElement;\n      componentForClone || Alpine.onBeforeComponentInitializeds.forEach(callback => callback(this));\n      var initReturnedCallback; // If x-init is present AND we aren't cloning (skip x-init on clone)\n\n      if (initExpression && !componentForClone) {\n        // We want to allow data manipulation, but not trigger DOM updates just yet.\n        // We haven't even initialized the elements with their Alpine bindings. I mean c'mon.\n        this.pauseReactivity = true;\n        initReturnedCallback = this.evaluateReturnExpression(this.$el, initExpression);\n        this.pauseReactivity = false;\n      } // Register all our listeners and set all our attribute bindings.\n\n\n      this.initializeElements(this.$el); // Use mutation observer to detect new elements being added within this component at run-time.\n      // Alpine's just so darn flexible amirite?\n\n      this.listenForNewElementsToInitialize();\n\n      if (typeof initReturnedCallback === 'function') {\n        // Run the callback returned from the \"x-init\" hook to allow the user to do stuff after\n        // Alpine's got it's grubby little paws all over everything.\n        initReturnedCallback.call(this.$data);\n      }\n\n      componentForClone || setTimeout(() => {\n        Alpine.onComponentInitializeds.forEach(callback => callback(this));\n      }, 0);\n    }\n\n    getUnobservedData() {\n      return unwrap$1(this.membrane, this.$data);\n    }\n\n    wrapDataInObservable(data) {\n      var self = this;\n      let updateDom = debounce(function () {\n        self.updateElements(self.$el);\n      }, 0);\n      return wrap(data, (target, key) => {\n        if (self.watchers[key]) {\n          // If there's a watcher for this specific key, run it.\n          self.watchers[key].forEach(callback => callback(target[key]));\n        } else if (Array.isArray(target)) {\n          // Arrays are special cases, if any of the items change, we consider the array as mutated.\n          Object.keys(self.watchers).forEach(fullDotNotationKey => {\n            let dotNotationParts = fullDotNotationKey.split('.'); // Ignore length mutations since they would result in duplicate calls.\n            // For example, when calling push, we would get a mutation for the item's key\n            // and a second mutation for the length property.\n\n            if (key === 'length') return;\n            dotNotationParts.reduce((comparisonData, part) => {\n              if (Object.is(target, comparisonData[part])) {\n                self.watchers[fullDotNotationKey].forEach(callback => callback(target));\n              }\n\n              return comparisonData[part];\n            }, self.unobservedData);\n          });\n        } else {\n          // Let's walk through the watchers with \"dot-notation\" (foo.bar) and see\n          // if this mutation fits any of them.\n          Object.keys(self.watchers).filter(i => i.includes('.')).forEach(fullDotNotationKey => {\n            let dotNotationParts = fullDotNotationKey.split('.'); // If this dot-notation watcher's last \"part\" doesn't match the current\n            // key, then skip it early for performance reasons.\n\n            if (key !== dotNotationParts[dotNotationParts.length - 1]) return; // Now, walk through the dot-notation \"parts\" recursively to find\n            // a match, and call the watcher if one's found.\n\n            dotNotationParts.reduce((comparisonData, part) => {\n              if (Object.is(target, comparisonData)) {\n                // Run the watchers.\n                self.watchers[fullDotNotationKey].forEach(callback => callback(target[key]));\n              }\n\n              return comparisonData[part];\n            }, self.unobservedData);\n          });\n        } // Don't react to data changes for cases like the `x-created` hook.\n\n\n        if (self.pauseReactivity) return;\n        updateDom();\n      });\n    }\n\n    walkAndSkipNestedComponents(el, callback, initializeComponentCallback = () => {}) {\n      walk(el, el => {\n        // We've hit a component.\n        if (el.hasAttribute('x-data')) {\n          // If it's not the current one.\n          if (!el.isSameNode(this.$el)) {\n            // Initialize it if it's not.\n            if (!el.__x) initializeComponentCallback(el); // Now we'll let that sub-component deal with itself.\n\n            return false;\n          }\n        }\n\n        return callback(el);\n      });\n    }\n\n    initializeElements(rootEl, extraVars = () => {}) {\n      this.walkAndSkipNestedComponents(rootEl, el => {\n        // Don't touch spawns from for loop\n        if (el.__x_for_key !== undefined) return false; // Don't touch spawns from if directives\n\n        if (el.__x_inserted_me !== undefined) return false;\n        this.initializeElement(el, extraVars);\n      }, el => {\n        el.__x = new Component(el);\n      });\n      this.executeAndClearRemainingShowDirectiveStack();\n      this.executeAndClearNextTickStack(rootEl);\n    }\n\n    initializeElement(el, extraVars) {\n      // To support class attribute merging, we have to know what the element's\n      // original class attribute looked like for reference.\n      if (el.hasAttribute('class') && getXAttrs(el, this).length > 0) {\n        el.__x_original_classes = convertClassStringToArray(el.getAttribute('class'));\n      }\n\n      this.registerListeners(el, extraVars);\n      this.resolveBoundAttributes(el, true, extraVars);\n    }\n\n    updateElements(rootEl, extraVars = () => {}) {\n      this.walkAndSkipNestedComponents(rootEl, el => {\n        // Don't touch spawns from for loop (and check if the root is actually a for loop in a parent, don't skip it.)\n        if (el.__x_for_key !== undefined && !el.isSameNode(this.$el)) return false;\n        this.updateElement(el, extraVars);\n      }, el => {\n        el.__x = new Component(el);\n      });\n      this.executeAndClearRemainingShowDirectiveStack();\n      this.executeAndClearNextTickStack(rootEl);\n    }\n\n    executeAndClearNextTickStack(el) {\n      // Skip spawns from alpine directives\n      if (el === this.$el && this.nextTickStack.length > 0) {\n        // We run the tick stack after the next frame to allow any\n        // running transitions to pass the initial show stage.\n        requestAnimationFrame(() => {\n          while (this.nextTickStack.length > 0) {\n            this.nextTickStack.shift()();\n          }\n        });\n      }\n    }\n\n    executeAndClearRemainingShowDirectiveStack() {\n      // The goal here is to start all the x-show transitions\n      // and build a nested promise chain so that elements\n      // only hide when the children are finished hiding.\n      this.showDirectiveStack.reverse().map(handler => {\n        return new Promise((resolve, reject) => {\n          handler(resolve, reject);\n        });\n      }).reduce((promiseChain, promise) => {\n        return promiseChain.then(() => {\n          return promise.then(finishElement => {\n            finishElement();\n          });\n        });\n      }, Promise.resolve(() => {})).catch(e => {\n        if (e !== TRANSITION_CANCELLED) throw e;\n      }); // We've processed the handler stack. let's clear it.\n\n      this.showDirectiveStack = [];\n      this.showDirectiveLastElement = undefined;\n    }\n\n    updateElement(el, extraVars) {\n      this.resolveBoundAttributes(el, false, extraVars);\n    }\n\n    registerListeners(el, extraVars) {\n      getXAttrs(el, this).forEach(({\n        type,\n        value,\n        modifiers,\n        expression\n      }) => {\n        switch (type) {\n          case 'on':\n            registerListener(this, el, value, modifiers, expression, extraVars);\n            break;\n\n          case 'model':\n            registerModelListener(this, el, modifiers, expression, extraVars);\n            break;\n        }\n      });\n    }\n\n    resolveBoundAttributes(el, initialUpdate = false, extraVars) {\n      let attrs = getXAttrs(el, this);\n      attrs.forEach(({\n        type,\n        value,\n        modifiers,\n        expression\n      }) => {\n        switch (type) {\n          case 'model':\n            handleAttributeBindingDirective(this, el, 'value', expression, extraVars, type, modifiers);\n            break;\n\n          case 'bind':\n            // The :key binding on an x-for is special, ignore it.\n            if (el.tagName.toLowerCase() === 'template' && value === 'key') return;\n            handleAttributeBindingDirective(this, el, value, expression, extraVars, type, modifiers);\n            break;\n\n          case 'text':\n            var output = this.evaluateReturnExpression(el, expression, extraVars);\n            handleTextDirective(el, output, expression);\n            break;\n\n          case 'html':\n            handleHtmlDirective(this, el, expression, extraVars);\n            break;\n\n          case 'show':\n            var output = this.evaluateReturnExpression(el, expression, extraVars);\n            handleShowDirective(this, el, output, modifiers, initialUpdate);\n            break;\n\n          case 'if':\n            // If this element also has x-for on it, don't process x-if.\n            // We will let the \"x-for\" directive handle the \"if\"ing.\n            if (attrs.some(i => i.type === 'for')) return;\n            var output = this.evaluateReturnExpression(el, expression, extraVars);\n            handleIfDirective(this, el, output, initialUpdate, extraVars);\n            break;\n\n          case 'for':\n            handleForDirective(this, el, expression, initialUpdate, extraVars);\n            break;\n\n          case 'cloak':\n            el.removeAttribute('x-cloak');\n            break;\n        }\n      });\n    }\n\n    evaluateReturnExpression(el, expression, extraVars = () => {}) {\n      return saferEval(expression, this.$data, _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        $dispatch: this.getDispatchFunction(el)\n      }));\n    }\n\n    evaluateCommandExpression(el, expression, extraVars = () => {}) {\n      return saferEvalNoReturn(expression, this.$data, _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        $dispatch: this.getDispatchFunction(el)\n      }));\n    }\n\n    getDispatchFunction(el) {\n      return (event, detail = {}) => {\n        el.dispatchEvent(new CustomEvent(event, {\n          detail,\n          bubbles: true\n        }));\n      };\n    }\n\n    listenForNewElementsToInitialize() {\n      const targetNode = this.$el;\n      const observerOptions = {\n        childList: true,\n        attributes: true,\n        subtree: true\n      };\n      const observer = new MutationObserver(mutations => {\n        for (let i = 0; i < mutations.length; i++) {\n          // Filter out mutations triggered from child components.\n          const closestParentComponent = mutations[i].target.closest('[x-data]');\n          if (!(closestParentComponent && closestParentComponent.isSameNode(this.$el))) continue;\n\n          if (mutations[i].type === 'attributes' && mutations[i].attributeName === 'x-data') {\n            const rawData = saferEval(mutations[i].target.getAttribute('x-data') || '{}', {\n              $el: this.$el\n            });\n            Object.keys(rawData).forEach(key => {\n              if (this.$data[key] !== rawData[key]) {\n                this.$data[key] = rawData[key];\n              }\n            });\n          }\n\n          if (mutations[i].addedNodes.length > 0) {\n            mutations[i].addedNodes.forEach(node => {\n              if (node.nodeType !== 1 || node.__x_inserted_me) return;\n\n              if (node.matches('[x-data]') && !node.__x) {\n                node.__x = new Component(node);\n                return;\n              }\n\n              this.initializeElements(node);\n            });\n          }\n        }\n      });\n      observer.observe(targetNode, observerOptions);\n    }\n\n    getRefsProxy() {\n      var self = this;\n      var refObj = {};\n      // One of the goals of this is to not hold elements in memory, but rather re-evaluate\n      // the DOM when the system needs something from it. This way, the framework is flexible and\n      // friendly to outside DOM changes from libraries like Vue/Livewire.\n      // For this reason, I'm using an \"on-demand\" proxy to fake a \"$refs\" object.\n\n      return new Proxy(refObj, {\n        get(object, property) {\n          if (property === '$isAlpineProxy') return true;\n          var ref; // We can't just query the DOM because it's hard to filter out refs in\n          // nested components.\n\n          self.walkAndSkipNestedComponents(self.$el, el => {\n            if (el.hasAttribute('x-ref') && el.getAttribute('x-ref') === property) {\n              ref = el;\n            }\n          });\n          return ref;\n        }\n\n      });\n    }\n\n  }\n\n  const Alpine = {\n    version: \"2.7.3\",\n    pauseMutationObserver: false,\n    magicProperties: {},\n    onComponentInitializeds: [],\n    onBeforeComponentInitializeds: [],\n    ignoreFocusedForValueBinding: false,\n    start: async function start() {\n      if (!isTesting()) {\n        await domReady();\n      }\n\n      this.discoverComponents(el => {\n        this.initializeComponent(el);\n      }); // It's easier and more performant to just support Turbolinks than listen\n      // to MutationObserver mutations at the document level.\n\n      document.addEventListener(\"turbolinks:load\", () => {\n        this.discoverUninitializedComponents(el => {\n          this.initializeComponent(el);\n        });\n      });\n      this.listenForNewUninitializedComponentsAtRunTime();\n    },\n    discoverComponents: function discoverComponents(callback) {\n      const rootEls = document.querySelectorAll('[x-data]');\n      rootEls.forEach(rootEl => {\n        callback(rootEl);\n      });\n    },\n    discoverUninitializedComponents: function discoverUninitializedComponents(callback, el = null) {\n      const rootEls = (el || document).querySelectorAll('[x-data]');\n      Array.from(rootEls).filter(el => el.__x === undefined).forEach(rootEl => {\n        callback(rootEl);\n      });\n    },\n    listenForNewUninitializedComponentsAtRunTime: function listenForNewUninitializedComponentsAtRunTime() {\n      const targetNode = document.querySelector('body');\n      const observerOptions = {\n        childList: true,\n        attributes: true,\n        subtree: true\n      };\n      const observer = new MutationObserver(mutations => {\n        if (this.pauseMutationObserver) return;\n\n        for (let i = 0; i < mutations.length; i++) {\n          if (mutations[i].addedNodes.length > 0) {\n            mutations[i].addedNodes.forEach(node => {\n              // Discard non-element nodes (like line-breaks)\n              if (node.nodeType !== 1) return; // Discard any changes happening within an existing component.\n              // They will take care of themselves.\n\n              if (node.parentElement && node.parentElement.closest('[x-data]')) return;\n              this.discoverUninitializedComponents(el => {\n                this.initializeComponent(el);\n              }, node.parentElement);\n            });\n          }\n        }\n      });\n      observer.observe(targetNode, observerOptions);\n    },\n    initializeComponent: function initializeComponent(el) {\n      if (!el.__x) {\n        // Wrap in a try/catch so that we don't prevent other components\n        // from initializing when one component contains an error.\n        try {\n          el.__x = new Component(el);\n        } catch (error) {\n          setTimeout(() => {\n            throw error;\n          }, 0);\n        }\n      }\n    },\n    clone: function clone(component, newEl) {\n      if (!newEl.__x) {\n        newEl.__x = new Component(newEl, component);\n      }\n    },\n    addMagicProperty: function addMagicProperty(name, callback) {\n      this.magicProperties[name] = callback;\n    },\n    onComponentInitialized: function onComponentInitialized(callback) {\n      this.onComponentInitializeds.push(callback);\n    },\n    onBeforeComponentInitialized: function onBeforeComponentInitialized(callback) {\n      this.onBeforeComponentInitializeds.push(callback);\n    }\n  };\n\n  if (!isTesting()) {\n    window.Alpine = Alpine;\n\n    if (window.deferLoadingAlpine) {\n      window.deferLoadingAlpine(function () {\n        window.Alpine.start();\n      });\n    } else {\n      window.Alpine.start();\n    }\n  }\n\n  return Alpine;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/alpinejs/dist/alpine.js\n");

/***/ }),

/***/ "./node_modules/nprogress/nprogress.js":
/*!*********************************************!*\
  !*** ./node_modules/nprogress/nprogress.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress\n * @license MIT */\n\n;(function(root, factory) {\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n\n})(this, function() {\n  var NProgress = {};\n\n  NProgress.version = '0.2.0';\n\n  var Settings = NProgress.settings = {\n    minimum: 0.08,\n    easing: 'ease',\n    positionUsing: '',\n    speed: 200,\n    trickle: true,\n    trickleRate: 0.02,\n    trickleSpeed: 800,\n    showSpinner: true,\n    barSelector: '[role=\"bar\"]',\n    spinnerSelector: '[role=\"spinner\"]',\n    parent: 'body',\n    template: '<div class=\"bar\" role=\"bar\"><div class=\"peg\"></div></div><div class=\"spinner\" role=\"spinner\"><div class=\"spinner-icon\"></div></div>'\n  };\n\n  /**\n   * Updates configuration.\n   *\n   *     NProgress.configure({\n   *       minimum: 0.1\n   *     });\n   */\n  NProgress.configure = function(options) {\n    var key, value;\n    for (key in options) {\n      value = options[key];\n      if (value !== undefined && options.hasOwnProperty(key)) Settings[key] = value;\n    }\n\n    return this;\n  };\n\n  /**\n   * Last number.\n   */\n\n  NProgress.status = null;\n\n  /**\n   * Sets the progress bar status, where `n` is a number from `0.0` to `1.0`.\n   *\n   *     NProgress.set(0.4);\n   *     NProgress.set(1.0);\n   */\n\n  NProgress.set = function(n) {\n    var started = NProgress.isStarted();\n\n    n = clamp(n, Settings.minimum, 1);\n    NProgress.status = (n === 1 ? null : n);\n\n    var progress = NProgress.render(!started),\n        bar      = progress.querySelector(Settings.barSelector),\n        speed    = Settings.speed,\n        ease     = Settings.easing;\n\n    progress.offsetWidth; /* Repaint */\n\n    queue(function(next) {\n      // Set positionUsing if it hasn't already been set\n      if (Settings.positionUsing === '') Settings.positionUsing = NProgress.getPositioningCSS();\n\n      // Add transition\n      css(bar, barPositionCSS(n, speed, ease));\n\n      if (n === 1) {\n        // Fade out\n        css(progress, { \n          transition: 'none', \n          opacity: 1 \n        });\n        progress.offsetWidth; /* Repaint */\n\n        setTimeout(function() {\n          css(progress, { \n            transition: 'all ' + speed + 'ms linear', \n            opacity: 0 \n          });\n          setTimeout(function() {\n            NProgress.remove();\n            next();\n          }, speed);\n        }, speed);\n      } else {\n        setTimeout(next, speed);\n      }\n    });\n\n    return this;\n  };\n\n  NProgress.isStarted = function() {\n    return typeof NProgress.status === 'number';\n  };\n\n  /**\n   * Shows the progress bar.\n   * This is the same as setting the status to 0%, except that it doesn't go backwards.\n   *\n   *     NProgress.start();\n   *\n   */\n  NProgress.start = function() {\n    if (!NProgress.status) NProgress.set(0);\n\n    var work = function() {\n      setTimeout(function() {\n        if (!NProgress.status) return;\n        NProgress.trickle();\n        work();\n      }, Settings.trickleSpeed);\n    };\n\n    if (Settings.trickle) work();\n\n    return this;\n  };\n\n  /**\n   * Hides the progress bar.\n   * This is the *sort of* the same as setting the status to 100%, with the\n   * difference being `done()` makes some placebo effect of some realistic motion.\n   *\n   *     NProgress.done();\n   *\n   * If `true` is passed, it will show the progress bar even if its hidden.\n   *\n   *     NProgress.done(true);\n   */\n\n  NProgress.done = function(force) {\n    if (!force && !NProgress.status) return this;\n\n    return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);\n  };\n\n  /**\n   * Increments by a random amount.\n   */\n\n  NProgress.inc = function(amount) {\n    var n = NProgress.status;\n\n    if (!n) {\n      return NProgress.start();\n    } else {\n      if (typeof amount !== 'number') {\n        amount = (1 - n) * clamp(Math.random() * n, 0.1, 0.95);\n      }\n\n      n = clamp(n + amount, 0, 0.994);\n      return NProgress.set(n);\n    }\n  };\n\n  NProgress.trickle = function() {\n    return NProgress.inc(Math.random() * Settings.trickleRate);\n  };\n\n  /**\n   * Waits for all supplied jQuery promises and\n   * increases the progress as the promises resolve.\n   *\n   * @param $promise jQUery Promise\n   */\n  (function() {\n    var initial = 0, current = 0;\n\n    NProgress.promise = function($promise) {\n      if (!$promise || $promise.state() === \"resolved\") {\n        return this;\n      }\n\n      if (current === 0) {\n        NProgress.start();\n      }\n\n      initial++;\n      current++;\n\n      $promise.always(function() {\n        current--;\n        if (current === 0) {\n            initial = 0;\n            NProgress.done();\n        } else {\n            NProgress.set((initial - current) / initial);\n        }\n      });\n\n      return this;\n    };\n\n  })();\n\n  /**\n   * (Internal) renders the progress bar markup based on the `template`\n   * setting.\n   */\n\n  NProgress.render = function(fromStart) {\n    if (NProgress.isRendered()) return document.getElementById('nprogress');\n\n    addClass(document.documentElement, 'nprogress-busy');\n    \n    var progress = document.createElement('div');\n    progress.id = 'nprogress';\n    progress.innerHTML = Settings.template;\n\n    var bar      = progress.querySelector(Settings.barSelector),\n        perc     = fromStart ? '-100' : toBarPerc(NProgress.status || 0),\n        parent   = document.querySelector(Settings.parent),\n        spinner;\n    \n    css(bar, {\n      transition: 'all 0 linear',\n      transform: 'translate3d(' + perc + '%,0,0)'\n    });\n\n    if (!Settings.showSpinner) {\n      spinner = progress.querySelector(Settings.spinnerSelector);\n      spinner && removeElement(spinner);\n    }\n\n    if (parent != document.body) {\n      addClass(parent, 'nprogress-custom-parent');\n    }\n\n    parent.appendChild(progress);\n    return progress;\n  };\n\n  /**\n   * Removes the element. Opposite of render().\n   */\n\n  NProgress.remove = function() {\n    removeClass(document.documentElement, 'nprogress-busy');\n    removeClass(document.querySelector(Settings.parent), 'nprogress-custom-parent');\n    var progress = document.getElementById('nprogress');\n    progress && removeElement(progress);\n  };\n\n  /**\n   * Checks if the progress bar is rendered.\n   */\n\n  NProgress.isRendered = function() {\n    return !!document.getElementById('nprogress');\n  };\n\n  /**\n   * Determine which positioning CSS rule to use.\n   */\n\n  NProgress.getPositioningCSS = function() {\n    // Sniff on document.body.style\n    var bodyStyle = document.body.style;\n\n    // Sniff prefixes\n    var vendorPrefix = ('WebkitTransform' in bodyStyle) ? 'Webkit' :\n                       ('MozTransform' in bodyStyle) ? 'Moz' :\n                       ('msTransform' in bodyStyle) ? 'ms' :\n                       ('OTransform' in bodyStyle) ? 'O' : '';\n\n    if (vendorPrefix + 'Perspective' in bodyStyle) {\n      // Modern browsers with 3D support, e.g. Webkit, IE10\n      return 'translate3d';\n    } else if (vendorPrefix + 'Transform' in bodyStyle) {\n      // Browsers without 3D support, e.g. IE9\n      return 'translate';\n    } else {\n      // Browsers without translate() support, e.g. IE7-8\n      return 'margin';\n    }\n  };\n\n  /**\n   * Helpers\n   */\n\n  function clamp(n, min, max) {\n    if (n < min) return min;\n    if (n > max) return max;\n    return n;\n  }\n\n  /**\n   * (Internal) converts a percentage (`0..1`) to a bar translateX\n   * percentage (`-100%..0%`).\n   */\n\n  function toBarPerc(n) {\n    return (-1 + n) * 100;\n  }\n\n\n  /**\n   * (Internal) returns the correct CSS for changing the bar's\n   * position given an n percentage, and speed and ease from Settings\n   */\n\n  function barPositionCSS(n, speed, ease) {\n    var barCSS;\n\n    if (Settings.positionUsing === 'translate3d') {\n      barCSS = { transform: 'translate3d('+toBarPerc(n)+'%,0,0)' };\n    } else if (Settings.positionUsing === 'translate') {\n      barCSS = { transform: 'translate('+toBarPerc(n)+'%,0)' };\n    } else {\n      barCSS = { 'margin-left': toBarPerc(n)+'%' };\n    }\n\n    barCSS.transition = 'all '+speed+'ms '+ease;\n\n    return barCSS;\n  }\n\n  /**\n   * (Internal) Queues a function to be executed.\n   */\n\n  var queue = (function() {\n    var pending = [];\n    \n    function next() {\n      var fn = pending.shift();\n      if (fn) {\n        fn(next);\n      }\n    }\n\n    return function(fn) {\n      pending.push(fn);\n      if (pending.length == 1) next();\n    };\n  })();\n\n  /**\n   * (Internal) Applies css properties to an element, similar to the jQuery \n   * css method.\n   *\n   * While this helper does assist with vendor prefixed property names, it \n   * does not perform any manipulation of values prior to setting styles.\n   */\n\n  var css = (function() {\n    var cssPrefixes = [ 'Webkit', 'O', 'Moz', 'ms' ],\n        cssProps    = {};\n\n    function camelCase(string) {\n      return string.replace(/^-ms-/, 'ms-').replace(/-([\\da-z])/gi, function(match, letter) {\n        return letter.toUpperCase();\n      });\n    }\n\n    function getVendorProp(name) {\n      var style = document.body.style;\n      if (name in style) return name;\n\n      var i = cssPrefixes.length,\n          capName = name.charAt(0).toUpperCase() + name.slice(1),\n          vendorName;\n      while (i--) {\n        vendorName = cssPrefixes[i] + capName;\n        if (vendorName in style) return vendorName;\n      }\n\n      return name;\n    }\n\n    function getStyleProp(name) {\n      name = camelCase(name);\n      return cssProps[name] || (cssProps[name] = getVendorProp(name));\n    }\n\n    function applyCss(element, prop, value) {\n      prop = getStyleProp(prop);\n      element.style[prop] = value;\n    }\n\n    return function(element, properties) {\n      var args = arguments,\n          prop, \n          value;\n\n      if (args.length == 2) {\n        for (prop in properties) {\n          value = properties[prop];\n          if (value !== undefined && properties.hasOwnProperty(prop)) applyCss(element, prop, value);\n        }\n      } else {\n        applyCss(element, args[1], args[2]);\n      }\n    }\n  })();\n\n  /**\n   * (Internal) Determines if an element or space separated list of class names contains a class name.\n   */\n\n  function hasClass(element, name) {\n    var list = typeof element == 'string' ? element : classList(element);\n    return list.indexOf(' ' + name + ' ') >= 0;\n  }\n\n  /**\n   * (Internal) Adds a class to an element.\n   */\n\n  function addClass(element, name) {\n    var oldList = classList(element),\n        newList = oldList + name;\n\n    if (hasClass(oldList, name)) return; \n\n    // Trim the opening space.\n    element.className = newList.substring(1);\n  }\n\n  /**\n   * (Internal) Removes a class from an element.\n   */\n\n  function removeClass(element, name) {\n    var oldList = classList(element),\n        newList;\n\n    if (!hasClass(element, name)) return;\n\n    // Replace the class name.\n    newList = oldList.replace(' ' + name + ' ', ' ');\n\n    // Trim the opening and closing spaces.\n    element.className = newList.substring(1, newList.length - 1);\n  }\n\n  /**\n   * (Internal) Gets a space separated list of the class names on the element. \n   * The list is wrapped with a single space on each end to facilitate finding \n   * matches within the list.\n   */\n\n  function classList(element) {\n    return (' ' + (element.className || '') + ' ').replace(/\\s+/gi, ' ');\n  }\n\n  /**\n   * (Internal) Removes an element from the DOM.\n   */\n\n  function removeElement(element) {\n    element && element.parentNode && element.parentNode.removeChild(element);\n  }\n\n  return NProgress;\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbnByb2dyZXNzL25wcm9ncmVzcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ucHJvZ3Jlc3MvbnByb2dyZXNzLmpzPzMyM2UiXSwic291cmNlc0NvbnRlbnQiOlsiLyogTlByb2dyZXNzLCAoYykgMjAxMywgMjAxNCBSaWNvIFN0YS4gQ3J1eiAtIGh0dHA6Ly9yaWNvc3RhY3J1ei5jb20vbnByb2dyZXNzXG4gKiBAbGljZW5zZSBNSVQgKi9cblxuOyhmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICByb290Lk5Qcm9ncmVzcyA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbiAgdmFyIE5Qcm9ncmVzcyA9IHt9O1xuXG4gIE5Qcm9ncmVzcy52ZXJzaW9uID0gJzAuMi4wJztcblxuICB2YXIgU2V0dGluZ3MgPSBOUHJvZ3Jlc3Muc2V0dGluZ3MgPSB7XG4gICAgbWluaW11bTogMC4wOCxcbiAgICBlYXNpbmc6ICdlYXNlJyxcbiAgICBwb3NpdGlvblVzaW5nOiAnJyxcbiAgICBzcGVlZDogMjAwLFxuICAgIHRyaWNrbGU6IHRydWUsXG4gICAgdHJpY2tsZVJhdGU6IDAuMDIsXG4gICAgdHJpY2tsZVNwZWVkOiA4MDAsXG4gICAgc2hvd1NwaW5uZXI6IHRydWUsXG4gICAgYmFyU2VsZWN0b3I6ICdbcm9sZT1cImJhclwiXScsXG4gICAgc3Bpbm5lclNlbGVjdG9yOiAnW3JvbGU9XCJzcGlubmVyXCJdJyxcbiAgICBwYXJlbnQ6ICdib2R5JyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJiYXJcIiByb2xlPVwiYmFyXCI+PGRpdiBjbGFzcz1cInBlZ1wiPjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJzcGlubmVyXCIgcm9sZT1cInNwaW5uZXJcIj48ZGl2IGNsYXNzPVwic3Bpbm5lci1pY29uXCI+PC9kaXY+PC9kaXY+J1xuICB9O1xuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGNvbmZpZ3VyYXRpb24uXG4gICAqXG4gICAqICAgICBOUHJvZ3Jlc3MuY29uZmlndXJlKHtcbiAgICogICAgICAgbWluaW11bTogMC4xXG4gICAqICAgICB9KTtcbiAgICovXG4gIE5Qcm9ncmVzcy5jb25maWd1cmUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGtleSwgdmFsdWU7XG4gICAgZm9yIChrZXkgaW4gb3B0aW9ucykge1xuICAgICAgdmFsdWUgPSBvcHRpb25zW2tleV07XG4gICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLmhhc093blByb3BlcnR5KGtleSkpIFNldHRpbmdzW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogTGFzdCBudW1iZXIuXG4gICAqL1xuXG4gIE5Qcm9ncmVzcy5zdGF0dXMgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwcm9ncmVzcyBiYXIgc3RhdHVzLCB3aGVyZSBgbmAgaXMgYSBudW1iZXIgZnJvbSBgMC4wYCB0byBgMS4wYC5cbiAgICpcbiAgICogICAgIE5Qcm9ncmVzcy5zZXQoMC40KTtcbiAgICogICAgIE5Qcm9ncmVzcy5zZXQoMS4wKTtcbiAgICovXG5cbiAgTlByb2dyZXNzLnNldCA9IGZ1bmN0aW9uKG4pIHtcbiAgICB2YXIgc3RhcnRlZCA9IE5Qcm9ncmVzcy5pc1N0YXJ0ZWQoKTtcblxuICAgIG4gPSBjbGFtcChuLCBTZXR0aW5ncy5taW5pbXVtLCAxKTtcbiAgICBOUHJvZ3Jlc3Muc3RhdHVzID0gKG4gPT09IDEgPyBudWxsIDogbik7XG5cbiAgICB2YXIgcHJvZ3Jlc3MgPSBOUHJvZ3Jlc3MucmVuZGVyKCFzdGFydGVkKSxcbiAgICAgICAgYmFyICAgICAgPSBwcm9ncmVzcy5xdWVyeVNlbGVjdG9yKFNldHRpbmdzLmJhclNlbGVjdG9yKSxcbiAgICAgICAgc3BlZWQgICAgPSBTZXR0aW5ncy5zcGVlZCxcbiAgICAgICAgZWFzZSAgICAgPSBTZXR0aW5ncy5lYXNpbmc7XG5cbiAgICBwcm9ncmVzcy5vZmZzZXRXaWR0aDsgLyogUmVwYWludCAqL1xuXG4gICAgcXVldWUoZnVuY3Rpb24obmV4dCkge1xuICAgICAgLy8gU2V0IHBvc2l0aW9uVXNpbmcgaWYgaXQgaGFzbid0IGFscmVhZHkgYmVlbiBzZXRcbiAgICAgIGlmIChTZXR0aW5ncy5wb3NpdGlvblVzaW5nID09PSAnJykgU2V0dGluZ3MucG9zaXRpb25Vc2luZyA9IE5Qcm9ncmVzcy5nZXRQb3NpdGlvbmluZ0NTUygpO1xuXG4gICAgICAvLyBBZGQgdHJhbnNpdGlvblxuICAgICAgY3NzKGJhciwgYmFyUG9zaXRpb25DU1Mobiwgc3BlZWQsIGVhc2UpKTtcblxuICAgICAgaWYgKG4gPT09IDEpIHtcbiAgICAgICAgLy8gRmFkZSBvdXRcbiAgICAgICAgY3NzKHByb2dyZXNzLCB7IFxuICAgICAgICAgIHRyYW5zaXRpb246ICdub25lJywgXG4gICAgICAgICAgb3BhY2l0eTogMSBcbiAgICAgICAgfSk7XG4gICAgICAgIHByb2dyZXNzLm9mZnNldFdpZHRoOyAvKiBSZXBhaW50ICovXG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBjc3MocHJvZ3Jlc3MsIHsgXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAnYWxsICcgKyBzcGVlZCArICdtcyBsaW5lYXInLCBcbiAgICAgICAgICAgIG9wYWNpdHk6IDAgXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIE5Qcm9ncmVzcy5yZW1vdmUoKTtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICB9LCBzcGVlZCk7XG4gICAgICAgIH0sIHNwZWVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFRpbWVvdXQobmV4dCwgc3BlZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgTlByb2dyZXNzLmlzU3RhcnRlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0eXBlb2YgTlByb2dyZXNzLnN0YXR1cyA9PT0gJ251bWJlcic7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNob3dzIHRoZSBwcm9ncmVzcyBiYXIuXG4gICAqIFRoaXMgaXMgdGhlIHNhbWUgYXMgc2V0dGluZyB0aGUgc3RhdHVzIHRvIDAlLCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGdvIGJhY2t3YXJkcy5cbiAgICpcbiAgICogICAgIE5Qcm9ncmVzcy5zdGFydCgpO1xuICAgKlxuICAgKi9cbiAgTlByb2dyZXNzLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFOUHJvZ3Jlc3Muc3RhdHVzKSBOUHJvZ3Jlc3Muc2V0KDApO1xuXG4gICAgdmFyIHdvcmsgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghTlByb2dyZXNzLnN0YXR1cykgcmV0dXJuO1xuICAgICAgICBOUHJvZ3Jlc3MudHJpY2tsZSgpO1xuICAgICAgICB3b3JrKCk7XG4gICAgICB9LCBTZXR0aW5ncy50cmlja2xlU3BlZWQpO1xuICAgIH07XG5cbiAgICBpZiAoU2V0dGluZ3MudHJpY2tsZSkgd29yaygpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEhpZGVzIHRoZSBwcm9ncmVzcyBiYXIuXG4gICAqIFRoaXMgaXMgdGhlICpzb3J0IG9mKiB0aGUgc2FtZSBhcyBzZXR0aW5nIHRoZSBzdGF0dXMgdG8gMTAwJSwgd2l0aCB0aGVcbiAgICogZGlmZmVyZW5jZSBiZWluZyBgZG9uZSgpYCBtYWtlcyBzb21lIHBsYWNlYm8gZWZmZWN0IG9mIHNvbWUgcmVhbGlzdGljIG1vdGlvbi5cbiAgICpcbiAgICogICAgIE5Qcm9ncmVzcy5kb25lKCk7XG4gICAqXG4gICAqIElmIGB0cnVlYCBpcyBwYXNzZWQsIGl0IHdpbGwgc2hvdyB0aGUgcHJvZ3Jlc3MgYmFyIGV2ZW4gaWYgaXRzIGhpZGRlbi5cbiAgICpcbiAgICogICAgIE5Qcm9ncmVzcy5kb25lKHRydWUpO1xuICAgKi9cblxuICBOUHJvZ3Jlc3MuZG9uZSA9IGZ1bmN0aW9uKGZvcmNlKSB7XG4gICAgaWYgKCFmb3JjZSAmJiAhTlByb2dyZXNzLnN0YXR1cykgcmV0dXJuIHRoaXM7XG5cbiAgICByZXR1cm4gTlByb2dyZXNzLmluYygwLjMgKyAwLjUgKiBNYXRoLnJhbmRvbSgpKS5zZXQoMSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEluY3JlbWVudHMgYnkgYSByYW5kb20gYW1vdW50LlxuICAgKi9cblxuICBOUHJvZ3Jlc3MuaW5jID0gZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgdmFyIG4gPSBOUHJvZ3Jlc3Muc3RhdHVzO1xuXG4gICAgaWYgKCFuKSB7XG4gICAgICByZXR1cm4gTlByb2dyZXNzLnN0YXJ0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgYW1vdW50ICE9PSAnbnVtYmVyJykge1xuICAgICAgICBhbW91bnQgPSAoMSAtIG4pICogY2xhbXAoTWF0aC5yYW5kb20oKSAqIG4sIDAuMSwgMC45NSk7XG4gICAgICB9XG5cbiAgICAgIG4gPSBjbGFtcChuICsgYW1vdW50LCAwLCAwLjk5NCk7XG4gICAgICByZXR1cm4gTlByb2dyZXNzLnNldChuKTtcbiAgICB9XG4gIH07XG5cbiAgTlByb2dyZXNzLnRyaWNrbGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gTlByb2dyZXNzLmluYyhNYXRoLnJhbmRvbSgpICogU2V0dGluZ3MudHJpY2tsZVJhdGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBXYWl0cyBmb3IgYWxsIHN1cHBsaWVkIGpRdWVyeSBwcm9taXNlcyBhbmRcbiAgICogaW5jcmVhc2VzIHRoZSBwcm9ncmVzcyBhcyB0aGUgcHJvbWlzZXMgcmVzb2x2ZS5cbiAgICpcbiAgICogQHBhcmFtICRwcm9taXNlIGpRVWVyeSBQcm9taXNlXG4gICAqL1xuICAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluaXRpYWwgPSAwLCBjdXJyZW50ID0gMDtcblxuICAgIE5Qcm9ncmVzcy5wcm9taXNlID0gZnVuY3Rpb24oJHByb21pc2UpIHtcbiAgICAgIGlmICghJHByb21pc2UgfHwgJHByb21pc2Uuc3RhdGUoKSA9PT0gXCJyZXNvbHZlZFwiKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudCA9PT0gMCkge1xuICAgICAgICBOUHJvZ3Jlc3Muc3RhcnQoKTtcbiAgICAgIH1cblxuICAgICAgaW5pdGlhbCsrO1xuICAgICAgY3VycmVudCsrO1xuXG4gICAgICAkcHJvbWlzZS5hbHdheXMoZnVuY3Rpb24oKSB7XG4gICAgICAgIGN1cnJlbnQtLTtcbiAgICAgICAgaWYgKGN1cnJlbnQgPT09IDApIHtcbiAgICAgICAgICAgIGluaXRpYWwgPSAwO1xuICAgICAgICAgICAgTlByb2dyZXNzLmRvbmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE5Qcm9ncmVzcy5zZXQoKGluaXRpYWwgLSBjdXJyZW50KSAvIGluaXRpYWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICB9KSgpO1xuXG4gIC8qKlxuICAgKiAoSW50ZXJuYWwpIHJlbmRlcnMgdGhlIHByb2dyZXNzIGJhciBtYXJrdXAgYmFzZWQgb24gdGhlIGB0ZW1wbGF0ZWBcbiAgICogc2V0dGluZy5cbiAgICovXG5cbiAgTlByb2dyZXNzLnJlbmRlciA9IGZ1bmN0aW9uKGZyb21TdGFydCkge1xuICAgIGlmIChOUHJvZ3Jlc3MuaXNSZW5kZXJlZCgpKSByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25wcm9ncmVzcycpO1xuXG4gICAgYWRkQ2xhc3MoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnbnByb2dyZXNzLWJ1c3knKTtcbiAgICBcbiAgICB2YXIgcHJvZ3Jlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBwcm9ncmVzcy5pZCA9ICducHJvZ3Jlc3MnO1xuICAgIHByb2dyZXNzLmlubmVySFRNTCA9IFNldHRpbmdzLnRlbXBsYXRlO1xuXG4gICAgdmFyIGJhciAgICAgID0gcHJvZ3Jlc3MucXVlcnlTZWxlY3RvcihTZXR0aW5ncy5iYXJTZWxlY3RvciksXG4gICAgICAgIHBlcmMgICAgID0gZnJvbVN0YXJ0ID8gJy0xMDAnIDogdG9CYXJQZXJjKE5Qcm9ncmVzcy5zdGF0dXMgfHwgMCksXG4gICAgICAgIHBhcmVudCAgID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTZXR0aW5ncy5wYXJlbnQpLFxuICAgICAgICBzcGlubmVyO1xuICAgIFxuICAgIGNzcyhiYXIsIHtcbiAgICAgIHRyYW5zaXRpb246ICdhbGwgMCBsaW5lYXInLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoJyArIHBlcmMgKyAnJSwwLDApJ1xuICAgIH0pO1xuXG4gICAgaWYgKCFTZXR0aW5ncy5zaG93U3Bpbm5lcikge1xuICAgICAgc3Bpbm5lciA9IHByb2dyZXNzLnF1ZXJ5U2VsZWN0b3IoU2V0dGluZ3Muc3Bpbm5lclNlbGVjdG9yKTtcbiAgICAgIHNwaW5uZXIgJiYgcmVtb3ZlRWxlbWVudChzcGlubmVyKTtcbiAgICB9XG5cbiAgICBpZiAocGFyZW50ICE9IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgIGFkZENsYXNzKHBhcmVudCwgJ25wcm9ncmVzcy1jdXN0b20tcGFyZW50Jyk7XG4gICAgfVxuXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKHByb2dyZXNzKTtcbiAgICByZXR1cm4gcHJvZ3Jlc3M7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGVsZW1lbnQuIE9wcG9zaXRlIG9mIHJlbmRlcigpLlxuICAgKi9cblxuICBOUHJvZ3Jlc3MucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gICAgcmVtb3ZlQ2xhc3MoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnbnByb2dyZXNzLWJ1c3knKTtcbiAgICByZW1vdmVDbGFzcyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNldHRpbmdzLnBhcmVudCksICducHJvZ3Jlc3MtY3VzdG9tLXBhcmVudCcpO1xuICAgIHZhciBwcm9ncmVzcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCducHJvZ3Jlc3MnKTtcbiAgICBwcm9ncmVzcyAmJiByZW1vdmVFbGVtZW50KHByb2dyZXNzKTtcbiAgfTtcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBwcm9ncmVzcyBiYXIgaXMgcmVuZGVyZWQuXG4gICAqL1xuXG4gIE5Qcm9ncmVzcy5pc1JlbmRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICEhZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25wcm9ncmVzcycpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgd2hpY2ggcG9zaXRpb25pbmcgQ1NTIHJ1bGUgdG8gdXNlLlxuICAgKi9cblxuICBOUHJvZ3Jlc3MuZ2V0UG9zaXRpb25pbmdDU1MgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBTbmlmZiBvbiBkb2N1bWVudC5ib2R5LnN0eWxlXG4gICAgdmFyIGJvZHlTdHlsZSA9IGRvY3VtZW50LmJvZHkuc3R5bGU7XG5cbiAgICAvLyBTbmlmZiBwcmVmaXhlc1xuICAgIHZhciB2ZW5kb3JQcmVmaXggPSAoJ1dlYmtpdFRyYW5zZm9ybScgaW4gYm9keVN0eWxlKSA/ICdXZWJraXQnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgKCdNb3pUcmFuc2Zvcm0nIGluIGJvZHlTdHlsZSkgPyAnTW96JyA6XG4gICAgICAgICAgICAgICAgICAgICAgICgnbXNUcmFuc2Zvcm0nIGluIGJvZHlTdHlsZSkgPyAnbXMnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgKCdPVHJhbnNmb3JtJyBpbiBib2R5U3R5bGUpID8gJ08nIDogJyc7XG5cbiAgICBpZiAodmVuZG9yUHJlZml4ICsgJ1BlcnNwZWN0aXZlJyBpbiBib2R5U3R5bGUpIHtcbiAgICAgIC8vIE1vZGVybiBicm93c2VycyB3aXRoIDNEIHN1cHBvcnQsIGUuZy4gV2Via2l0LCBJRTEwXG4gICAgICByZXR1cm4gJ3RyYW5zbGF0ZTNkJztcbiAgICB9IGVsc2UgaWYgKHZlbmRvclByZWZpeCArICdUcmFuc2Zvcm0nIGluIGJvZHlTdHlsZSkge1xuICAgICAgLy8gQnJvd3NlcnMgd2l0aG91dCAzRCBzdXBwb3J0LCBlLmcuIElFOVxuICAgICAgcmV0dXJuICd0cmFuc2xhdGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBCcm93c2VycyB3aXRob3V0IHRyYW5zbGF0ZSgpIHN1cHBvcnQsIGUuZy4gSUU3LThcbiAgICAgIHJldHVybiAnbWFyZ2luJztcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEhlbHBlcnNcbiAgICovXG5cbiAgZnVuY3Rpb24gY2xhbXAobiwgbWluLCBtYXgpIHtcbiAgICBpZiAobiA8IG1pbikgcmV0dXJuIG1pbjtcbiAgICBpZiAobiA+IG1heCkgcmV0dXJuIG1heDtcbiAgICByZXR1cm4gbjtcbiAgfVxuXG4gIC8qKlxuICAgKiAoSW50ZXJuYWwpIGNvbnZlcnRzIGEgcGVyY2VudGFnZSAoYDAuLjFgKSB0byBhIGJhciB0cmFuc2xhdGVYXG4gICAqIHBlcmNlbnRhZ2UgKGAtMTAwJS4uMCVgKS5cbiAgICovXG5cbiAgZnVuY3Rpb24gdG9CYXJQZXJjKG4pIHtcbiAgICByZXR1cm4gKC0xICsgbikgKiAxMDA7XG4gIH1cblxuXG4gIC8qKlxuICAgKiAoSW50ZXJuYWwpIHJldHVybnMgdGhlIGNvcnJlY3QgQ1NTIGZvciBjaGFuZ2luZyB0aGUgYmFyJ3NcbiAgICogcG9zaXRpb24gZ2l2ZW4gYW4gbiBwZXJjZW50YWdlLCBhbmQgc3BlZWQgYW5kIGVhc2UgZnJvbSBTZXR0aW5nc1xuICAgKi9cblxuICBmdW5jdGlvbiBiYXJQb3NpdGlvbkNTUyhuLCBzcGVlZCwgZWFzZSkge1xuICAgIHZhciBiYXJDU1M7XG5cbiAgICBpZiAoU2V0dGluZ3MucG9zaXRpb25Vc2luZyA9PT0gJ3RyYW5zbGF0ZTNkJykge1xuICAgICAgYmFyQ1NTID0geyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgnK3RvQmFyUGVyYyhuKSsnJSwwLDApJyB9O1xuICAgIH0gZWxzZSBpZiAoU2V0dGluZ3MucG9zaXRpb25Vc2luZyA9PT0gJ3RyYW5zbGF0ZScpIHtcbiAgICAgIGJhckNTUyA9IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlKCcrdG9CYXJQZXJjKG4pKyclLDApJyB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBiYXJDU1MgPSB7ICdtYXJnaW4tbGVmdCc6IHRvQmFyUGVyYyhuKSsnJScgfTtcbiAgICB9XG5cbiAgICBiYXJDU1MudHJhbnNpdGlvbiA9ICdhbGwgJytzcGVlZCsnbXMgJytlYXNlO1xuXG4gICAgcmV0dXJuIGJhckNTUztcbiAgfVxuXG4gIC8qKlxuICAgKiAoSW50ZXJuYWwpIFF1ZXVlcyBhIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgKi9cblxuICB2YXIgcXVldWUgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBlbmRpbmcgPSBbXTtcbiAgICBcbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgdmFyIGZuID0gcGVuZGluZy5zaGlmdCgpO1xuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIGZuKG5leHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbihmbikge1xuICAgICAgcGVuZGluZy5wdXNoKGZuKTtcbiAgICAgIGlmIChwZW5kaW5nLmxlbmd0aCA9PSAxKSBuZXh0KCk7XG4gICAgfTtcbiAgfSkoKTtcblxuICAvKipcbiAgICogKEludGVybmFsKSBBcHBsaWVzIGNzcyBwcm9wZXJ0aWVzIHRvIGFuIGVsZW1lbnQsIHNpbWlsYXIgdG8gdGhlIGpRdWVyeSBcbiAgICogY3NzIG1ldGhvZC5cbiAgICpcbiAgICogV2hpbGUgdGhpcyBoZWxwZXIgZG9lcyBhc3Npc3Qgd2l0aCB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkgbmFtZXMsIGl0IFxuICAgKiBkb2VzIG5vdCBwZXJmb3JtIGFueSBtYW5pcHVsYXRpb24gb2YgdmFsdWVzIHByaW9yIHRvIHNldHRpbmcgc3R5bGVzLlxuICAgKi9cblxuICB2YXIgY3NzID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciBjc3NQcmVmaXhlcyA9IFsgJ1dlYmtpdCcsICdPJywgJ01veicsICdtcycgXSxcbiAgICAgICAgY3NzUHJvcHMgICAgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGNhbWVsQ2FzZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXi1tcy0vLCAnbXMtJykucmVwbGFjZSgvLShbXFxkYS16XSkvZ2ksIGZ1bmN0aW9uKG1hdGNoLCBsZXR0ZXIpIHtcbiAgICAgICAgcmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VmVuZG9yUHJvcChuYW1lKSB7XG4gICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5ib2R5LnN0eWxlO1xuICAgICAgaWYgKG5hbWUgaW4gc3R5bGUpIHJldHVybiBuYW1lO1xuXG4gICAgICB2YXIgaSA9IGNzc1ByZWZpeGVzLmxlbmd0aCxcbiAgICAgICAgICBjYXBOYW1lID0gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSksXG4gICAgICAgICAgdmVuZG9yTmFtZTtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdmVuZG9yTmFtZSA9IGNzc1ByZWZpeGVzW2ldICsgY2FwTmFtZTtcbiAgICAgICAgaWYgKHZlbmRvck5hbWUgaW4gc3R5bGUpIHJldHVybiB2ZW5kb3JOYW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTdHlsZVByb3AobmFtZSkge1xuICAgICAgbmFtZSA9IGNhbWVsQ2FzZShuYW1lKTtcbiAgICAgIHJldHVybiBjc3NQcm9wc1tuYW1lXSB8fCAoY3NzUHJvcHNbbmFtZV0gPSBnZXRWZW5kb3JQcm9wKG5hbWUpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseUNzcyhlbGVtZW50LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgcHJvcCA9IGdldFN0eWxlUHJvcChwcm9wKTtcbiAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCwgcHJvcGVydGllcykge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgcHJvcCwgXG4gICAgICAgICAgdmFsdWU7XG5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PSAyKSB7XG4gICAgICAgIGZvciAocHJvcCBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgdmFsdWUgPSBwcm9wZXJ0aWVzW3Byb3BdO1xuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcCkpIGFwcGx5Q3NzKGVsZW1lbnQsIHByb3AsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwbHlDc3MoZWxlbWVudCwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICB9XG4gICAgfVxuICB9KSgpO1xuXG4gIC8qKlxuICAgKiAoSW50ZXJuYWwpIERldGVybWluZXMgaWYgYW4gZWxlbWVudCBvciBzcGFjZSBzZXBhcmF0ZWQgbGlzdCBvZiBjbGFzcyBuYW1lcyBjb250YWlucyBhIGNsYXNzIG5hbWUuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGhhc0NsYXNzKGVsZW1lbnQsIG5hbWUpIHtcbiAgICB2YXIgbGlzdCA9IHR5cGVvZiBlbGVtZW50ID09ICdzdHJpbmcnID8gZWxlbWVudCA6IGNsYXNzTGlzdChlbGVtZW50KTtcbiAgICByZXR1cm4gbGlzdC5pbmRleE9mKCcgJyArIG5hbWUgKyAnICcpID49IDA7XG4gIH1cblxuICAvKipcbiAgICogKEludGVybmFsKSBBZGRzIGEgY2xhc3MgdG8gYW4gZWxlbWVudC5cbiAgICovXG5cbiAgZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCwgbmFtZSkge1xuICAgIHZhciBvbGRMaXN0ID0gY2xhc3NMaXN0KGVsZW1lbnQpLFxuICAgICAgICBuZXdMaXN0ID0gb2xkTGlzdCArIG5hbWU7XG5cbiAgICBpZiAoaGFzQ2xhc3Mob2xkTGlzdCwgbmFtZSkpIHJldHVybjsgXG5cbiAgICAvLyBUcmltIHRoZSBvcGVuaW5nIHNwYWNlLlxuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gbmV3TGlzdC5zdWJzdHJpbmcoMSk7XG4gIH1cblxuICAvKipcbiAgICogKEludGVybmFsKSBSZW1vdmVzIGEgY2xhc3MgZnJvbSBhbiBlbGVtZW50LlxuICAgKi9cblxuICBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBuYW1lKSB7XG4gICAgdmFyIG9sZExpc3QgPSBjbGFzc0xpc3QoZWxlbWVudCksXG4gICAgICAgIG5ld0xpc3Q7XG5cbiAgICBpZiAoIWhhc0NsYXNzKGVsZW1lbnQsIG5hbWUpKSByZXR1cm47XG5cbiAgICAvLyBSZXBsYWNlIHRoZSBjbGFzcyBuYW1lLlxuICAgIG5ld0xpc3QgPSBvbGRMaXN0LnJlcGxhY2UoJyAnICsgbmFtZSArICcgJywgJyAnKTtcblxuICAgIC8vIFRyaW0gdGhlIG9wZW5pbmcgYW5kIGNsb3Npbmcgc3BhY2VzLlxuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gbmV3TGlzdC5zdWJzdHJpbmcoMSwgbmV3TGlzdC5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAoSW50ZXJuYWwpIEdldHMgYSBzcGFjZSBzZXBhcmF0ZWQgbGlzdCBvZiB0aGUgY2xhc3MgbmFtZXMgb24gdGhlIGVsZW1lbnQuIFxuICAgKiBUaGUgbGlzdCBpcyB3cmFwcGVkIHdpdGggYSBzaW5nbGUgc3BhY2Ugb24gZWFjaCBlbmQgdG8gZmFjaWxpdGF0ZSBmaW5kaW5nIFxuICAgKiBtYXRjaGVzIHdpdGhpbiB0aGUgbGlzdC5cbiAgICovXG5cbiAgZnVuY3Rpb24gY2xhc3NMaXN0KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gKCcgJyArIChlbGVtZW50LmNsYXNzTmFtZSB8fCAnJykgKyAnICcpLnJlcGxhY2UoL1xccysvZ2ksICcgJyk7XG4gIH1cblxuICAvKipcbiAgICogKEludGVybmFsKSBSZW1vdmVzIGFuIGVsZW1lbnQgZnJvbSB0aGUgRE9NLlxuICAgKi9cblxuICBmdW5jdGlvbiByZW1vdmVFbGVtZW50KGVsZW1lbnQpIHtcbiAgICBlbGVtZW50ICYmIGVsZW1lbnQucGFyZW50Tm9kZSAmJiBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gTlByb2dyZXNzO1xufSk7XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBLFdBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/nprogress/nprogress.js\n");

/***/ }),

/***/ "./node_modules/phoenix/priv/static/phoenix.js":
/*!*****************************************************!*\
  !*** ./node_modules/phoenix/priv/static/phoenix.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,t){ true?module.exports=t():undefined}(this,(function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=0)}([function(e,t,n){(function(t){e.exports=t.Phoenix=n(2)}).call(this,n(1))},function(e,t){var n;n=function(){return this}();try{n=n||new Function(\"return this\")()}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n},function(e,t,n){\"use strict\";function i(e){return function(e){if(Array.isArray(e))return a(e)}(e)||function(e){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||s(e)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function o(e){return(o=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(\"undefined\"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=e[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);i=!0);}catch(e){o=!0,r=e}finally{try{i||null==a.return||a.return()}finally{if(o)throw r}}return n}(e,t)||s(e,t)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function s(e,t){if(e){if(\"string\"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(n):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?a(e,t):void 0}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function c(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function u(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function h(e,t,n){return t&&u(e.prototype,t),n&&u(e,n),e}n.r(t),n.d(t,\"Channel\",(function(){return _})),n.d(t,\"Serializer\",(function(){return H})),n.d(t,\"Socket\",(function(){return U})),n.d(t,\"LongPoll\",(function(){return D})),n.d(t,\"Ajax\",(function(){return M})),n.d(t,\"Presence\",(function(){return N}));var l=\"undefined\"!=typeof self?self:null,f=\"undefined\"!=typeof window?window:null,d=l||f||void 0,p=0,v=1,y=2,m=3,g=\"closed\",k=\"errored\",b=\"joined\",j=\"joining\",C=\"leaving\",E=\"phx_close\",R=\"phx_error\",T=\"phx_join\",S=\"phx_reply\",w=\"phx_leave\",A=[E,R,T,S,w],L=\"longpoll\",x=\"websocket\",O=function(e){if(\"function\"==typeof e)return e;return function(){return e}},P=function(){function e(t,n,i,o){c(this,e),this.channel=t,this.event=n,this.payload=i||function(){return{}},this.receivedResp=null,this.timeout=o,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}return h(e,[{key:\"resend\",value:function(e){this.timeout=e,this.reset(),this.send()}},{key:\"send\",value:function(){this.hasReceived(\"timeout\")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}},{key:\"receive\",value:function(e,t){return this.hasReceived(e)&&t(this.receivedResp.response),this.recHooks.push({status:e,callback:t}),this}},{key:\"reset\",value:function(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}},{key:\"matchReceive\",value:function(e){var t=e.status,n=e.response;e.ref;this.recHooks.filter((function(e){return e.status===t})).forEach((function(e){return e.callback(n)}))}},{key:\"cancelRefEvent\",value:function(){this.refEvent&&this.channel.off(this.refEvent)}},{key:\"cancelTimeout\",value:function(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}},{key:\"startTimeout\",value:function(){var e=this;this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,(function(t){e.cancelRefEvent(),e.cancelTimeout(),e.receivedResp=t,e.matchReceive(t)})),this.timeoutTimer=setTimeout((function(){e.trigger(\"timeout\",{})}),this.timeout)}},{key:\"hasReceived\",value:function(e){return this.receivedResp&&this.receivedResp.status===e}},{key:\"trigger\",value:function(e,t){this.channel.trigger(this.refEvent,{status:e,response:t})}}]),e}(),_=function(){function e(t,n,i){var o=this;c(this,e),this.state=g,this.topic=t,this.params=O(n||{}),this.socket=i,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new P(this,T,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new J((function(){o.socket.isConnected()&&o.rejoin()}),this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError((function(){return o.rejoinTimer.reset()}))),this.stateChangeRefs.push(this.socket.onOpen((function(){o.rejoinTimer.reset(),o.isErrored()&&o.rejoin()}))),this.joinPush.receive(\"ok\",(function(){o.state=b,o.rejoinTimer.reset(),o.pushBuffer.forEach((function(e){return e.send()})),o.pushBuffer=[]})),this.joinPush.receive(\"error\",(function(){o.state=k,o.socket.isConnected()&&o.rejoinTimer.scheduleTimeout()})),this.onClose((function(){o.rejoinTimer.reset(),o.socket.hasLogger()&&o.socket.log(\"channel\",\"close \".concat(o.topic,\" \").concat(o.joinRef())),o.state=g,o.socket.remove(o)})),this.onError((function(e){o.socket.hasLogger()&&o.socket.log(\"channel\",\"error \".concat(o.topic),e),o.isJoining()&&o.joinPush.reset(),o.state=k,o.socket.isConnected()&&o.rejoinTimer.scheduleTimeout()})),this.joinPush.receive(\"timeout\",(function(){o.socket.hasLogger()&&o.socket.log(\"channel\",\"timeout \".concat(o.topic,\" (\").concat(o.joinRef(),\")\"),o.joinPush.timeout),new P(o,w,O({}),o.timeout).send(),o.state=k,o.joinPush.reset(),o.socket.isConnected()&&o.rejoinTimer.scheduleTimeout()})),this.on(S,(function(e,t){o.trigger(o.replyEventName(t),e)}))}return h(e,[{key:\"join\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.timeout;if(this.joinedOnce)throw new Error(\"tried to join multiple times. 'join' can only be called a single time per channel instance\");return this.timeout=e,this.joinedOnce=!0,this.rejoin(),this.joinPush}},{key:\"onClose\",value:function(e){this.on(E,e)}},{key:\"onError\",value:function(e){return this.on(R,(function(t){return e(t)}))}},{key:\"on\",value:function(e,t){var n=this.bindingRef++;return this.bindings.push({event:e,ref:n,callback:t}),n}},{key:\"off\",value:function(e,t){this.bindings=this.bindings.filter((function(n){return!(n.event===e&&(void 0===t||t===n.ref))}))}},{key:\"canPush\",value:function(){return this.socket.isConnected()&&this.isJoined()}},{key:\"push\",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.timeout;if(!this.joinedOnce)throw new Error(\"tried to push '\".concat(e,\"' to '\").concat(this.topic,\"' before joining. Use channel.join() before pushing events\"));var i=new P(this,e,(function(){return t}),n);return this.canPush()?i.send():(i.startTimeout(),this.pushBuffer.push(i)),i}},{key:\"leave\",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.timeout;this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=C;var n=function(){e.socket.hasLogger()&&e.socket.log(\"channel\",\"leave \".concat(e.topic)),e.trigger(E,\"leave\")},i=new P(this,w,O({}),t);return i.receive(\"ok\",(function(){return n()})).receive(\"timeout\",(function(){return n()})),i.send(),this.canPush()||i.trigger(\"ok\",{}),i}},{key:\"onMessage\",value:function(e,t,n){return t}},{key:\"isLifecycleEvent\",value:function(e){return A.indexOf(e)>=0}},{key:\"isMember\",value:function(e,t,n,i){return this.topic===e&&(!i||i===this.joinRef()||!this.isLifecycleEvent(t)||(this.socket.hasLogger()&&this.socket.log(\"channel\",\"dropping outdated message\",{topic:e,event:t,payload:n,joinRef:i}),!1))}},{key:\"joinRef\",value:function(){return this.joinPush.ref}},{key:\"rejoin\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.timeout;this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=j,this.joinPush.resend(e))}},{key:\"trigger\",value:function(e,t,n,i){var o=this.onMessage(e,t,n,i);if(t&&!o)throw new Error(\"channel onMessage callbacks must return the payload, modified or unmodified\");for(var r=this.bindings.filter((function(t){return t.event===e})),s=0;s<r.length;s++){r[s].callback(o,n,i||this.joinRef())}}},{key:\"replyEventName\",value:function(e){return\"chan_reply_\".concat(e)}},{key:\"isClosed\",value:function(){return this.state===g}},{key:\"isErrored\",value:function(){return this.state===k}},{key:\"isJoined\",value:function(){return this.state===b}},{key:\"isJoining\",value:function(){return this.state===j}},{key:\"isLeaving\",value:function(){return this.state===C}}]),e}(),H={HEADER_LENGTH:1,META_LENGTH:4,KINDS:{push:0,reply:1,broadcast:2},encode:function(e,t){if(e.payload.constructor===ArrayBuffer)return t(this.binaryEncode(e));var n=[e.join_ref,e.ref,e.topic,e.event,e.payload];return t(JSON.stringify(n))},decode:function(e,t){if(e.constructor===ArrayBuffer)return t(this.binaryDecode(e));var n=r(JSON.parse(e),5);return t({join_ref:n[0],ref:n[1],topic:n[2],event:n[3],payload:n[4]})},binaryEncode:function(e){var t=e.join_ref,n=e.ref,i=e.event,o=e.topic,r=e.payload,s=this.META_LENGTH+t.length+n.length+o.length+i.length,a=new ArrayBuffer(this.HEADER_LENGTH+s),c=new DataView(a),u=0;c.setUint8(u++,this.KINDS.push),c.setUint8(u++,t.length),c.setUint8(u++,n.length),c.setUint8(u++,o.length),c.setUint8(u++,i.length),Array.from(t,(function(e){return c.setUint8(u++,e.charCodeAt(0))})),Array.from(n,(function(e){return c.setUint8(u++,e.charCodeAt(0))})),Array.from(o,(function(e){return c.setUint8(u++,e.charCodeAt(0))})),Array.from(i,(function(e){return c.setUint8(u++,e.charCodeAt(0))}));var h=new Uint8Array(a.byteLength+r.byteLength);return h.set(new Uint8Array(a),0),h.set(new Uint8Array(r),a.byteLength),h.buffer},binaryDecode:function(e){var t=new DataView(e),n=t.getUint8(0),i=new TextDecoder;switch(n){case this.KINDS.push:return this.decodePush(e,t,i);case this.KINDS.reply:return this.decodeReply(e,t,i);case this.KINDS.broadcast:return this.decodeBroadcast(e,t,i)}},decodePush:function(e,t,n){var i=t.getUint8(1),o=t.getUint8(2),r=t.getUint8(3),s=this.HEADER_LENGTH+this.META_LENGTH-1,a=n.decode(e.slice(s,s+i));s+=i;var c=n.decode(e.slice(s,s+o));s+=o;var u=n.decode(e.slice(s,s+r));return s+=r,{join_ref:a,ref:null,topic:c,event:u,payload:e.slice(s,e.byteLength)}},decodeReply:function(e,t,n){var i=t.getUint8(1),o=t.getUint8(2),r=t.getUint8(3),s=t.getUint8(4),a=this.HEADER_LENGTH+this.META_LENGTH,c=n.decode(e.slice(a,a+i));a+=i;var u=n.decode(e.slice(a,a+o));a+=o;var h=n.decode(e.slice(a,a+r));a+=r;var l=n.decode(e.slice(a,a+s));a+=s;var f=e.slice(a,e.byteLength);return{join_ref:c,ref:u,topic:h,event:S,payload:{status:l,response:f}}},decodeBroadcast:function(e,t,n){var i=t.getUint8(1),o=t.getUint8(2),r=this.HEADER_LENGTH+2,s=n.decode(e.slice(r,r+i));r+=i;var a=n.decode(e.slice(r,r+o));return r+=o,{join_ref:null,ref:null,topic:s,event:a,payload:e.slice(r,e.byteLength)}}},U=function(){function e(t){var n=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};c(this,e),this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=i.timeout||1e4,this.transport=i.transport||d.WebSocket||D,this.defaultEncoder=H.encode.bind(H),this.defaultDecoder=H.decode.bind(H),this.closeWasClean=!1,this.unloaded=!1,this.binaryType=i.binaryType||\"arraybuffer\",this.transport!==D?(this.encode=i.encode||this.defaultEncoder,this.decode=i.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder),f&&f.addEventListener&&f.addEventListener(\"unload\",(function(e){n.conn&&(n.unloaded=!0,n.abnormalClose(\"unloaded\"))})),this.heartbeatIntervalMs=i.heartbeatIntervalMs||3e4,this.rejoinAfterMs=function(e){return i.rejoinAfterMs?i.rejoinAfterMs(e):[1e3,2e3,5e3][e-1]||1e4},this.reconnectAfterMs=function(e){return n.unloaded?100:i.reconnectAfterMs?i.reconnectAfterMs(e):[10,50,100,150,200,250,500,1e3,2e3][e-1]||5e3},this.logger=i.logger||null,this.longpollerTimeout=i.longpollerTimeout||2e4,this.params=O(i.params||{}),this.endPoint=\"\".concat(t,\"/\").concat(x),this.vsn=i.vsn||\"2.0.0\",this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new J((function(){n.teardown((function(){return n.connect()}))}),this.reconnectAfterMs)}return h(e,[{key:\"protocol\",value:function(){return location.protocol.match(/^https/)?\"wss\":\"ws\"}},{key:\"endPointURL\",value:function(){var e=M.appendParams(M.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return\"/\"!==e.charAt(0)?e:\"/\"===e.charAt(1)?\"\".concat(this.protocol(),\":\").concat(e):\"\".concat(this.protocol(),\"://\").concat(location.host).concat(e)}},{key:\"disconnect\",value:function(e,t,n){this.closeWasClean=!0,this.reconnectTimer.reset(),this.teardown(e,t,n)}},{key:\"connect\",value:function(e){var t=this;e&&(console&&console.log(\"passing params to connect is deprecated. Instead pass :params to the Socket constructor\"),this.params=O(e)),this.conn||(this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=function(){return t.onConnOpen()},this.conn.onerror=function(e){return t.onConnError(e)},this.conn.onmessage=function(e){return t.onConnMessage(e)},this.conn.onclose=function(e){return t.onConnClose(e)})}},{key:\"log\",value:function(e,t,n){this.logger(e,t,n)}},{key:\"hasLogger\",value:function(){return null!==this.logger}},{key:\"onOpen\",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.open.push([t,e]),t}},{key:\"onClose\",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.close.push([t,e]),t}},{key:\"onError\",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.error.push([t,e]),t}},{key:\"onMessage\",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.message.push([t,e]),t}},{key:\"onConnOpen\",value:function(){this.hasLogger()&&this.log(\"transport\",\"connected to \".concat(this.endPointURL())),this.unloaded=!1,this.closeWasClean=!1,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach((function(e){return(0,r(e,2)[1])()}))}},{key:\"resetHeartbeat\",value:function(){var e=this;this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval((function(){return e.sendHeartbeat()}),this.heartbeatIntervalMs))}},{key:\"teardown\",value:function(e,t,n){var i=this;if(!this.conn)return e&&e();this.waitForBufferDone((function(){i.conn&&(t?i.conn.close(t,n||\"\"):i.conn.close()),i.waitForSocketClosed((function(){i.conn&&(i.conn.onclose=function(){},i.conn=null),e&&e()}))}))}},{key:\"waitForBufferDone\",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;5!==n&&this.conn&&this.conn.bufferedAmount?setTimeout((function(){t.waitForBufferDone(e,n+1)}),150*n):e()}},{key:\"waitForSocketClosed\",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;5!==n&&this.conn&&this.conn.readyState!==m?setTimeout((function(){t.waitForSocketClosed(e,n+1)}),150*n):e()}},{key:\"onConnClose\",value:function(e){this.hasLogger()&&this.log(\"transport\",\"close\",e),this.triggerChanError(),clearInterval(this.heartbeatTimer),this.closeWasClean||this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach((function(t){return(0,r(t,2)[1])(e)}))}},{key:\"onConnError\",value:function(e){this.hasLogger()&&this.log(\"transport\",e),this.triggerChanError(),this.stateChangeCallbacks.error.forEach((function(t){return(0,r(t,2)[1])(e)}))}},{key:\"triggerChanError\",value:function(){this.channels.forEach((function(e){e.isErrored()||e.isLeaving()||e.isClosed()||e.trigger(R)}))}},{key:\"connectionState\",value:function(){switch(this.conn&&this.conn.readyState){case p:return\"connecting\";case v:return\"open\";case y:return\"closing\";default:return\"closed\"}}},{key:\"isConnected\",value:function(){return\"open\"===this.connectionState()}},{key:\"remove\",value:function(e){this.off(e.stateChangeRefs),this.channels=this.channels.filter((function(t){return t.joinRef()!==e.joinRef()}))}},{key:\"off\",value:function(e){for(var t in this.stateChangeCallbacks)this.stateChangeCallbacks[t]=this.stateChangeCallbacks[t].filter((function(t){var n=r(t,1)[0];return-1===e.indexOf(n)}))}},{key:\"channel\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=new _(e,t,this);return this.channels.push(n),n}},{key:\"push\",value:function(e){var t=this;if(this.hasLogger()){var n=e.topic,i=e.event,o=e.payload,r=e.ref,s=e.join_ref;this.log(\"push\",\"\".concat(n,\" \").concat(i,\" (\").concat(s,\", \").concat(r,\")\"),o)}this.isConnected()?this.encode(e,(function(e){return t.conn.send(e)})):this.sendBuffer.push((function(){return t.encode(e,(function(e){return t.conn.send(e)}))}))}},{key:\"makeRef\",value:function(){var e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}},{key:\"sendHeartbeat\",value:function(){if(this.isConnected()){if(this.pendingHeartbeatRef)return this.pendingHeartbeatRef=null,this.hasLogger()&&this.log(\"transport\",\"heartbeat timeout. Attempting to re-establish connection\"),void this.abnormalClose(\"heartbeat timeout\");this.pendingHeartbeatRef=this.makeRef(),this.push({topic:\"phoenix\",event:\"heartbeat\",payload:{},ref:this.pendingHeartbeatRef})}}},{key:\"abnormalClose\",value:function(e){this.closeWasClean=!1,this.conn.readyState===v&&this.conn.close(1e3,e)}},{key:\"flushSendBuffer\",value:function(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach((function(e){return e()})),this.sendBuffer=[])}},{key:\"onConnMessage\",value:function(e){var t=this;this.decode(e.data,(function(e){var n=e.topic,i=e.event,o=e.payload,s=e.ref,a=e.join_ref;s&&s===t.pendingHeartbeatRef&&(t.pendingHeartbeatRef=null),t.hasLogger()&&t.log(\"receive\",\"\".concat(o.status||\"\",\" \").concat(n,\" \").concat(i,\" \").concat(s&&\"(\"+s+\")\"||\"\"),o);for(var c=0;c<t.channels.length;c++){var u=t.channels[c];u.isMember(n,i,o,a)&&u.trigger(i,o,s,a)}for(var h=0;h<t.stateChangeCallbacks.message.length;h++){(0,r(t.stateChangeCallbacks.message[h],2)[1])(e)}}))}},{key:\"leaveOpenTopic\",value:function(e){var t=this.channels.find((function(t){return t.topic===e&&(t.isJoined()||t.isJoining())}));t&&(this.hasLogger()&&this.log(\"transport\",'leaving duplicate topic \"'.concat(e,'\"')),t.leave())}}]),e}(),D=function(){function e(t){c(this,e),this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(t),this.readyState=p,this.poll()}return h(e,[{key:\"normalizeEndpoint\",value:function(e){return e.replace(\"ws://\",\"http://\").replace(\"wss://\",\"https://\").replace(new RegExp(\"(.*)/\"+x),\"$1/\"+L)}},{key:\"endpointURL\",value:function(){return M.appendParams(this.pollEndpoint,{token:this.token})}},{key:\"closeAndRetry\",value:function(){this.close(),this.readyState=p}},{key:\"ontimeout\",value:function(){this.onerror(\"timeout\"),this.closeAndRetry()}},{key:\"poll\",value:function(){var e=this;this.readyState!==v&&this.readyState!==p||M.request(\"GET\",this.endpointURL(),\"application/json\",null,this.timeout,this.ontimeout.bind(this),(function(t){if(t){var n=t.status,i=t.token,o=t.messages;e.token=i}else n=0;switch(n){case 200:o.forEach((function(t){return e.onmessage({data:t})})),e.poll();break;case 204:e.poll();break;case 410:e.readyState=v,e.onopen(),e.poll();break;case 403:e.onerror(),e.close();break;case 0:case 500:e.onerror(),e.closeAndRetry();break;default:throw new Error(\"unhandled poll status \".concat(n))}}))}},{key:\"send\",value:function(e){var t=this;M.request(\"POST\",this.endpointURL(),\"application/json\",e,this.timeout,this.onerror.bind(this,\"timeout\"),(function(e){e&&200===e.status||(t.onerror(e&&e.status),t.closeAndRetry())}))}},{key:\"close\",value:function(e,t){this.readyState=m,this.onclose()}}]),e}(),M=function(){function e(){c(this,e)}return h(e,null,[{key:\"request\",value:function(e,t,n,i,o,r,s){if(d.XDomainRequest){var a=new XDomainRequest;this.xdomainRequest(a,e,t,i,o,r,s)}else{var c=new d.XMLHttpRequest;this.xhrRequest(c,e,t,n,i,o,r,s)}}},{key:\"xdomainRequest\",value:function(e,t,n,i,o,r,s){var a=this;e.timeout=o,e.open(t,n),e.onload=function(){var t=a.parseJSON(e.responseText);s&&s(t)},r&&(e.ontimeout=r),e.onprogress=function(){},e.send(i)}},{key:\"xhrRequest\",value:function(e,t,n,i,o,r,s,a){var c=this;e.open(t,n,!0),e.timeout=r,e.setRequestHeader(\"Content-Type\",i),e.onerror=function(){a&&a(null)},e.onreadystatechange=function(){if(e.readyState===c.states.complete&&a){var t=c.parseJSON(e.responseText);a(t)}},s&&(e.ontimeout=s),e.send(o)}},{key:\"parseJSON\",value:function(e){if(!e||\"\"===e)return null;try{return JSON.parse(e)}catch(t){return console&&console.log(\"failed to parse JSON response\",e),null}}},{key:\"serialize\",value:function(e,t){var n=[];for(var i in e)if(e.hasOwnProperty(i)){var r=t?\"\".concat(t,\"[\").concat(i,\"]\"):i,s=e[i];\"object\"===o(s)?n.push(this.serialize(s,r)):n.push(encodeURIComponent(r)+\"=\"+encodeURIComponent(s))}return n.join(\"&\")}},{key:\"appendParams\",value:function(e,t){if(0===Object.keys(t).length)return e;var n=e.match(/\\?/)?\"&\":\"?\";return\"\".concat(e).concat(n).concat(this.serialize(t))}}]),e}();M.states={complete:4};var N=function(){function e(t){var n=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};c(this,e);var o=i.events||{state:\"presence_state\",diff:\"presence_diff\"};this.state={},this.pendingDiffs=[],this.channel=t,this.joinRef=null,this.caller={onJoin:function(){},onLeave:function(){},onSync:function(){}},this.channel.on(o.state,(function(t){var i=n.caller,o=i.onJoin,r=i.onLeave,s=i.onSync;n.joinRef=n.channel.joinRef(),n.state=e.syncState(n.state,t,o,r),n.pendingDiffs.forEach((function(t){n.state=e.syncDiff(n.state,t,o,r)})),n.pendingDiffs=[],s()})),this.channel.on(o.diff,(function(t){var i=n.caller,o=i.onJoin,r=i.onLeave,s=i.onSync;n.inPendingSyncState()?n.pendingDiffs.push(t):(n.state=e.syncDiff(n.state,t,o,r),s())}))}return h(e,[{key:\"onJoin\",value:function(e){this.caller.onJoin=e}},{key:\"onLeave\",value:function(e){this.caller.onLeave=e}},{key:\"onSync\",value:function(e){this.caller.onSync=e}},{key:\"list\",value:function(t){return e.list(this.state,t)}},{key:\"inPendingSyncState\",value:function(){return!this.joinRef||this.joinRef!==this.channel.joinRef()}}],[{key:\"syncState\",value:function(e,t,n,i){var o=this,r=this.clone(e),s={},a={};return this.map(r,(function(e,n){t[e]||(a[e]=n)})),this.map(t,(function(e,t){var n=r[e];if(n){var i=t.metas.map((function(e){return e.phx_ref})),c=n.metas.map((function(e){return e.phx_ref})),u=t.metas.filter((function(e){return c.indexOf(e.phx_ref)<0})),h=n.metas.filter((function(e){return i.indexOf(e.phx_ref)<0}));u.length>0&&(s[e]=t,s[e].metas=u),h.length>0&&(a[e]=o.clone(n),a[e].metas=h)}else s[e]=t})),this.syncDiff(r,{joins:s,leaves:a},n,i)}},{key:\"syncDiff\",value:function(e,t,n,o){var r=t.joins,s=t.leaves,a=this.clone(e);return n||(n=function(){}),o||(o=function(){}),this.map(r,(function(e,t){var o=a[e];if(a[e]=t,o){var r,s=a[e].metas.map((function(e){return e.phx_ref})),c=o.metas.filter((function(e){return s.indexOf(e.phx_ref)<0}));(r=a[e].metas).unshift.apply(r,i(c))}n(e,o,t)})),this.map(s,(function(e,t){var n=a[e];if(n){var i=t.metas.map((function(e){return e.phx_ref}));n.metas=n.metas.filter((function(e){return i.indexOf(e.phx_ref)<0})),o(e,n,t),0===n.metas.length&&delete a[e]}})),a}},{key:\"list\",value:function(e,t){return t||(t=function(e,t){return t}),this.map(e,(function(e,n){return t(e,n)}))}},{key:\"map\",value:function(e,t){return Object.getOwnPropertyNames(e).map((function(n){return t(n,e[n])}))}},{key:\"clone\",value:function(e){return JSON.parse(JSON.stringify(e))}}]),e}(),J=function(){function e(t,n){c(this,e),this.callback=t,this.timerCalc=n,this.timer=null,this.tries=0}return h(e,[{key:\"reset\",value:function(){this.tries=0,clearTimeout(this.timer)}},{key:\"scheduleTimeout\",value:function(){var e=this;clearTimeout(this.timer),this.timer=setTimeout((function(){e.tries=e.tries+1,e.callback()}),this.timerCalc(this.tries+1))}}]),e}()}])}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/phoenix/priv/static/phoenix.js\n");

/***/ }),

/***/ "./node_modules/phoenix_html/priv/static/phoenix_html.js":
/*!***************************************************************!*\
  !*** ./node_modules/phoenix_html/priv/static/phoenix_html.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n(function() {\n  var PolyfillEvent = eventConstructor();\n\n  function eventConstructor() {\n    if (typeof window.CustomEvent === \"function\") return window.CustomEvent;\n    // IE<=9 Support\n    function CustomEvent(event, params) {\n      params = params || {bubbles: false, cancelable: false, detail: undefined};\n      var evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n      return evt;\n    }\n    CustomEvent.prototype = window.Event.prototype;\n    return CustomEvent;\n  }\n\n  function buildHiddenInput(name, value) {\n    var input = document.createElement(\"input\");\n    input.type = \"hidden\";\n    input.name = name;\n    input.value = value;\n    return input;\n  }\n\n  function handleClick(element) {\n    var to = element.getAttribute(\"data-to\"),\n        method = buildHiddenInput(\"_method\", element.getAttribute(\"data-method\")),\n        csrf = buildHiddenInput(\"_csrf_token\", element.getAttribute(\"data-csrf\")),\n        form = document.createElement(\"form\"),\n        target = element.getAttribute(\"target\");\n\n    form.method = (element.getAttribute(\"data-method\") === \"get\") ? \"get\" : \"post\";\n    form.action = to;\n    form.style.display = \"hidden\";\n\n    if (target) form.target = target;\n\n    form.appendChild(csrf);\n    form.appendChild(method);\n    document.body.appendChild(form);\n    form.submit();\n  }\n\n  window.addEventListener(\"click\", function(e) {\n    var element = e.target;\n\n    while (element && element.getAttribute) {\n      var phoenixLinkEvent = new PolyfillEvent('phoenix.link.click', {\n        \"bubbles\": true, \"cancelable\": true\n      });\n\n      if (!element.dispatchEvent(phoenixLinkEvent)) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        return false;\n      }\n\n      if (element.getAttribute(\"data-method\")) {\n        handleClick(element);\n        e.preventDefault();\n        return false;\n      } else {\n        element = element.parentNode;\n      }\n    }\n  }, false);\n\n  window.addEventListener('phoenix.link.click', function (e) {\n    var message = e.target.getAttribute(\"data-confirm\");\n    if(message && !window.confirm(message)) {\n      e.preventDefault();\n    }\n  }, false);\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGhvZW5peF9odG1sL3ByaXYvc3RhdGljL3Bob2VuaXhfaHRtbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waG9lbml4X2h0bWwvcHJpdi9zdGF0aWMvcGhvZW5peF9odG1sLmpzPzBhMWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIFBvbHlmaWxsRXZlbnQgPSBldmVudENvbnN0cnVjdG9yKCk7XG5cbiAgZnVuY3Rpb24gZXZlbnRDb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gd2luZG93LkN1c3RvbUV2ZW50O1xuICAgIC8vIElFPD05IFN1cHBvcnRcbiAgICBmdW5jdGlvbiBDdXN0b21FdmVudChldmVudCwgcGFyYW1zKSB7XG4gICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge2J1YmJsZXM6IGZhbHNlLCBjYW5jZWxhYmxlOiBmYWxzZSwgZGV0YWlsOiB1bmRlZmluZWR9O1xuICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgICAgIHJldHVybiBldnQ7XG4gICAgfVxuICAgIEN1c3RvbUV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XG4gICAgcmV0dXJuIEN1c3RvbUV2ZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRIaWRkZW5JbnB1dChuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBpbnB1dC50eXBlID0gXCJoaWRkZW5cIjtcbiAgICBpbnB1dC5uYW1lID0gbmFtZTtcbiAgICBpbnB1dC52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGVsZW1lbnQpIHtcbiAgICB2YXIgdG8gPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdG9cIiksXG4gICAgICAgIG1ldGhvZCA9IGJ1aWxkSGlkZGVuSW5wdXQoXCJfbWV0aG9kXCIsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tZXRob2RcIikpLFxuICAgICAgICBjc3JmID0gYnVpbGRIaWRkZW5JbnB1dChcIl9jc3JmX3Rva2VuXCIsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jc3JmXCIpKSxcbiAgICAgICAgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpLFxuICAgICAgICB0YXJnZXQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcInRhcmdldFwiKTtcblxuICAgIGZvcm0ubWV0aG9kID0gKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tZXRob2RcIikgPT09IFwiZ2V0XCIpID8gXCJnZXRcIiA6IFwicG9zdFwiO1xuICAgIGZvcm0uYWN0aW9uID0gdG87XG4gICAgZm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJoaWRkZW5cIjtcblxuICAgIGlmICh0YXJnZXQpIGZvcm0udGFyZ2V0ID0gdGFyZ2V0O1xuXG4gICAgZm9ybS5hcHBlbmRDaGlsZChjc3JmKTtcbiAgICBmb3JtLmFwcGVuZENoaWxkKG1ldGhvZCk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcbiAgICBmb3JtLnN1Ym1pdCgpO1xuICB9XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBlLnRhcmdldDtcblxuICAgIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKSB7XG4gICAgICB2YXIgcGhvZW5peExpbmtFdmVudCA9IG5ldyBQb2x5ZmlsbEV2ZW50KCdwaG9lbml4LmxpbmsuY2xpY2snLCB7XG4gICAgICAgIFwiYnViYmxlc1wiOiB0cnVlLCBcImNhbmNlbGFibGVcIjogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghZWxlbWVudC5kaXNwYXRjaEV2ZW50KHBob2VuaXhMaW5rRXZlbnQpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSkge1xuICAgICAgICBoYW5kbGVDbGljayhlbGVtZW50KTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgIH1cbiAgfSwgZmFsc2UpO1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwaG9lbml4LmxpbmsuY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBtZXNzYWdlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jb25maXJtXCIpO1xuICAgIGlmKG1lc3NhZ2UgJiYgIXdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LCBmYWxzZSk7XG59KSgpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/phoenix_html/priv/static/phoenix_html.js\n");

/***/ }),

/***/ "./node_modules/phoenix_live_view/priv/static/phoenix_live_view.js":
/*!*************************************************************************!*\
  !*** ./node_modules/phoenix_live_view/priv/static/phoenix_live_view.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,t){ true?module.exports=t():undefined}(this,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=2)}([function(e,t,n){\"use strict\";n.r(t);var i,r=11;var o=\"http://www.w3.org/1999/xhtml\",a=\"undefined\"==typeof document?void 0:document,u=!!a&&\"content\"in a.createElement(\"template\"),s=!!a&&a.createRange&&\"createContextualFragment\"in a.createRange();function c(e){return e=e.trim(),u?function(e){var t=a.createElement(\"template\");return t.innerHTML=e,t.content.childNodes[0]}(e):s?function(e){return i||(i=a.createRange()).selectNode(a.body),i.createContextualFragment(e).childNodes[0]}(e):function(e){var t=a.createElement(\"body\");return t.innerHTML=e,t.childNodes[0]}(e)}function l(e,t){var n,i,r=e.nodeName,o=t.nodeName;return r===o||(n=r.charCodeAt(0),i=o.charCodeAt(0),n<=90&&i>=97?r===o.toUpperCase():i<=90&&n>=97&&o===r.toUpperCase())}function d(e,t,n){e[n]!==t[n]&&(e[n]=t[n],e[n]?e.setAttribute(n,\"\"):e.removeAttribute(n))}var h={OPTION:function(e,t){var n=e.parentNode;if(n){var i=n.nodeName.toUpperCase();\"OPTGROUP\"===i&&(i=(n=n.parentNode)&&n.nodeName.toUpperCase()),\"SELECT\"!==i||n.hasAttribute(\"multiple\")||(e.hasAttribute(\"selected\")&&!t.selected&&(e.setAttribute(\"selected\",\"selected\"),e.removeAttribute(\"selected\")),n.selectedIndex=-1)}d(e,t,\"selected\")},INPUT:function(e,t){d(e,t,\"checked\"),d(e,t,\"disabled\"),e.value!==t.value&&(e.value=t.value),t.hasAttribute(\"value\")||e.removeAttribute(\"value\")},TEXTAREA:function(e,t){var n=t.value;e.value!==n&&(e.value=n);var i=e.firstChild;if(i){var r=i.nodeValue;if(r==n||!n&&r==e.placeholder)return;i.nodeValue=n}},SELECT:function(e,t){if(!t.hasAttribute(\"multiple\")){for(var n,i,r=-1,o=0,a=e.firstChild;a;)if(\"OPTGROUP\"===(i=a.nodeName&&a.nodeName.toUpperCase()))a=(n=a).firstChild;else{if(\"OPTION\"===i){if(a.hasAttribute(\"selected\")){r=o;break}o++}!(a=a.nextSibling)&&n&&(a=n.nextSibling,n=null)}e.selectedIndex=r}}},f=1,v=11,p=3,g=8;function m(){}function y(e){if(e)return e.getAttribute&&e.getAttribute(\"id\")||e.id}var b=function(e){return function(t,n,i){if(i||(i={}),\"string\"==typeof n)if(\"#document\"===t.nodeName||\"HTML\"===t.nodeName||\"BODY\"===t.nodeName){var r=n;(n=a.createElement(\"html\")).innerHTML=r}else n=c(n);var u=i.getNodeKey||y,s=i.onBeforeNodeAdded||m,d=i.onNodeAdded||m,b=i.onBeforeElUpdated||m,k=i.onElUpdated||m,w=i.onBeforeNodeDiscarded||m,A=i.onNodeDiscarded||m,E=i.onBeforeElChildrenUpdated||m,S=!0===i.childrenOnly,x=Object.create(null),C=[];function P(e){C.push(e)}function L(e,t,n){!1!==w(e)&&(t&&t.removeChild(e),A(e),function e(t,n){if(t.nodeType===f)for(var i=t.firstChild;i;){var r=void 0;n&&(r=u(i))?P(r):(A(i),i.firstChild&&e(i,n)),i=i.nextSibling}}(e,n))}function I(e){d(e);for(var t=e.firstChild;t;){var n=t.nextSibling,i=u(t);if(i){var r=x[i];r&&l(t,r)?(t.parentNode.replaceChild(r,t),T(r,t)):I(t)}else I(t);t=n}}function T(t,n,i){var r=u(n);if(r&&delete x[r],!i){if(!1===b(t,n))return;if(e(t,n),k(t),!1===E(t,n))return}\"TEXTAREA\"!==t.nodeName?function(e,t){var n,i,r,o,c,d=t.firstChild,v=e.firstChild;e:for(;d;){for(o=d.nextSibling,n=u(d);v;){if(r=v.nextSibling,d.isSameNode&&d.isSameNode(v)){d=o,v=r;continue e}i=u(v);var m=v.nodeType,y=void 0;if(m===d.nodeType&&(m===f?(n?n!==i&&((c=x[n])?r===c?y=!1:(e.insertBefore(c,v),i?P(i):L(v,e,!0),v=c):y=!1):i&&(y=!1),(y=!1!==y&&l(v,d))&&T(v,d)):m!==p&&m!=g||(y=!0,v.nodeValue!==d.nodeValue&&(v.nodeValue=d.nodeValue))),y){d=o,v=r;continue e}i?P(i):L(v,e,!0),v=r}if(n&&(c=x[n])&&l(c,d))e.appendChild(c),T(c,d);else{var b=s(d);!1!==b&&(b&&(d=b),d.actualize&&(d=d.actualize(e.ownerDocument||a)),e.appendChild(d),I(d))}d=o,v=r}!function(e,t,n){for(;t;){var i=t.nextSibling;(n=u(t))?P(n):L(t,e,!0),t=i}}(e,v,i);var k=h[e.nodeName];k&&k(e,t)}(t,n):h.TEXTAREA(t,n)}!function e(t){if(t.nodeType===f||t.nodeType===v)for(var n=t.firstChild;n;){var i=u(n);i&&(x[i]=n),e(n),n=n.nextSibling}}(t);var _=t,D=_.nodeType,R=n.nodeType;if(!S)if(D===f)R===f?l(t,n)||(A(t),_=function(e,t){for(var n=e.firstChild;n;){var i=n.nextSibling;t.appendChild(n),n=i}return t}(t,function(e,t){return t&&t!==o?a.createElementNS(t,e):a.createElement(e)}(n.nodeName,n.namespaceURI))):_=n;else if(D===p||D===g){if(R===D)return _.nodeValue!==n.nodeValue&&(_.nodeValue=n.nodeValue),_;_=n}if(_===n)A(t);else{if(n.isSameNode&&n.isSameNode(_))return;if(T(_,n,S),C)for(var N=0,O=C.length;N<O;N++){var H=x[C[N]];H&&L(H,H.parentNode,!1)}}return!S&&_!==t&&t.parentNode&&(_.actualize&&(_=_.actualize(t.ownerDocument||a)),t.parentNode.replaceChild(_,t)),_}}(function(e,t){var n,i,o,a,u=t.attributes;if(t.nodeType!==r&&e.nodeType!==r){for(var s=u.length-1;s>=0;s--)i=(n=u[s]).name,o=n.namespaceURI,a=n.value,o?(i=n.localName||i,e.getAttributeNS(o,i)!==a&&(\"xmlns\"===n.prefix&&(i=n.name),e.setAttributeNS(o,i,a))):e.getAttribute(i)!==a&&e.setAttribute(i,a);for(var c=e.attributes,l=c.length-1;l>=0;l--)i=(n=c[l]).name,(o=n.namespaceURI)?(i=n.localName||i,t.hasAttributeNS(o,i)||e.removeAttributeNS(o,i)):t.hasAttribute(i)||e.removeAttribute(i)}});function k(e){return P(e)||S(e)||L(e)||C()}function w(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,i)}return n}function A(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function E(e){return function(e){if(Array.isArray(e))return I(e)}(e)||S(e)||L(e)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function S(e){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}function x(e,t){return P(e)||function(e,t){if(\"undefined\"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],i=!0,r=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(i=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{i||null==u.return||u.return()}finally{if(r)throw o}}return n}(e,t)||L(e,t)||C()}function C(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function P(e){if(Array.isArray(e))return e}function L(e,t){if(e){if(\"string\"==typeof e)return I(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?I(e,t):void 0}}function I(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function T(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function _(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function D(e,t,n){return t&&_(e.prototype,t),n&&_(e,n),e}function R(e){\"@babel/helpers - typeof\";return(R=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}n.d(t,\"debug\",function(){return K}),n.d(t,\"Rendered\",function(){return ue}),n.d(t,\"LiveSocket\",function(){return se}),n.d(t,\"Browser\",function(){return ce}),n.d(t,\"DOM\",function(){return le}),n.d(t,\"View\",function(){return fe});var N=[1e3,3e3],O=\"data-phx-view\",H=[\"phx-click-loading\",\"phx-change-loading\",\"phx-submit-loading\",\"phx-keydown-loading\",\"phx-keyup-loading\",\"phx-blur-loading\",\"phx-focus-loading\"],j=\"data-phx-component\",F=\"data-phx-ref\",M=\"[\".concat(O,\"]\"),B=[\"text\",\"textarea\",\"number\",\"email\",\"password\",\"search\",\"tel\",\"url\",\"date\",\"time\"],U=[\"checkbox\",\"radio\"],J=\"data-phx-static\",V=1,W=\"phx-\",q={debounce:300,throttle:300},z=function(e,t){return console.error&&console.error(e,t)};var K=function(e,t,n,i){e.liveSocket.isDebugEnabled()&&console.log(\"\".concat(e.id,\" \").concat(t,\": \").concat(n,\" - \"),i)},$=function(e){return\"function\"==typeof e?e:function(){return e}},X=function(e){return JSON.parse(JSON.stringify(e))},G=function(e,t,n){do{if(e.matches(\"[\".concat(t,\"]\")))return e;e=e.parentElement||e.parentNode}while(null!==e&&1===e.nodeType&&!(n&&n.isSameNode(e)||e.matches(M)));return null},Y=function(e){return null!==e&&\"object\"===R(e)&&!(e instanceof Array)},Q=function(e){for(var t in e)return!1;return!0},Z=function(e,t){return e&&t(e)},ee=function(){function e(t,n,i){T(this,e),this.ref=ie.genFileRef(n),this.fileEl=t,this.file=n,this.view=i,this.meta=null,this._isCancelled=!1,this._isDone=!1,this._progress=0,this._onDone=function(){}}return D(e,null,[{key:\"isActive\",value:function(e,t){var n=void 0===t._phxRef,i=e.getAttribute(\"data-phx-active-refs\").split(\",\").indexOf(ie.genFileRef(t))>=0;return t.size>0&&(n||i)}},{key:\"isPreflighted\",value:function(e,t){var n=e.getAttribute(\"data-phx-preflighted-refs\").split(\",\").indexOf(ie.genFileRef(t))>=0;return n&&this.isActive(e,t)}}]),D(e,[{key:\"metadata\",value:function(){return this.meta}},{key:\"progress\",value:function(e){var t=this;this._progress=Math.floor(e),this._progress>=100?(this._progress=100,this._isDone=!0,this.view.pushFileProgress(this.fileEl,this.ref,100,function(){ie.untrackFile(t.fileEl,t.file),t._onDone()})):this.view.pushFileProgress(this.fileEl,this.ref,this._progress)}},{key:\"cancel\",value:function(){this._isCancelled=!0,this._isDone=!0,this._onDone()}},{key:\"isDone\",value:function(){return this._isDone}},{key:\"error\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"failed\";this.view.pushFileProgress(this.fileEl,this.ref,{error:e})}},{key:\"onDone\",value:function(e){this._onDone=e}},{key:\"toPreflightPayload\",value:function(){return{last_modified:this.file.lastModified,name:this.file.name,size:this.file.size,type:this.file.type,ref:this.ref}}},{key:\"uploader\",value:function(e){if(this.meta.uploader){var t=e[this.meta.uploader]||z(\"no uploader configured for \".concat(this.meta.uploader));return{name:this.meta.uploader,callback:t}}return{name:\"channel\",callback:re}}},{key:\"zipPostFlight\",value:function(e){this.meta=e.entries[this.ref],this.meta||z(\"no preflight upload response returned with ref \".concat(this.ref),{input:this.fileEl,response:e})}}]),e}(),te={LiveFileUpload:{preflightedRefs:function(){return this.el.getAttribute(\"data-phx-preflighted-refs\")},mounted:function(){this.preflightedWas=this.preflightedRefs()},updated:function(){var e=this.preflightedRefs();this.preflightedWas!==e&&(this.preflightedWas=e,\"\"===e&&this.__view.cancelSubmit(this.el.form))}}};te.LiveImgPreview={mounted:function(){var e=this;this.ref=this.el.getAttribute(\"data-phx-entry-ref\"),this.inputEl=document.getElementById(this.el.getAttribute(\"data-phx-upload-ref\")),ie.getEntryDataURL(this.inputEl,this.ref,function(t){return e.el.src=t})}};var ne=0,ie=function(){function e(t,n,i){T(this,e),this.view=n,this.onComplete=i,this._entries=Array.from(e.filesAwaitingPreflight(t)||[]).map(function(e){return new ee(t,e,n)}),this.numEntriesInProgress=this._entries.length}return D(e,null,[{key:\"genFileRef\",value:function(e){var t=e._phxRef;return void 0!==t?t:(e._phxRef=(ne++).toString(),e._phxRef)}},{key:\"getEntryDataURL\",value:function(e,t,n){var i=this,r=this.activeFiles(e).find(function(e){return i.genFileRef(e)===t}),o=new FileReader;o.onload=function(e){return n(e.target.result)},o.readAsDataURL(r)}},{key:\"hasUploadsInProgress\",value:function(e){var t=0;return le.all(e,'input[type=\"file\"]',function(e){e.getAttribute(\"data-phx-preflighted-refs\")!==e.getAttribute(\"data-phx-done-refs\")&&t++}),t>0}},{key:\"serializeUploads\",value:function(e){var t=this,n={};return this.activeFiles(e,\"serialize\").forEach(function(i){var r={path:e.name},o=e.getAttribute(\"data-phx-upload-ref\");n[o]=n[o]||[],r.ref=t.genFileRef(i),r.name=i.name,r.type=i.type,r.size=i.size,n[o].push(r)}),n}},{key:\"clearFiles\",value:function(e){e.value=null,le.putPrivate(e,\"files\",[])}},{key:\"untrackFile\",value:function(e,t){le.putPrivate(e,\"files\",le.private(e,\"files\").filter(function(e){return!Object.is(e,t)}))}},{key:\"trackFiles\",value:function(e,t){var n=this;if(null!==e.getAttribute(\"multiple\")){var i=t.filter(function(t){return!n.activeFiles(e).find(function(e){return Object.is(e,t)})});le.putPrivate(e,\"files\",this.activeFiles(e).concat(i)),e.value=null}else le.putPrivate(e,\"files\",t)}},{key:\"activeFileInputs\",value:function(e){var t=this,n=e.querySelectorAll('input[type=\"file\"]');return Array.from(n).filter(function(e){return e.files&&t.activeFiles(e).length>0})}},{key:\"activeFiles\",value:function(e){return(le.private(e,\"files\")||[]).filter(function(t){return ee.isActive(e,t)})}},{key:\"inputsAwaitingPreflight\",value:function(e){var t=this,n=e.querySelectorAll('input[type=\"file\"]');return Array.from(n).filter(function(e){return t.filesAwaitingPreflight(e).length>0})}},{key:\"filesAwaitingPreflight\",value:function(e){return this.activeFiles(e).filter(function(t){return!ee.isPreflighted(e,t)})}}]),D(e,[{key:\"entries\",value:function(){return this._entries}},{key:\"initAdapterUpload\",value:function(e,t,n){var i=this;this._entries=this._entries.map(function(t){return t.zipPostFlight(e),t.onDone(function(){i.numEntriesInProgress--,0===i.numEntriesInProgress&&i.onComplete()}),t});var r=this._entries.reduce(function(e,t){var i=t.uploader(n.uploaders),r=i.name,o=i.callback;return e[r]=e[r]||{callback:o,entries:[]},e[r].entries.push(t),e},{});for(var o in r){var a=r[o];(0,a.callback)(a.entries,t,e,n)}}}]),e}(),re=function(e,t,n,i){e.forEach(function(e){new oe(e,n.config.chunk_size,i).upload()})},oe=function(){function e(t,n,i){T(this,e),this.liveSocket=i,this.entry=t,this.offset=0,this.chunkSize=n,this.uploadChannel=i.channel(\"lvu:\".concat(t.ref),{token:t.metadata()})}return D(e,[{key:\"upload\",value:function(){var e=this;this.uploadChannel.join().receive(\"ok\",function(t){return e.readNextChunk()}).receive(\"error\",function(t){e.uploadChannel.leave(),e.entry.error()})}},{key:\"isDone\",value:function(){return this.offset>=this.entry.file.size}},{key:\"readNextChunk\",value:function(){var e=this,t=new window.FileReader,n=this.entry.file.slice(this.offset,this.chunkSize+this.offset);t.onload=function(t){if(null!==t.target.error)return z(\"Read error: \"+t.target.error);e.offset+=t.target.result.byteLength,e.pushChunk(t.target.result)},t.readAsArrayBuffer(n)}},{key:\"pushChunk\",value:function(e){var t=this;this.uploadChannel.isJoined()&&this.uploadChannel.push(\"chunk\",e).receive(\"ok\",function(){t.entry.progress(t.offset/t.entry.file.size*100),t.isDone()||setTimeout(function(){return t.readNextChunk()},t.liveSocket.getLatencySim()||0)})}}]),e}(),ae=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=new FormData(e),i=[];n.forEach(function(e,t,n){e instanceof File&&i.push(t)}),i.forEach(function(e){return n.delete(e)});var r,o=new URLSearchParams,a=function(e){if(\"undefined\"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=L(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,r,o=!0,a=!1;return{s:function(){i=e[Symbol.iterator]()},n:function(){var e=i.next();return o=e.done,e},e:function(e){a=!0,r=e},f:function(){try{o||null==i.return||i.return()}finally{if(a)throw r}}}}(n.entries());try{for(a.s();!(r=a.n()).done;){var u=x(r.value,2),s=u[0],c=u[1];o.append(s,c)}}catch(e){a.e(e)}finally{a.f()}for(var l in t)o.append(l,t[l]);return o.toString()},ue=function(){function e(t,n){T(this,e),this.viewId=t,this.rendered={},this.mergeDiff(n)}return D(e,null,[{key:\"extract\",value:function(e){var t=e.r,n=e.e,i=e.t;return delete e.r,delete e.e,delete e.t,{diff:e,title:i,reply:t||null,events:n||[]}}}]),D(e,[{key:\"parentViewId\",value:function(){return this.viewId}},{key:\"toString\",value:function(e){return this.recursiveToString(this.rendered,this.rendered.c,e)}},{key:\"recursiveToString\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.c,n=arguments.length>2?arguments[2]:void 0,i={buffer:\"\",components:t,onlyCids:n=n?new Set(n):null};return this.toOutputBuffer(e,i),i.buffer}},{key:\"componentCIDs\",value:function(e){return Object.keys(e.c||{}).map(function(e){return parseInt(e)})}},{key:\"isComponentOnlyDiff\",value:function(e){return!!e.c&&1===Object.keys(e).length}},{key:\"getComponent\",value:function(e,t){return e.c[t]}},{key:\"mergeDiff\",value:function(e){var t=e.c;if(delete e.c,this.rendered=this.recursiveMerge(this.rendered,e),this.rendered.c=this.rendered.c||{},t){var n=this.rendered.c;for(var i in t){var r=t[i],o=r,a=o.s;if(\"number\"==typeof a){for(;\"number\"==typeof a;)a=(o=a>0?t[a]:n[-a]).s;o=X(o),this.doRecursiveMerge(o,r),o.s=a}else o=n[i]||{},o=this.recursiveMerge(o,r);t[i]=o}for(var u in t)n[u]=t[u];e.c=t}}},{key:\"recursiveMerge\",value:function(e,t){return void 0!==t.s?t:(this.doRecursiveMerge(e,t),e)}},{key:\"doRecursiveMerge\",value:function(e,t){for(var n in t){var i=t[n],r=e[n];Y(i)&&void 0===i.s&&Y(r)?this.doRecursiveMerge(r,i):e[n]=i}}},{key:\"componentToString\",value:function(e){return this.recursiveCIDToString(this.rendered.c,e)}},{key:\"pruneCIDs\",value:function(e){var t=this;e.forEach(function(e){return delete t.rendered.c[e]})}},{key:\"get\",value:function(){return this.rendered}},{key:\"isNewFingerprint\",value:function(){return!!(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).s}},{key:\"toOutputBuffer\",value:function(e,t){if(e.d)return this.comprehensionToBuffer(e,t);var n=e.s;t.buffer+=n[0];for(var i=1;i<n.length;i++)this.dynamicToBuffer(e[i-1],t),t.buffer+=n[i]}},{key:\"comprehensionToBuffer\",value:function(e,t){for(var n=e.d,i=e.s,r=0;r<n.length;r++){var o=n[r];t.buffer+=i[0];for(var a=1;a<i.length;a++)this.dynamicToBuffer(o[a-1],t),t.buffer+=i[a]}}},{key:\"dynamicToBuffer\",value:function(e,t){\"number\"==typeof e?t.buffer+=this.recursiveCIDToString(t.components,e,t.onlyCids):Y(e)?this.toOutputBuffer(e,t):t.buffer+=e}},{key:\"recursiveCIDToString\",value:function(e,t,n){var i=this,r=e[t]||z(\"no component for CID \".concat(t),e),o=document.createElement(\"template\");o.innerHTML=this.recursiveToString(r,e,n);var a=o.content,u=n&&!n.has(t),s=x(Array.from(a.childNodes).reduce(function(e,n,r){var a=x(e,2),s=a[0],c=a[1];return n.nodeType===Node.ELEMENT_NODE?n.getAttribute(j)?[s,!0]:(n.setAttribute(j,t),n.id||(n.id=\"\".concat(i.parentViewId(),\"-\").concat(t,\"-\").concat(r)),u&&(n.setAttribute(\"data-phx-skip\",\"\"),n.innerHTML=\"\"),[!0,c]):\"\"!==n.nodeValue.trim()?(z(\"only HTML element tags are allowed at the root of components.\\n\\n\"+'got: \"'.concat(n.nodeValue.trim(),'\"\\n\\n')+\"within:\\n\",o.innerHTML.trim()),n.replaceWith(i.createSpan(n.nodeValue,t)),[!0,c]):(n.remove(),[s,c])},[!1,!1]),2),c=s[0],l=s[1];return c||l?!c&&l?(z(\"expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.\",o.innerHTML.trim()),o.innerHTML):o.innerHTML:(z(\"expected at least one HTML element tag inside a component, but the component is empty:\\n\",o.innerHTML.trim()),this.createSpan(\"\",t).outerHTML)}},{key:\"createSpan\",value:function(e,t){var n=document.createElement(\"span\");return n.innerText=e,n.setAttribute(j,t),n}}]),e}(),se=function(){function e(t,n){var i=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(T(this,e),this.unloaded=!1,!n||\"Object\"===n.constructor.name)throw new Error('\\n      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:\\n\\n          import {Socket} from \"phoenix\"\\n          import {LiveSocket} from \"phoenix_live_view\"\\n          let liveSocket = new LiveSocket(\"/live\", Socket, {...})\\n      ');this.socket=new n(t,r),this.bindingPrefix=r.bindingPrefix||W,this.opts=r,this.params=$(r.params||{}),this.viewLogger=r.viewLogger,this.metadataCallbacks=r.metadata||{},this.defaults=Object.assign(X(q),r.defaults||{}),this.activeElement=null,this.prevActive=null,this.silenced=!1,this.main=null,this.linkRef=0,this.roots={},this.href=window.location.href,this.pendingLink=null,this.currentLocation=X(window.location),this.hooks=r.hooks||{},this.uploaders=r.uploaders||{},this.loaderTimeout=r.loaderTimeout||V,this.boundTopLevelEvents=!1,this.domCallbacks=Object.assign({onNodeAdded:$(),onBeforeElUpdated:$()},r.dom||{}),window.addEventListener(\"unload\",function(e){i.unloaded=!0}),this.socket.onOpen(function(){i.isUnloaded()&&window.location.reload()})}return D(e,[{key:\"isProfileEnabled\",value:function(){return\"true\"===sessionStorage.getItem(\"phx:live-socket:profiling\")}},{key:\"isDebugEnabled\",value:function(){return\"true\"===sessionStorage.getItem(\"phx:live-socket:debug\")}},{key:\"enableDebug\",value:function(){sessionStorage.setItem(\"phx:live-socket:debug\",\"true\")}},{key:\"enableProfiling\",value:function(){sessionStorage.setItem(\"phx:live-socket:profiling\",\"true\")}},{key:\"disableDebug\",value:function(){sessionStorage.removeItem(\"phx:live-socket:debug\")}},{key:\"disableProfiling\",value:function(){sessionStorage.removeItem(\"phx:live-socket:profiling\")}},{key:\"enableLatencySim\",value:function(e){this.enableDebug(),console.log(\"latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable\"),sessionStorage.setItem(\"phx:live-socket:latency-sim\",e)}},{key:\"disableLatencySim\",value:function(){sessionStorage.removeItem(\"phx:live-socket:latency-sim\")}},{key:\"getLatencySim\",value:function(){var e=sessionStorage.getItem(\"phx:live-socket:latency-sim\");return e?parseInt(e):null}},{key:\"getSocket\",value:function(){return this.socket}},{key:\"connect\",value:function(){var e=this,t=function(){e.joinRootViews()&&(e.bindTopLevelEvents(),e.socket.connect())};[\"complete\",\"loaded\",\"interactive\"].indexOf(document.readyState)>=0?t():document.addEventListener(\"DOMContentLoaded\",function(){return t()})}},{key:\"disconnect\",value:function(e){this.socket.disconnect(e)}},{key:\"triggerDOM\",value:function(e,t){var n;(n=this.domCallbacks)[e].apply(n,E(t))}},{key:\"time\",value:function(e,t){if(!this.isProfileEnabled()||!console.time)return t();console.time(e);var n=t();return console.timeEnd(e),n}},{key:\"log\",value:function(e,t,n){if(this.viewLogger){var i=x(n(),2),r=i[0],o=i[1];this.viewLogger(e,t,r,o)}else if(this.isDebugEnabled()){var a=x(n(),2),u=a[0],s=a[1];K(e,t,u,s)}}},{key:\"onChannel\",value:function(e,t,n){var i=this;e.on(t,function(e){var t=i.getLatencySim();t?(console.log(\"simulating \".concat(t,\"ms of latency from server to client\")),setTimeout(function(){return n(e)},t)):n(e)})}},{key:\"wrapPush\",value:function(e,t,n){var i=this,r=this.getLatencySim();if(!r)return t.timeout?n().receive(\"timeout\",function(){e.isDestroyed()||i.reloadWithJitter(e,function(){i.log(e,\"timeout\",function(){return[\"received timeout while communicating with server. Falling back to hard refresh for recovery\"]})})}):n();console.log(\"simulating \".concat(r,\"ms of latency from client to server\"));var o={receives:[],receive:function(e,t){this.receives.push([e,t])}};return setTimeout(function(){o.receives.reduce(function(e,t){var n=x(t,2),i=n[0],r=n[1];return e.receive(i,r)},n())},r),o}},{key:\"reloadWithJitter\",value:function(e,t){var n=this;e.destroy(),this.disconnect();var i=N[0],r=N[1],o=Math.floor(Math.random()*(r-i+1))+i,a=ce.updateLocal(e.name(),\"consecutive-reloads\",0,function(e){return e+1});t?t():this.log(e,\"join\",function(){return[\"encountered \".concat(a,\" consecutive reloads\")]}),a>10&&(this.log(e,\"join\",function(){return[\"exceeded \".concat(10,\" consecutive reloads. Entering failsafe mode\")]}),o=3e4),setTimeout(function(){n.hasPendingLink()?window.location=n.pendingLink:window.location.reload()},o)}},{key:\"getHookCallbacks\",value:function(e){return e&&e.startsWith(\"Phoenix.\")?te[e.split(\".\")[1]]:this.hooks[e]}},{key:\"isUnloaded\",value:function(){return this.unloaded}},{key:\"isConnected\",value:function(){return this.socket.isConnected()}},{key:\"getBindingPrefix\",value:function(){return this.bindingPrefix}},{key:\"binding\",value:function(e){return\"\".concat(this.getBindingPrefix()).concat(e)}},{key:\"channel\",value:function(e,t){return this.socket.channel(e,t)}},{key:\"joinRootViews\",value:function(){var e=this,t=!1;return le.all(document,\"\".concat(M,\":not([\").concat(\"data-phx-parent-id\",\"])\"),function(n){if(!e.getRootById(n.id)){var i=e.joinRootView(n,e.getHref());e.root=e.root||i,n.getAttribute(\"data-phx-main\")&&(e.main=i)}t=!0}),t}},{key:\"redirect\",value:function(e,t){this.disconnect(),ce.redirect(e,t)}},{key:\"replaceMain\",value:function(e,t){var n=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.setPendingLink(e),o=this.main.el;this.main.showLoader(this.loaderTimeout),this.main.destroy(),ce.fetchPage(e,function(a,u){if(200!==a)return n.redirect(e);var s=document.createElement(\"template\");s.innerHTML=u;var c=s.content.childNodes[0];if(!c||!n.isPhxView(c))return n.redirect(e);n.joinRootView(c,e,t,function(e,t){1===t&&(n.commitPendingLink(r)?(o.replaceWith(e.el),n.main=e,i&&i()):e.destroy())})})}},{key:\"isPhxView\",value:function(e){return e.getAttribute&&null!==e.getAttribute(O)}},{key:\"joinRootView\",value:function(e,t,n,i){var r=new fe(e,this,null,t,n);return this.roots[r.id]=r,r.join(i),r}},{key:\"owner\",value:function(e,t){var n=this,i=Z(e.closest(M),function(e){return n.getViewByEl(e)});i&&t(i)}},{key:\"withinOwners\",value:function(e,t){var n=this;this.owner(e,function(i){var r=e.getAttribute(n.binding(\"target\"));null===r?t(i,e):i.withinTargets(r,t)})}},{key:\"getViewByEl\",value:function(e){var t=e.getAttribute(\"data-phx-root-id\");return Z(this.getRootById(t),function(t){return t.getDescendentByEl(e)})}},{key:\"getRootById\",value:function(e){return this.roots[e]}},{key:\"destroyAllViews\",value:function(){for(var e in this.roots)this.roots[e].destroy(),delete this.roots[e]}},{key:\"destroyViewByEl\",value:function(e){var t=this.getRootById(e.getAttribute(\"data-phx-root-id\"));t&&t.destroyDescendent(e.id)}},{key:\"setActiveElement\",value:function(e){var t=this;if(this.activeElement!==e){this.activeElement=e;var n=function(){e===t.activeElement&&(t.activeElement=null),e.removeEventListener(\"mouseup\",t),e.removeEventListener(\"touchend\",t)};e.addEventListener(\"mouseup\",n),e.addEventListener(\"touchend\",n)}}},{key:\"getActiveElement\",value:function(){return document.activeElement===document.body?this.activeElement||document.activeElement:document.activeElement||document.body}},{key:\"dropActiveElement\",value:function(e){this.prevActive&&e.ownsElement(this.prevActive)&&(this.prevActive=null)}},{key:\"restorePreviouslyActiveFocus\",value:function(){this.prevActive&&this.prevActive!==document.body&&this.prevActive.focus()}},{key:\"blurActiveElement\",value:function(){this.prevActive=this.getActiveElement(),this.prevActive!==document.body&&this.prevActive.blur()}},{key:\"bindTopLevelEvents\",value:function(){var e=this;this.boundTopLevelEvents||(this.boundTopLevelEvents=!0,window.addEventListener(\"pageshow\",function(t){t.persisted&&(e.withPageLoading({to:window.location.href,kind:\"redirect\"}),window.location.reload())}),this.bindClicks(),this.bindNav(),this.bindForms(),this.bind({keyup:\"keyup\",keydown:\"keydown\"},function(t,n,i,r,o,a,u){var s=r.getAttribute(e.binding(\"key\")),c=t.key&&t.key.toLowerCase();s&&s.toLowerCase()!==c||i.pushKey(r,o,n,a,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?w(Object(n),!0).forEach(function(t){A(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):w(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({key:t.key},e.eventMeta(n,t,r)))}),this.bind({blur:\"focusout\",focus:\"focusin\"},function(t,n,i,r,o,a,u){u||i.pushEvent(n,r,o,a,e.eventMeta(n,t,r))}),this.bind({blur:\"blur\",focus:\"focus\"},function(t,n,i,r,o,a,u){u&&\"window\"!==!u&&i.pushEvent(n,r,o,a,e.eventMeta(n,t,r))}),window.addEventListener(\"dragover\",function(e){return e.preventDefault()}),window.addEventListener(\"drop\",function(t){t.preventDefault();var n=Z(G(t.target,e.binding(\"drop-target\")),function(t){return t.getAttribute(e.binding(\"drop-target\"))}),i=n&&document.getElementById(n),r=Array.from(t.dataTransfer.files||[]);i&&!i.disabled&&0!==r.length&&i.files instanceof FileList&&(ie.trackFiles(i,r),i.dispatchEvent(new Event(\"input\",{bubbles:!0})))}))}},{key:\"eventMeta\",value:function(e,t,n){var i=this.metadataCallbacks[e];return i?i(t,n):{}}},{key:\"setPendingLink\",value:function(e){return this.linkRef++,this.pendingLink=e,this.linkRef}},{key:\"commitPendingLink\",value:function(e){return this.linkRef===e&&(this.href=this.pendingLink,this.pendingLink=null,!0)}},{key:\"getHref\",value:function(){return this.href}},{key:\"hasPendingLink\",value:function(){return!!this.pendingLink}},{key:\"bind\",value:function(e,t){var n=this,i=function(i){var r=e[i];n.on(r,function(e){var r=n.binding(i),o=n.binding(\"window-\".concat(i)),a=e.target.getAttribute&&e.target.getAttribute(r);a?n.debounce(e.target,e,function(){n.withinOwners(e.target,function(n,r){t(e,i,n,e.target,r,a,null)})}):le.all(document,\"[\".concat(o,\"]\"),function(r){var a=r.getAttribute(o);n.debounce(r,e,function(){n.withinOwners(r,function(n,o){t(e,i,n,r,o,a,\"window\")})})})})};for(var r in e)i(r)}},{key:\"bindClicks\",value:function(){var e=this;[!0,!1].forEach(function(t){var n=t?e.binding(\"capture-click\"):e.binding(\"click\");window.addEventListener(\"click\",function(i){var r=null,o=(r=t?i.target.matches(\"[\".concat(n,\"]\"))?i.target:i.target.querySelector(\"[\".concat(n,\"]\")):G(i.target,n))&&r.getAttribute(n);o&&(\"#\"===r.getAttribute(\"href\")&&i.preventDefault(),e.debounce(r,i,function(){e.withinOwners(r,function(t,n){t.pushEvent(\"click\",r,n,o,e.eventMeta(\"click\",i,r))})}))},t)})}},{key:\"bindNav\",value:function(){var e=this;if(ce.canPushState()){history.scrollRestoration&&(history.scrollRestoration=\"manual\");var t=null;window.addEventListener(\"scroll\",function(e){clearTimeout(t),t=setTimeout(function(){ce.updateCurrentState(function(e){return Object.assign(e,{scroll:window.scrollY})})},100)}),window.addEventListener(\"popstate\",function(t){if(e.registerNewLocation(window.location)){var n=t.state||{},i=n.type,r=n.id,o=n.root,a=n.scroll,u=window.location.href;e.main.isConnected()&&\"patch\"===i&&r===e.main.id?e.main.pushLinkPatch(u,null):e.replaceMain(u,null,function(){o&&e.replaceRootHistory(),\"number\"==typeof a&&setTimeout(function(){window.scrollTo(0,a)},0)})}},!1),window.addEventListener(\"click\",function(t){var n=G(t.target,\"data-phx-link\"),i=n&&n.getAttribute(\"data-phx-link\"),r=t.metaKey||t.ctrlKey||1===t.button;if(i&&e.isConnected()&&e.main&&!r){var o=n.href,a=n.getAttribute(\"data-phx-link-state\");if(t.preventDefault(),e.pendingLink!==o)if(\"patch\"===i)e.pushHistoryPatch(o,a,n);else{if(\"redirect\"!==i)throw new Error(\"expected \".concat(\"data-phx-link\",' to be \"patch\" or \"redirect\", got: ').concat(i));e.historyRedirect(o,a)}}},!1)}}},{key:\"withPageLoading\",value:function(e,t){le.dispatchEvent(window,\"phx:page-loading-start\",e);var n=function(){return le.dispatchEvent(window,\"phx:page-loading-stop\",e)};return t?t(n):n}},{key:\"pushHistoryPatch\",value:function(e,t,n){var i=this;this.withPageLoading({to:e,kind:\"patch\"},function(r){i.main.pushLinkPatch(e,n,function(){i.historyPatch(e,t),r()})})}},{key:\"historyPatch\",value:function(e,t){ce.pushState(t,{type:\"patch\",id:this.main.id},e),this.registerNewLocation(window.location)}},{key:\"historyRedirect\",value:function(e,t,n){var i=this,r=window.scrollY;this.withPageLoading({to:e,kind:\"redirect\"},function(o){i.replaceMain(e,n,function(){ce.pushState(t,{type:\"redirect\",id:i.main.id,scroll:r},e),i.registerNewLocation(window.location),o()})})}},{key:\"replaceRootHistory\",value:function(){ce.pushState(\"replace\",{root:!0,type:\"patch\",id:this.main.id})}},{key:\"registerNewLocation\",value:function(e){var t=this.currentLocation;return t.pathname+t.search!==e.pathname+e.search&&(this.currentLocation=X(e),!0)}},{key:\"bindForms\",value:function(){var e=this,t=0;this.on(\"submit\",function(t){var n=t.target.getAttribute(e.binding(\"submit\"));n&&(t.preventDefault(),t.target.disabled=!0,e.withinOwners(t.target,function(e,i){return e.submitForm(t.target,i,n)}))},!1);for(var n=function(){var n=r[i];e.on(n,function(i){var r=i.target,o=r.form&&r.form.getAttribute(e.binding(\"change\"));if(o&&(\"number\"!==r.type||!r.validity||!r.validity.badInput)){var a=t;t++;var u=le.private(r,\"prev-iteration\")||{},s=u.at,c=u.type;s===a-1&&n!==c||(le.putPrivate(r,\"prev-iteration\",{at:a,type:n}),e.debounce(r,i,function(){e.withinOwners(r.form,function(t,n){le.putPrivate(r,\"phx-has-focused\",!0),le.isTextualInput(r)||e.setActiveElement(r),t.pushInput(r,n,o,i.target)})}))}},!1)},i=0,r=[\"change\",\"input\"];i<r.length;i++)n()}},{key:\"debounce\",value:function(e,t,n){var i=this.binding(\"debounce\"),r=this.binding(\"throttle\"),o=this.defaults.debounce.toString(),a=this.defaults.throttle.toString();le.debounce(e,t,i,o,r,a,n)}},{key:\"silenceEvents\",value:function(e){this.silenced=!0,e(),this.silenced=!1}},{key:\"on\",value:function(e,t){var n=this;window.addEventListener(e,function(e){n.silenced||t(e)})}}]),e}(),ce={canPushState:function(){return void 0!==history.pushState},dropLocal:function(e,t){return window.localStorage.removeItem(this.localKey(e,t))},updateLocal:function(e,t,n,i){var r=this.getLocal(e,t),o=this.localKey(e,t),a=null===r?n:i(r);return window.localStorage.setItem(o,JSON.stringify(a)),a},getLocal:function(e,t){return JSON.parse(window.localStorage.getItem(this.localKey(e,t)))},fetchPage:function(e,t){var n=new XMLHttpRequest;n.open(\"GET\",e,!0),n.timeout=3e4,n.setRequestHeader(\"content-type\",\"text/html\"),n.setRequestHeader(\"cache-control\",\"max-age=0, no-cache, no-store, must-revalidate, post-check=0, pre-check=0\"),n.setRequestHeader(\"x-requested-with\",\"live-link\"),n.onerror=function(){return t(400)},n.ontimeout=function(){return t(504)},n.onreadystatechange=function(){if(4===n.readyState){var i=new URL(e),r=i.pathname+i.search,o=Z(n.getResponseHeader(\"x-response-url\")||n.responseURL,function(e){return new URL(e)}),a=o?o.pathname+o.search:null;return\"live-link\"!==n.getResponseHeader(\"x-requested-with\")?t(400):null===o||a!=r?t(302):200!==n.status?t(n.status):void t(200,n.responseText)}},n.send()},updateCurrentState:function(e){this.canPushState()&&history.replaceState(e(history.state||{}),\"\",window.location.href)},pushState:function(e,t,n){if(this.canPushState()){if(n!==window.location.href){if(\"redirect\"==t.type&&t.scroll){var i=history.state||{};i.scroll=t.scroll,history.replaceState(i,\"\",window.location.href)}delete t.scroll,history[e+\"State\"](t,\"\",n||null);var r=this.getHashTargetEl(window.location.hash);r?r.scrollIntoView():\"redirect\"===t.type&&window.scroll(0,0)}}else this.redirect(n)},setCookie:function(e,t){document.cookie=\"\".concat(e,\"=\").concat(t)},getCookie:function(e){return document.cookie.replace(new RegExp(\"(?:(?:^|.*;s*)\".concat(e,\"s*=s*([^;]*).*$)|^.*$\")),\"$1\")},redirect:function(e,t){t&&ce.setCookie(\"__phoenix_flash__\",t+\"; max-age=60000; path=/\"),window.location=e},localKey:function(e,t){return\"\".concat(e,\"-\").concat(t)},getHashTargetEl:function(e){var t=e.toString().substring(1);if(\"\"!==t)return document.getElementById(t)||document.querySelector('a[name=\"'.concat(t,'\"]'))}},le={byId:function(e){return document.getElementById(e)||z(\"no id found for \".concat(e))},removeClass:function(e,t){e.classList.remove(t),0===e.classList.length&&e.removeAttribute(\"class\")},all:function(e,t,n){var i=Array.from(e.querySelectorAll(t));return n?i.forEach(n):i},findComponentNodeList:function(e,t){return this.filterWithinSameLiveView(this.all(e,\"[\".concat(j,'=\"').concat(t,'\"]')),e)},findPhxChildrenInFragment:function(e,t){var n=document.createElement(\"template\");return n.innerHTML=e,this.findPhxChildren(n.content,t)},isIgnored:function(e,t){return\"ignore\"===(e.getAttribute(t)||e.getAttribute(\"data-phx-update\"))},isPhxUpdate:function(e,t,n){return e.getAttribute&&n.indexOf(e.getAttribute(t))>=0},findPhxChildren:function(e,t){return this.all(e,\"\".concat(M,\"[\").concat(\"data-phx-parent-id\",'=\"').concat(t,'\"]'))},findParentCIDs:function(e,t){var n=this,i=new Set(t);return t.reduce(function(t,i){var r=\"[\".concat(j,'=\"').concat(i,'\"] [').concat(j,\"]\");return n.filterWithinSameLiveView(n.all(e,r),e).map(function(e){return parseInt(e.getAttribute(j))}).forEach(function(e){return t.delete(e)}),t},i)},filterWithinSameLiveView:function(e,t){var n=this;return t.querySelector(M)?e.filter(function(e){return n.withinSameLiveView(e,t)}):e},withinSameLiveView:function(e,t){for(;e=e.parentNode;){if(e.isSameNode(t))return!0;if(e.getAttribute(O))return!1}},private:function(e,t){return e.phxPrivate&&e.phxPrivate[t]},deletePrivate:function(e,t){e.phxPrivate&&delete e.phxPrivate[t]},putPrivate:function(e,t,n){e.phxPrivate||(e.phxPrivate={}),e.phxPrivate[t]=n},copyPrivates:function(e,t){t.phxPrivate&&(e.phxPrivate=X(t.phxPrivate))},putTitle:function(e){var t=document.querySelector(\"title\").dataset,n=t.prefix,i=t.suffix;document.title=\"\".concat(n||\"\").concat(e).concat(i||\"\")},debounce:function(e,t,n,i,r,o,a){var u=this,s=e.getAttribute(n),c=e.getAttribute(r);\"\"===s&&(s=i),\"\"===c&&(c=o);var l=s||c;switch(l){case null:return a();case\"blur\":return void(this.once(e,\"debounce-blur\")&&e.addEventListener(\"blur\",function(){return a()}));default:var d=parseInt(l),h=this.incCycle(e,\"debounce-trigger\",function(){return c?u.deletePrivate(e,\"throttled\"):a()});if(isNaN(d))return z(\"invalid throttle/debounce value: \".concat(l));if(c){var f=!1;if(\"keydown\"===t.type){var v=this.private(e,\"debounce-prev-key\");this.putPrivate(e,\"debounce-prev-key\",t.key),f=v!==t.key}if(!f&&this.private(e,\"throttled\"))return!1;a(),this.putPrivate(e,\"throttled\",!0),setTimeout(function(){return u.triggerCycle(e,\"debounce-trigger\")},d)}else setTimeout(function(){return u.triggerCycle(e,\"debounce-trigger\",h)},d);e.form&&this.once(e.form,\"bind-debounce\")&&e.form.addEventListener(\"submit\",function(t){Array.from(new FormData(e.form).entries(),function(t){var n=x(t,2),i=n[0],r=(n[1],e.form.querySelector('[name=\"'.concat(i,'\"]')));u.incCycle(r,\"debounce-trigger\"),u.deletePrivate(r,\"throttled\")})}),this.once(e,\"bind-debounce\")&&e.addEventListener(\"blur\",function(t){return u.triggerCycle(e,\"debounce-trigger\")})}},triggerCycle:function(e,t,n){var i=x(this.private(e,t),2),r=i[0],o=i[1];n||(n=r),n===r&&(this.incCycle(e,t),o())},once:function(e,t){return!0!==this.private(e,t)&&(this.putPrivate(e,t,!0),!0)},incCycle:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},i=x(this.private(e,t)||[0,n],2),r=i[0];i[1];return r++,this.putPrivate(e,t,[r,n]),r},discardError:function(e,t,n){var i=t.getAttribute&&t.getAttribute(n),r=i&&e.querySelector(\"#\".concat(i));r&&(this.private(r,\"phx-has-focused\")||this.private(r.form,\"phx-has-submitted\")||t.classList.add(\"phx-no-feedback\"))},isPhxChild:function(e){return e.getAttribute&&e.getAttribute(\"data-phx-parent-id\")},dispatchEvent:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=new CustomEvent(t,{bubbles:!0,cancelable:!0,detail:n});e.dispatchEvent(i)},cloneNode:function(e,t){if(void 0===t)return e.cloneNode(!0);var n=e.cloneNode(!1);return n.innerHTML=t,n},mergeAttrs:function(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=n.exclude||[],r=n.isIgnored,o=t.attributes,a=o.length-1;a>=0;a--){var u=o[a].name;i.indexOf(u)<0&&e.setAttribute(u,t.getAttribute(u))}for(var s=e.attributes,c=s.length-1;c>=0;c--){var l=s[c].name;r?l.startsWith(\"data-\")&&!t.hasAttribute(l)&&e.removeAttribute(l):t.hasAttribute(l)||e.removeAttribute(l)}},mergeFocusedInput:function(e,t){e instanceof HTMLSelectElement||le.mergeAttrs(e,t,{except:[\"value\"]}),t.readOnly?e.setAttribute(\"readonly\",!0):e.removeAttribute(\"readonly\")},hasSelectionRange:function(e){return e.setSelectionRange&&(\"text\"===e.type||\"textarea\"===e.type)},restoreFocus:function(e,t,n){if(le.isTextualInput(e)){var i=e.matches(\":focus\");e.readOnly&&e.blur(),i||e.focus(),this.hasSelectionRange(e)&&e.setSelectionRange(t,n)}},isFormInput:function(e){return/^(?:input|select|textarea)$/i.test(e.tagName)&&\"button\"!==e.type},syncAttrsToProps:function(e){e instanceof HTMLInputElement&&U.indexOf(e.type.toLocaleLowerCase())>=0&&(e.checked=null!==e.getAttribute(\"checked\"))},isTextualInput:function(e){return B.indexOf(e.type)>=0},isNowTriggerFormExternal:function(e,t){return e.getAttribute&&null!==e.getAttribute(t)},syncPendingRef:function(e,t,n){var i=e.getAttribute(F);return null===i||(le.isFormInput(e)||null!==e.getAttribute(n)?(\"file\"===e.type&&le.mergeAttrs(e,t,{isIgnored:!0}),le.putPrivate(e,F,t),!1):(H.forEach(function(n){e.classList.contains(n)&&t.classList.add(n)}),t.setAttribute(F,i),!0))},cleanChildNodes:function(e,t){if(le.isPhxUpdate(e,t,[\"append\",\"prepend\"])){var n=[];e.childNodes.forEach(function(e){e.id||(e.nodeType===Node.TEXT_NODE&&\"\"===e.nodeValue.trim()||z(\"only HTML element tags with an id are allowed inside containers with phx-update.\\n\\n\"+'removing illegal node: \"'.concat((e.outerHTML||e.nodeValue).trim(),'\"\\n\\n')),n.push(e))}),n.forEach(function(e){return e.remove()})}}},de=function(){function e(t,n,i){T(this,e);var r=new Set,o=new Set(E(n.children).map(function(e){return e.id})),a=[];Array.from(t.children).forEach(function(e){if(e.id&&(r.add(e.id),o.has(e.id))){var t=e.previousElementSibling&&e.previousElementSibling.id;a.push({elementId:e.id,previousElementId:t})}}),this.containerId=n.id,this.updateType=i,this.elementsToModify=a,this.elementIdsToAdd=E(o).filter(function(e){return!r.has(e)})}return D(e,[{key:\"perform\",value:function(){var e=le.byId(this.containerId);this.elementsToModify.forEach(function(t){t.previousElementId?Z(document.getElementById(t.previousElementId),function(e){Z(document.getElementById(t.elementId),function(t){t.previousElementSibling&&t.previousElementSibling.id==e.id||e.insertAdjacentElement(\"afterend\",t)})}):Z(document.getElementById(t.elementId),function(t){null==t.previousElementSibling||e.insertAdjacentElement(\"afterbegin\",t)})}),\"prepend\"==this.updateType&&this.elementIdsToAdd.reverse().forEach(function(t){Z(document.getElementById(t),function(t){return e.insertAdjacentElement(\"afterbegin\",t)})})}}]),e}(),he=function(){function e(t,n,i,r,o){T(this,e),this.view=t,this.liveSocket=t.liveSocket,this.container=n,this.id=i,this.rootID=t.root.id,this.html=r,this.targetCID=o,this.cidPatch=\"number\"==typeof this.targetCID,this.callbacks={beforeadded:[],beforeupdated:[],beforediscarded:[],beforephxChildAdded:[],afteradded:[],afterupdated:[],afterdiscarded:[],afterphxChildAdded:[]}}return D(e,null,[{key:\"patchEl\",value:function(e,t,n){b(e,t,{childrenOnly:!1,onBeforeElUpdated:function(e,t){if(n&&n.isSameNode(e)&&le.isFormInput(e))return le.mergeFocusedInput(e,t),!1}})}}]),D(e,[{key:\"before\",value:function(e,t){this.callbacks[\"before\".concat(e)].push(t)}},{key:\"after\",value:function(e,t){this.callbacks[\"after\".concat(e)].push(t)}},{key:\"trackBefore\",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];this.callbacks[\"before\".concat(e)].forEach(function(e){return e.apply(void 0,n)})}},{key:\"trackAfter\",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];this.callbacks[\"after\".concat(e)].forEach(function(e){return e.apply(void 0,n)})}},{key:\"markPrunableContentForRemoval\",value:function(){le.all(this.container,\"[phx-update=append] > *, [phx-update=prepend] > *\",function(e){e.setAttribute(\"data-phx-remove\",\"\")})}},{key:\"perform\",value:function(){var e=this,t=this.view,n=this.liveSocket,i=this.container,r=this.html,o=this.isCIDPatch()?this.targetCIDContainer():i;if(!this.isCIDPatch()||o){var a=n.getActiveElement(),u=a&&le.hasSelectionRange(a)?a:{},s=u.selectionStart,c=u.selectionEnd,l=n.binding(\"update\"),d=n.binding(\"feedback-for\"),h=n.binding(\"disable-with\"),f=n.binding(\"trigger-action\"),v=[],p=[],g=[],m=null,y=n.time(\"premorph container prep\",function(){return e.buildDiffHTML(i,r,l,o)});return this.trackBefore(\"added\",i),this.trackBefore(\"updated\",i,i),n.time(\"morphdom\",function(){b(o,y,{childrenOnly:null===o.getAttribute(j),onBeforeNodeAdded:function(t){return le.discardError(o,t,d),e.trackBefore(\"added\",t),t},onNodeAdded:function(n){le.isNowTriggerFormExternal(n,f)&&(m=n),le.isPhxChild(n)&&t.ownsElement(n)&&e.trackAfter(\"phxChildAdded\",n),v.push(n)},onNodeDiscarded:function(t){le.isPhxChild(t)&&n.destroyViewByEl(t),e.trackAfter(\"discarded\",t)},onBeforeNodeDiscarded:function(t){return!(!t.getAttribute||null===t.getAttribute(\"data-phx-remove\"))||(null===t.parentNode||!le.isPhxUpdate(t.parentNode,l,[\"append\",\"prepend\"])||!t.id)&&(!e.skipCIDSibling(t)&&(e.trackBefore(\"discarded\",t),!0))},onElUpdated:function(e){le.isNowTriggerFormExternal(e,f)&&(m=e),p.push(e)},onBeforeElUpdated:function(t,n){if(le.cleanChildNodes(n,l),e.skipCIDSibling(n))return!1;if(le.isIgnored(t,l))return e.trackBefore(\"updated\",t,n),le.mergeAttrs(t,n,{isIgnored:!0}),p.push(t),!1;if(\"number\"===t.type&&t.validity&&t.validity.badInput)return!1;if(!le.syncPendingRef(t,n,h))return\"file\"===t.type&&(e.trackBefore(\"updated\",t,n),p.push(t)),!1;if(le.isPhxChild(n)){var i=t.getAttribute(J);return le.mergeAttrs(t,n),t.setAttribute(J,i),t.setAttribute(\"data-phx-root-id\",e.rootID),!1}return le.copyPrivates(n,t),le.discardError(o,n,d),a&&t.isSameNode(a)&&le.isFormInput(t)&&!e.forceFocusedSelectUpdate(t,n)?(e.trackBefore(\"updated\",t,n),le.mergeFocusedInput(t,n),le.syncAttrsToProps(t),p.push(t),!1):(le.isPhxUpdate(n,l,[\"append\",\"prepend\"])&&g.push(new de(t,n,n.getAttribute(l))),le.syncAttrsToProps(n),e.trackBefore(\"updated\",t,n),!0)}})}),n.isDebugEnabled()&&function(){for(var e=new Set,t=document.querySelectorAll(\"*[id]\"),n=0,i=t.length;n<i;n++)e.has(t[n].id)?console.error(\"Multiple IDs detected: \".concat(t[n].id,\". Ensure unique element ids.\")):e.add(t[n].id)}(),g.length>0&&n.time(\"post-morph append/prepend restoration\",function(){g.forEach(function(e){return e.perform()})}),n.silenceEvents(function(){return le.restoreFocus(a,s,c)}),le.dispatchEvent(document,\"phx:update\"),v.forEach(function(t){return e.trackAfter(\"added\",t)}),p.forEach(function(t){return e.trackAfter(\"updated\",t)}),m&&(n.disconnect(),m.submit()),!0}}},{key:\"forceFocusedSelectUpdate\",value:function(e,t){return!0===e.multiple||e.innerHTML!=t.innerHTML}},{key:\"isCIDPatch\",value:function(){return this.cidPatch}},{key:\"skipCIDSibling\",value:function(e){return e.nodeType===Node.ELEMENT_NODE&&null!==e.getAttribute(\"data-phx-skip\")}},{key:\"targetCIDContainer\",value:function(){if(this.isCIDPatch()){var e=k(le.findComponentNodeList(this.container,this.targetCID)),t=e[0];return 0===e.slice(1).length?t:t&&t.parentNode}}},{key:\"buildDiffHTML\",value:function(e,t,n,i){var r=this,o=this.isCIDPatch(),a=o&&i.getAttribute(j)===this.targetCID.toString();if(!o||a)return t;var u=null,s=document.createElement(\"template\");u=le.cloneNode(i);var c=k(le.findComponentNodeList(u,this.targetCID)),l=c[0],d=c.slice(1);return s.innerHTML=t,d.forEach(function(e){return e.remove()}),Array.from(u.childNodes).forEach(function(e){e.id&&e.nodeType===Node.ELEMENT_NODE&&e.getAttribute(j)!==r.targetCID.toString()&&(e.setAttribute(\"data-phx-skip\",\"\"),e.innerHTML=\"\")}),Array.from(s.content.childNodes).forEach(function(e){return u.insertBefore(e,l)}),l.remove(),u.outerHTML}}]),e}(),fe=function(){function e(t,n,i,r,o){var a=this;T(this,e),this.liveSocket=n,this.flash=o,this.parent=i,this.root=i?i.root:this,this.el=t,this.id=this.el.id,this.view=this.el.getAttribute(O),this.ref=0,this.childJoins=0,this.loaderTimer=null,this.pendingDiffs=[],this.pruningCIDs=[],this.href=r,this.joinCount=this.parent?this.parent.joinCount-1:0,this.joinPending=!0,this.destroyed=!1,this.joinCallback=function(){},this.stopCallback=function(){},this.pendingJoinOps=this.parent?null:[],this.viewHooks={},this.uploaders={},this.formSubmits=[],this.children=this.parent?null:{},this.root.children[this.id]={},this.channel=this.liveSocket.channel(\"lv:\".concat(this.id),function(){return{url:a.href,params:a.connectParams(),session:a.getSession(),static:a.getStatic(),flash:a.flash}}),this.showLoader(this.liveSocket.loaderTimeout),this.bindChannel()}return D(e,[{key:\"isMain\",value:function(){return this.liveSocket.main===this}},{key:\"connectParams\",value:function(){var e=this.liveSocket.params(this.view),t=le.all(document,\"[\".concat(this.binding(\"track-static\"),\"]\")).map(function(e){return e.src||e.href}).filter(function(e){return\"string\"==typeof e});return t.length>0&&(e._track_static=t),e._mounts=this.joinCount,e}},{key:\"name\",value:function(){return this.view}},{key:\"isConnected\",value:function(){return this.channel.canPush()}},{key:\"getSession\",value:function(){return this.el.getAttribute(\"data-phx-session\")}},{key:\"getStatic\",value:function(){var e=this.el.getAttribute(J);return\"\"===e?null:e}},{key:\"destroy\",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};this.destroyAllChildren(),this.destroyed=!0,delete this.root.children[this.id],this.parent&&delete this.root.children[this.parent.id][this.id],clearTimeout(this.loaderTimer);var n=function(){for(var n in t(),e.viewHooks)e.viewHooks[n].__trigger__(\"beforeDestroy\"),e.destroyHook(e.viewHooks[n])};this.log(\"destroyed\",function(){return[\"the child has been removed from the parent\"]}),this.channel.leave().receive(\"ok\",n).receive(\"error\",n).receive(\"timeout\",n)}},{key:\"setContainerClasses\",value:function(){var e;this.el.classList.remove(\"phx-connected\",\"phx-disconnected\",\"phx-error\"),(e=this.el.classList).add.apply(e,arguments)}},{key:\"isLoading\",value:function(){return this.el.classList.contains(\"phx-disconnected\")}},{key:\"showLoader\",value:function(e){var t=this;if(clearTimeout(this.loaderTimer),e)this.loaderTimer=setTimeout(function(){return t.showLoader()},e);else{for(var n in this.viewHooks)this.viewHooks[n].__trigger__(\"disconnected\");this.setContainerClasses(\"phx-disconnected\")}}},{key:\"hideLoader\",value:function(){clearTimeout(this.loaderTimer),this.setContainerClasses(\"phx-connected\")}},{key:\"triggerReconnected\",value:function(){for(var e in this.viewHooks)this.viewHooks[e].__trigger__(\"reconnected\")}},{key:\"log\",value:function(e,t){this.liveSocket.log(this,e,t)}},{key:\"withinTargets\",value:function(e,t){var n=this;if(/^(0|[1-9]\\d*)$/.test(e)){var i=le.findComponentNodeList(this.el,e);0===i.length?z(\"no component found matching phx-target of \".concat(e)):t(this,i[0])}else{var r=Array.from(document.querySelectorAll(e));0===r.length&&z('nothing found matching the phx-target selector \"'.concat(e,'\"')),r.forEach(function(e){return n.liveSocket.owner(e,function(n){return t(n,e)})})}}},{key:\"applyDiff\",value:function(e,t,n){this.log(e,function(){return[\"\",X(t)]});var i=ue.extract(t),r=i.diff,o=i.reply,a=i.events,u=i.title;return u&&le.putTitle(u),n({diff:r,reply:o,events:a}),o}},{key:\"onJoin\",value:function(e){var t=this,n=e.rendered;this.childJoins=0,this.joinPending=!0,this.flash=null,ce.dropLocal(this.name(),\"consecutive-reloads\"),this.applyDiff(\"mount\",n,function(n){var i=n.diff,r=n.events;t.rendered=new ue(t.id,i);var o=t.renderContainer(null,\"join\");t.dropPendingRefs();var a=t.formsForRecovery(o);t.joinCount++,a.length>0?a.forEach(function(e,n){t.pushFormRecovery(e,function(e){n===a.length-1&&t.onJoinComplete(e,o,r)})}):t.onJoinComplete(e,o,r)})}},{key:\"dropPendingRefs\",value:function(){le.all(this.el,\"[\".concat(F,\"]\"),function(e){return e.removeAttribute(F)})}},{key:\"onJoinComplete\",value:function(e,t,n){var i=this,r=e.live_patch;if(this.joinCount>1||this.parent&&!this.parent.isJoinPending())return this.applyJoinPatch(r,t,n);0===le.findPhxChildrenInFragment(t,this.id).filter(function(e){var t=e.id&&i.el.querySelector(\"#\".concat(e.id)),n=t&&t.getAttribute(J);return n&&e.setAttribute(J,n),i.joinChild(e)}).length?this.parent?(this.root.pendingJoinOps.push([this,function(){return i.applyJoinPatch(r,t,n)}]),this.parent.ackJoin(this)):(this.onAllChildJoinsComplete(),this.applyJoinPatch(r,t,n)):this.root.pendingJoinOps.push([this,function(){return i.applyJoinPatch(r,t,n)}])}},{key:\"attachTrueDocEl\",value:function(){this.el=le.byId(this.id),this.el.setAttribute(\"data-phx-root-id\",this.root.id)}},{key:\"dispatchEvents\",value:function(e){e.forEach(function(e){var t=x(e,2),n=t[0],i=t[1];window.dispatchEvent(new CustomEvent(\"phx:hook:\".concat(n),{detail:i}))})}},{key:\"applyJoinPatch\",value:function(e,t,n){var i=this;this.attachTrueDocEl();var r=new he(this,this.el,this.id,t,null);if(r.markPrunableContentForRemoval(),this.performPatch(r,!1),this.joinNewChildren(),le.all(this.el,\"[\".concat(this.binding(\"hook\"),\"], [data-phx-\").concat(\"hook\",\"]\"),function(e){var t=i.addHook(e);t&&t.__trigger__(\"mounted\")}),this.joinPending=!1,this.dispatchEvents(n),this.applyPendingUpdates(),e){var o=e.kind,a=e.to;this.liveSocket.historyPatch(a,o)}this.hideLoader(),this.joinCount>1&&this.triggerReconnected(),this.stopCallback()}},{key:\"triggerBeforeUpdateHook\",value:function(e,t){this.liveSocket.triggerDOM(\"onBeforeElUpdated\",[e,t]);var n=this.getHook(e),i=n&&le.isIgnored(e,this.binding(\"update\"));if(n&&!e.isEqualNode(t)&&(!i||!function(e,t){return JSON.stringify(e)===JSON.stringify(t)}(e.dataset,t.dataset)))return n.__trigger__(\"beforeUpdate\"),n}},{key:\"triggerUpdatedHook\",value:function(e){e.__trigger__(\"updated\")}},{key:\"performPatch\",value:function(e,t){var n=this,i=[],r=!1,o=new Set;return e.after(\"added\",function(e){n.liveSocket.triggerDOM(\"onNodeAdded\",[e]);var t=n.addHook(e);t&&t.__trigger__(\"mounted\")}),e.after(\"phxChildAdded\",function(e){return r=!0}),e.before(\"updated\",function(e,t){n.triggerBeforeUpdateHook(e,t)&&o.add(e.id)}),e.after(\"updated\",function(e){o.has(e.id)&&n.triggerUpdatedHook(n.getHook(e))}),e.before(\"discarded\",function(e){var t=n.getHook(e);t&&t.__trigger__(\"beforeDestroy\")}),e.after(\"discarded\",function(e){var t=n.componentID(e);\"number\"==typeof t&&-1===i.indexOf(t)&&i.push(t);var r=n.getHook(e);r&&n.destroyHook(r)}),e.perform(),t&&this.maybePushComponentsDestroyed(i),r}},{key:\"joinNewChildren\",value:function(){var e=this;le.findPhxChildren(this.el,this.id).forEach(function(t){return e.joinChild(t)})}},{key:\"getChildById\",value:function(e){return this.root.children[this.id][e]}},{key:\"getDescendentByEl\",value:function(e){return e.id===this.id?this:this.children[e.getAttribute(\"data-phx-parent-id\")][e.id]}},{key:\"destroyDescendent\",value:function(e){for(var t in this.root.children)for(var n in this.root.children[t])if(n===e)return this.root.children[t][n].destroy()}},{key:\"joinChild\",value:function(t){if(!this.getChildById(t.id)){var n=new e(t,this.liveSocket,this);return this.root.children[this.id][n.id]=n,n.join(),this.childJoins++,!0}}},{key:\"isJoinPending\",value:function(){return this.joinPending}},{key:\"ackJoin\",value:function(e){this.childJoins--,0===this.childJoins&&(this.parent?this.parent.ackJoin(this):this.onAllChildJoinsComplete())}},{key:\"onAllChildJoinsComplete\",value:function(){this.joinCallback(),this.pendingJoinOps.forEach(function(e){var t=x(e,2),n=t[0],i=t[1];n.isDestroyed()||i()}),this.pendingJoinOps=[]}},{key:\"update\",value:function(e,t){var n=this;if(this.isJoinPending()||this.liveSocket.hasPendingLink())return this.pendingDiffs.push({diff:e,events:t});this.rendered.mergeDiff(e);var i=!1;this.rendered.isComponentOnlyDiff(e)?this.liveSocket.time(\"component patch complete\",function(){le.findParentCIDs(n.el,n.rendered.componentCIDs(e)).forEach(function(t){n.componentPatch(n.rendered.getComponent(e,t),t)&&(i=!0)})}):Q(e)||this.liveSocket.time(\"full patch complete\",function(){var t=n.renderContainer(e,\"update\"),r=new he(n,n.el,n.id,t,null);i=n.performPatch(r,!0)}),this.dispatchEvents(t),i&&this.joinNewChildren()}},{key:\"renderContainer\",value:function(e,t){var n=this;return this.liveSocket.time(\"toString diff (\".concat(t,\")\"),function(){var t=n.el.tagName,i=e?n.rendered.componentCIDs(e).concat(n.pruningCIDs):null,r=n.rendered.toString(i);return\"<\".concat(t,\">\").concat(r,\"</\").concat(t,\">\")})}},{key:\"componentPatch\",value:function(e,t){if(Q(e))return!1;var n=this.rendered.componentToString(t),i=new he(this,this.el,this.id,n,t);return this.performPatch(i,!0)}},{key:\"getHook\",value:function(e){return this.viewHooks[pe.elementID(e)]}},{key:\"addHook\",value:function(e){if(!pe.elementID(e)&&e.getAttribute){var t=e.getAttribute(\"data-phx-\".concat(\"hook\"))||e.getAttribute(this.binding(\"hook\"));if(!t||this.ownsElement(e)){var n=this.liveSocket.getHookCallbacks(t);if(n){e.id||z('no DOM ID for hook \"'.concat(t,'\". Hooks require a unique ID on each element.'),e);var i=new pe(this,e,n);return this.viewHooks[pe.elementID(i.el)]=i,i}null!==t&&z('unknown hook found for \"'.concat(t,'\"'),e)}}}},{key:\"destroyHook\",value:function(e){e.__trigger__(\"destroyed\"),e.__cleanup__(),delete this.viewHooks[pe.elementID(e.el)]}},{key:\"applyPendingUpdates\",value:function(){var e=this;this.pendingDiffs.forEach(function(t){var n=t.diff,i=t.events;return e.update(n,i)}),this.pendingDiffs=[]}},{key:\"onChannel\",value:function(e,t){var n=this;this.liveSocket.onChannel(this.channel,e,function(e){n.isJoinPending()?n.root.pendingJoinOps.push([n,function(){return t(e)}]):t(e)})}},{key:\"bindChannel\",value:function(){var e=this;this.liveSocket.onChannel(this.channel,\"diff\",function(t){e.applyDiff(\"update\",t,function(t){var n=t.diff,i=t.events;return e.update(n,i)})}),this.onChannel(\"redirect\",function(t){var n=t.to,i=t.flash;return e.onRedirect({to:n,flash:i})}),this.onChannel(\"live_patch\",function(t){return e.onLivePatch(t)}),this.onChannel(\"live_redirect\",function(t){return e.onLiveRedirect(t)}),this.channel.onError(function(t){return e.onError(t)}),this.channel.onClose(function(t){return e.onClose(t)})}},{key:\"destroyAllChildren\",value:function(){for(var e in this.root.children[this.id])this.getChildById(e).destroy()}},{key:\"onLiveRedirect\",value:function(e){var t=e.to,n=e.kind,i=e.flash,r=this.expandURL(t);this.liveSocket.historyRedirect(r,n,i)}},{key:\"onLivePatch\",value:function(e){var t=e.to,n=e.kind;this.href=this.expandURL(t),this.liveSocket.historyPatch(t,n)}},{key:\"expandURL\",value:function(e){return e.startsWith(\"/\")?\"\".concat(window.location.protocol,\"//\").concat(window.location.host).concat(e):e}},{key:\"onRedirect\",value:function(e){var t=e.to,n=e.flash;this.liveSocket.redirect(t,n)}},{key:\"isDestroyed\",value:function(){return this.destroyed}},{key:\"join\",value:function(e){var t=this;this.parent||(this.stopCallback=this.liveSocket.withPageLoading({to:this.href,kind:\"initial\"})),this.joinCallback=function(){return e&&e(t,t.joinCount)},this.liveSocket.wrapPush(this,{timeout:!1},function(){return t.channel.join().receive(\"ok\",function(e){return t.onJoin(e)}).receive(\"error\",function(e){return t.onJoinError(e)}).receive(\"timeout\",function(){return t.onJoinError({reason:\"timeout\"})})})}},{key:\"onJoinError\",value:function(e){return(e.redirect||e.live_redirect)&&(this.joinPending=!1,this.channel.leave()),e.redirect?this.onRedirect(e.redirect):e.live_redirect?this.onLiveRedirect(e.live_redirect):(this.log(\"error\",function(){return[\"unable to join\",e]}),this.liveSocket.reloadWithJitter(this))}},{key:\"onClose\",value:function(e){if(!this.isDestroyed()){if(this.isJoinPending()||this.liveSocket.hasPendingLink()&&\"leave\"!==e)return this.liveSocket.reloadWithJitter(this);this.destroyAllChildren(),this.liveSocket.dropActiveElement(this),document.activeElement&&document.activeElement.blur(),this.liveSocket.isUnloaded()&&this.showLoader(200)}}},{key:\"onError\",value:function(e){this.onClose(e),this.log(\"error\",function(){return[\"view crashed\",e]}),this.liveSocket.isUnloaded()||this.displayError()}},{key:\"displayError\",value:function(){this.isMain()&&le.dispatchEvent(window,\"phx:page-loading-start\",{to:this.href,kind:\"error\"}),this.showLoader(),this.setContainerClasses(\"phx-disconnected\",\"phx-error\")}},{key:\"pushWithReply\",value:function(e,t,n){var i=this,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},o=x(e?e():[null,[]],2),a=o[0],u=x(o[1],1)[0],s=function(){};return u&&null!==u.getAttribute(this.binding(\"page-loading\"))&&(s=this.liveSocket.withPageLoading({kind:\"element\",target:u})),\"number\"!=typeof n.cid&&delete n.cid,this.liveSocket.wrapPush(this,{timeout:!0},function(){return i.channel.push(t,n,3e4).receive(\"ok\",function(e){var t=null;null!==a&&i.undoRefs(a),e.diff&&(t=i.applyDiff(\"update\",e.diff,function(e){var t=e.diff,n=e.events;i.update(t,n)})),e.redirect&&i.onRedirect(e.redirect),e.live_patch&&i.onLivePatch(e.live_patch),e.live_redirect&&i.onLiveRedirect(e.live_redirect),s(),r(e,t)})})}},{key:\"undoRefs\",value:function(e){var t=this;le.all(this.el,\"[\".concat(F,'=\"').concat(e,'\"]'),function(e){e.removeAttribute(F),null!==e.getAttribute(\"data-phx-readonly\")&&(e.readOnly=!1,e.removeAttribute(\"data-phx-readonly\")),null!==e.getAttribute(\"data-phx-disabled\")&&(e.disabled=!1,e.removeAttribute(\"data-phx-disabled\")),H.forEach(function(t){return le.removeClass(e,t)});var n=e.getAttribute(\"data-phx-disable-with-restore\");null!==n&&(e.innerText=n,e.removeAttribute(\"data-phx-disable-with-restore\"));var i=le.private(e,F);if(i){var r=t.triggerBeforeUpdateHook(e,i);he.patchEl(e,i,t.liveSocket.getActiveElement()),r&&t.triggerUpdatedHook(r),le.deletePrivate(e,F)}})}},{key:\"putRef\",value:function(e,t){var n=this.ref++,i=this.binding(\"disable-with\");return e.forEach(function(e){e.classList.add(\"phx-\".concat(t,\"-loading\")),e.setAttribute(F,n);var r=e.getAttribute(i);null!==r&&(e.getAttribute(\"data-phx-disable-with-restore\")||e.setAttribute(\"data-phx-disable-with-restore\",e.innerText),e.innerText=r)}),[n,e]}},{key:\"componentID\",value:function(e){var t=e.getAttribute&&e.getAttribute(j);return t?parseInt(t):null}},{key:\"targetComponentID\",value:function(e,t){return e.getAttribute(this.binding(\"target\"))?this.closestComponentID(t):null}},{key:\"closestComponentID\",value:function(e){var t=this;return e?Z(e.closest(\"[\".concat(j,\"]\")),function(e){return t.ownsElement(e)&&t.componentID(e)}):null}},{key:\"pushHookEvent\",value:function(e,t,n,i){var r=x(this.putRef([],\"hook\"),2),o=r[0],a=r[1];return this.pushWithReply(function(){return[o,a]},\"event\",{type:\"hook\",event:t,value:n,cid:this.closestComponentID(e)},function(e,t){return i(t,o)}),o}},{key:\"extractMeta\",value:function(e,t){for(var n=this.binding(\"value-\"),i=0;i<e.attributes.length;i++){var r=e.attributes[i].name;r.startsWith(n)&&(t[r.replace(n,\"\")]=e.getAttribute(r))}return void 0!==e.value&&(t.value=e.value,\"INPUT\"===e.tagName&&U.indexOf(e.type)>=0&&!e.checked&&delete t.value),t}},{key:\"pushEvent\",value:function(e,t,n,i,r){var o=this;this.pushWithReply(function(){return o.putRef([t],e)},\"event\",{type:e,event:i,value:this.extractMeta(t,r),cid:this.targetComponentID(t,n)})}},{key:\"pushKey\",value:function(e,t,n,i,r){var o=this;this.pushWithReply(function(){return o.putRef([e],n)},\"event\",{type:n,event:i,value:this.extractMeta(e,r),cid:this.targetComponentID(e,t)})}},{key:\"pushFileProgress\",value:function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){};this.liveSocket.withinOwners(e.form,function(r,o){r.pushWithReply(null,\"progress\",{event:e.getAttribute(r.binding(\"progress\")),ref:e.getAttribute(\"data-phx-upload-ref\"),entry_ref:t,progress:n,cid:r.targetComponentID(e.form,o)},i)})}},{key:\"pushInput\",value:function(e,t,n,i,r){var o=this,a=this.targetComponentID(e.form,t),u=function(){return o.putRef([e,e.form],\"change\")},s=ae(e.form,{_target:i.name});e.files&&e.files.length>0&&ie.trackFiles(e,Array.from(e.files));var c={type:\"form\",event:n,value:s,uploads:ie.serializeUploads(e),cid:a};this.pushWithReply(u,\"event\",c,function(n){if(\"file\"===e.type&&null!==e.getAttribute(\"data-phx-auto-upload\")){if(ie.filesAwaitingPreflight(e).length>0){var i=x(u(),2),s=i[0];i[1];o.uploadFiles(e.form,t,s,a,function(t){r&&r(n),o.triggerAwaitingSubmit(e.form)})}}else r&&r(n)})}},{key:\"triggerAwaitingSubmit\",value:function(e){var t=this.getScheduledSubmit(e);if(t){var n=x(t,3),i=(n[0],n[1],n[2]);this.cancelSubmit(e),i()}}},{key:\"getScheduledSubmit\",value:function(e){return this.formSubmits.find(function(t){var n=x(t,2),i=n[0];n[1];return i.isSameNode(e)})}},{key:\"scheduleSubmit\",value:function(e,t,n){if(this.getScheduledSubmit(e))return!0;this.formSubmits.push([e,t,n])}},{key:\"cancelSubmit\",value:function(e){var t=this;this.formSubmits=this.formSubmits.filter(function(n){var i=x(n,3),r=i[0],o=i[1];i[2];return!r.isSameNode(e)||(t.undoRefs(o),!1)})}},{key:\"pushFormSubmit\",value:function(e,t,n,i){var r=this,o=function(e){return!(G(e,\"\".concat(r.binding(\"update\"),\"=ignore\"),e.form)||G(e,\"data-phx-update=ignore\",e.form))},a=function(){var t=le.all(e,\"[\".concat(r.binding(\"disable-with\"),\"]\")),n=le.all(e,\"button\").filter(o),i=le.all(e,\"input,textarea,select\").filter(o);return n.forEach(function(e){e.setAttribute(\"data-phx-disabled\",e.disabled),e.disabled=!0}),i.forEach(function(e){e.setAttribute(\"data-phx-readonly\",e.readOnly),e.readOnly=!0,e.files&&(e.setAttribute(\"data-phx-disabled\",e.disabled),e.disabled=!0)}),e.setAttribute(r.binding(\"page-loading\"),\"\"),r.putRef([e].concat(t).concat(n).concat(i),\"submit\")},u=this.targetComponentID(e,t);if(ie.hasUploadsInProgress(e)){var s=x(a(),2),c=s[0];s[1];return this.scheduleSubmit(e,c,function(){return r.pushFormSubmit(e,t,n,i)})}if(ie.inputsAwaitingPreflight(e).length>0){var l=x(a(),2),d=l[0],h=l[1],f=function(){return[d,h]};this.uploadFiles(e,t,d,u,function(t){var o=ae(e,{});r.pushWithReply(f,\"event\",{type:\"form\",event:n,value:o,cid:u},i)})}else{var v=ae(e);this.pushWithReply(a,\"event\",{type:\"form\",event:n,value:v,cid:u},i)}}},{key:\"uploadFiles\",value:function(e,t,n,i,r){var o=this,a=this.joinCount;ie.activeFileInputs(e).forEach(function(e){var i=new ie(e,o,r);o.uploaders[e]=i;var u=i.entries().map(function(e){return e.toPreflightPayload()}),s={ref:e.getAttribute(\"data-phx-upload-ref\"),entries:u,cid:o.targetComponentID(e.form,t)};o.log(\"upload\",function(){return[\"sending preflight request\",s]}),o.pushWithReply(null,\"allow_upload\",s,function(e){if(o.log(\"upload\",function(){return[\"got preflight response\",e]}),e.error){o.undoRefs(n);var t=x(e.error,2),r=t[0],u=t[1];o.log(\"upload\",function(){return[\"error for entry \".concat(r),u]})}else{i.initAdapterUpload(e,function(e){o.channel.onError(function(){o.joinCount===a&&e()})},o.liveSocket)}})})}},{key:\"pushFormRecovery\",value:function(e,t){var n=this;this.liveSocket.withinOwners(e,function(i,r){var o=e.elements[0],a=e.getAttribute(n.binding(\"auto-recover\"))||e.getAttribute(n.binding(\"change\"));i.pushInput(o,r,a,o,t)})}},{key:\"pushLinkPatch\",value:function(e,t,n){var i=this,r=this.liveSocket.setPendingLink(e),o=t?function(){return i.putRef([t],\"click\")}:null;this.pushWithReply(o,\"link\",{url:e},function(t){t.link_redirect?i.liveSocket.replaceMain(e,null,n,r):i.liveSocket.commitPendingLink(r)&&(i.href=e,i.applyPendingUpdates(),n&&n())}).receive(\"timeout\",function(){return i.liveSocket.redirect(window.location.href)})}},{key:\"formsForRecovery\",value:function(e){var t=this;if(this.joinCount<=1)return[];var n=this.binding(\"change\"),i=document.createElement(\"template\");return i.innerHTML=e,le.all(this.el,\"form[\".concat(n,\"]\")).filter(function(e){return t.ownsElement(e)}).filter(function(e){return e.elements.length>0}).filter(function(e){return\"ignore\"!==e.getAttribute(t.binding(\"auto-recover\"))}).filter(function(e){return i.content.querySelector(\"form[\".concat(n,'=\"').concat(e.getAttribute(n),'\"]'))})}},{key:\"maybePushComponentsDestroyed\",value:function(e){var t,n=this,i=e.filter(function(e){return 0===le.findComponentNodeList(n.el,e).length});i.length>0&&((t=this.pruningCIDs).push.apply(t,E(i)),this.pushWithReply(null,\"cids_will_destroy\",{cids:i},function(){n.pruningCIDs=n.pruningCIDs.filter(function(e){return-1!==i.indexOf(e)});var e=i.filter(function(e){return 0===le.findComponentNodeList(n.el,e).length});e.length>0&&n.pushWithReply(null,\"cids_destroyed\",{cids:e},function(e){n.rendered.pruneCIDs(e.cids)})}))}},{key:\"ownsElement\",value:function(e){return e.getAttribute(\"data-phx-parent-id\")===this.id||Z(e.closest(M),function(e){return e.id})===this.id}},{key:\"submitForm\",value:function(e,t,n){var i=this;le.putPrivate(e,\"phx-has-submitted\",!0),this.liveSocket.blurActiveElement(this),this.pushFormSubmit(e,t,n,function(){i.liveSocket.restorePreviouslyActiveFocus()})}},{key:\"binding\",value:function(e){return this.liveSocket.binding(e)}}]),e}(),ve=1,pe=function(){function e(t,n,i){for(var r in T(this,e),this.__view=t,this.__liveSocket=t.liveSocket,this.__callbacks=i,this.__listeners=new Set,this.el=n,this.viewName=t.name(),this.el.phxHookId=this.constructor.makeID(),this.__callbacks)this[r]=this.__callbacks[r]}return D(e,null,[{key:\"makeID\",value:function(){return ve++}},{key:\"elementID\",value:function(e){return e.phxHookId}}]),D(e,[{key:\"pushEvent\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){};return this.__view.pushHookEvent(null,e,t,n)}},{key:\"pushEventTo\",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){};return this.__view.withinTargets(e,function(e,r){return e.pushHookEvent(r,t,n,i)})}},{key:\"handleEvent\",value:function(e,t){var n=function(n,i){return i?e:t(n.detail)};return window.addEventListener(\"phx:hook:\".concat(e),n),this.__listeners.add(n),n}},{key:\"removeHandleEvent\",value:function(e){var t=e(null,!0);window.removeEventListener(\"phx:hook:\".concat(t),e),this.__listeners.delete(e)}},{key:\"__cleanup__\",value:function(){var e=this;this.__listeners.forEach(function(t){return e.removeHandleEvent(t)})}},{key:\"__trigger__\",value:function(e){var t=this.__callbacks[e];t&&t.call(this)}}]),e}();t.default=se},function(e,t){var n;n=function(){return this}();try{n=n||Function(\"return this\")()||(0,eval)(\"this\")}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(t){t.Phoenix||(t.Phoenix={}),e.exports=t.Phoenix.LiveView=n(0)}).call(this,n(1))}])});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGhvZW5peF9saXZlX3ZpZXcvcHJpdi9zdGF0aWMvcGhvZW5peF9saXZlX3ZpZXcuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGhvZW5peF9saXZlX3ZpZXcvcHJpdi9zdGF0aWMvcGhvZW5peF9saXZlX3ZpZXcuanM/ZTU0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLnBob2VuaXhfbGl2ZV92aWV3PXQoKTplLnBob2VuaXhfbGl2ZV92aWV3PXQoKX0odGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBuKGkpe2lmKHRbaV0pcmV0dXJuIHRbaV0uZXhwb3J0czt2YXIgcj10W2ldPXtpOmksbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtpXS5jYWxsKHIuZXhwb3J0cyxyLHIuZXhwb3J0cyxuKSxyLmw9ITAsci5leHBvcnRzfXJldHVybiBuLm09ZSxuLmM9dCxuLmQ9ZnVuY3Rpb24oZSx0LGkpe24ubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6aX0pfSxuLnI9ZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsXCJhXCIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9XCJcIixuKG4ucz0yKX0oW2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtuLnIodCk7dmFyIGkscj0xMTt2YXIgbz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixhPVwidW5kZWZpbmVkXCI9PXR5cGVvZiBkb2N1bWVudD92b2lkIDA6ZG9jdW1lbnQsdT0hIWEmJlwiY29udGVudFwiaW4gYS5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIikscz0hIWEmJmEuY3JlYXRlUmFuZ2UmJlwiY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50XCJpbiBhLmNyZWF0ZVJhbmdlKCk7ZnVuY3Rpb24gYyhlKXtyZXR1cm4gZT1lLnRyaW0oKSx1P2Z1bmN0aW9uKGUpe3ZhciB0PWEuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO3JldHVybiB0LmlubmVySFRNTD1lLHQuY29udGVudC5jaGlsZE5vZGVzWzBdfShlKTpzP2Z1bmN0aW9uKGUpe3JldHVybiBpfHwoaT1hLmNyZWF0ZVJhbmdlKCkpLnNlbGVjdE5vZGUoYS5ib2R5KSxpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChlKS5jaGlsZE5vZGVzWzBdfShlKTpmdW5jdGlvbihlKXt2YXIgdD1hLmNyZWF0ZUVsZW1lbnQoXCJib2R5XCIpO3JldHVybiB0LmlubmVySFRNTD1lLHQuY2hpbGROb2Rlc1swXX0oZSl9ZnVuY3Rpb24gbChlLHQpe3ZhciBuLGkscj1lLm5vZGVOYW1lLG89dC5ub2RlTmFtZTtyZXR1cm4gcj09PW98fChuPXIuY2hhckNvZGVBdCgwKSxpPW8uY2hhckNvZGVBdCgwKSxuPD05MCYmaT49OTc/cj09PW8udG9VcHBlckNhc2UoKTppPD05MCYmbj49OTcmJm89PT1yLnRvVXBwZXJDYXNlKCkpfWZ1bmN0aW9uIGQoZSx0LG4pe2Vbbl0hPT10W25dJiYoZVtuXT10W25dLGVbbl0/ZS5zZXRBdHRyaWJ1dGUobixcIlwiKTplLnJlbW92ZUF0dHJpYnV0ZShuKSl9dmFyIGg9e09QVElPTjpmdW5jdGlvbihlLHQpe3ZhciBuPWUucGFyZW50Tm9kZTtpZihuKXt2YXIgaT1uLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XCJPUFRHUk9VUFwiPT09aSYmKGk9KG49bi5wYXJlbnROb2RlKSYmbi5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpKSxcIlNFTEVDVFwiIT09aXx8bi5oYXNBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiKXx8KGUuaGFzQXR0cmlidXRlKFwic2VsZWN0ZWRcIikmJiF0LnNlbGVjdGVkJiYoZS5zZXRBdHRyaWJ1dGUoXCJzZWxlY3RlZFwiLFwic2VsZWN0ZWRcIiksZS5yZW1vdmVBdHRyaWJ1dGUoXCJzZWxlY3RlZFwiKSksbi5zZWxlY3RlZEluZGV4PS0xKX1kKGUsdCxcInNlbGVjdGVkXCIpfSxJTlBVVDpmdW5jdGlvbihlLHQpe2QoZSx0LFwiY2hlY2tlZFwiKSxkKGUsdCxcImRpc2FibGVkXCIpLGUudmFsdWUhPT10LnZhbHVlJiYoZS52YWx1ZT10LnZhbHVlKSx0Lmhhc0F0dHJpYnV0ZShcInZhbHVlXCIpfHxlLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpfSxURVhUQVJFQTpmdW5jdGlvbihlLHQpe3ZhciBuPXQudmFsdWU7ZS52YWx1ZSE9PW4mJihlLnZhbHVlPW4pO3ZhciBpPWUuZmlyc3RDaGlsZDtpZihpKXt2YXIgcj1pLm5vZGVWYWx1ZTtpZihyPT1ufHwhbiYmcj09ZS5wbGFjZWhvbGRlcilyZXR1cm47aS5ub2RlVmFsdWU9bn19LFNFTEVDVDpmdW5jdGlvbihlLHQpe2lmKCF0Lmhhc0F0dHJpYnV0ZShcIm11bHRpcGxlXCIpKXtmb3IodmFyIG4saSxyPS0xLG89MCxhPWUuZmlyc3RDaGlsZDthOylpZihcIk9QVEdST1VQXCI9PT0oaT1hLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkpKWE9KG49YSkuZmlyc3RDaGlsZDtlbHNle2lmKFwiT1BUSU9OXCI9PT1pKXtpZihhLmhhc0F0dHJpYnV0ZShcInNlbGVjdGVkXCIpKXtyPW87YnJlYWt9bysrfSEoYT1hLm5leHRTaWJsaW5nKSYmbiYmKGE9bi5uZXh0U2libGluZyxuPW51bGwpfWUuc2VsZWN0ZWRJbmRleD1yfX19LGY9MSx2PTExLHA9MyxnPTg7ZnVuY3Rpb24gbSgpe31mdW5jdGlvbiB5KGUpe2lmKGUpcmV0dXJuIGUuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZShcImlkXCIpfHxlLmlkfXZhciBiPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LG4saSl7aWYoaXx8KGk9e30pLFwic3RyaW5nXCI9PXR5cGVvZiBuKWlmKFwiI2RvY3VtZW50XCI9PT10Lm5vZGVOYW1lfHxcIkhUTUxcIj09PXQubm9kZU5hbWV8fFwiQk9EWVwiPT09dC5ub2RlTmFtZSl7dmFyIHI9bjsobj1hLmNyZWF0ZUVsZW1lbnQoXCJodG1sXCIpKS5pbm5lckhUTUw9cn1lbHNlIG49YyhuKTt2YXIgdT1pLmdldE5vZGVLZXl8fHkscz1pLm9uQmVmb3JlTm9kZUFkZGVkfHxtLGQ9aS5vbk5vZGVBZGRlZHx8bSxiPWkub25CZWZvcmVFbFVwZGF0ZWR8fG0saz1pLm9uRWxVcGRhdGVkfHxtLHc9aS5vbkJlZm9yZU5vZGVEaXNjYXJkZWR8fG0sQT1pLm9uTm9kZURpc2NhcmRlZHx8bSxFPWkub25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZHx8bSxTPSEwPT09aS5jaGlsZHJlbk9ubHkseD1PYmplY3QuY3JlYXRlKG51bGwpLEM9W107ZnVuY3Rpb24gUChlKXtDLnB1c2goZSl9ZnVuY3Rpb24gTChlLHQsbil7ITEhPT13KGUpJiYodCYmdC5yZW1vdmVDaGlsZChlKSxBKGUpLGZ1bmN0aW9uIGUodCxuKXtpZih0Lm5vZGVUeXBlPT09Zilmb3IodmFyIGk9dC5maXJzdENoaWxkO2k7KXt2YXIgcj12b2lkIDA7biYmKHI9dShpKSk/UChyKTooQShpKSxpLmZpcnN0Q2hpbGQmJmUoaSxuKSksaT1pLm5leHRTaWJsaW5nfX0oZSxuKSl9ZnVuY3Rpb24gSShlKXtkKGUpO2Zvcih2YXIgdD1lLmZpcnN0Q2hpbGQ7dDspe3ZhciBuPXQubmV4dFNpYmxpbmcsaT11KHQpO2lmKGkpe3ZhciByPXhbaV07ciYmbCh0LHIpPyh0LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHIsdCksVChyLHQpKTpJKHQpfWVsc2UgSSh0KTt0PW59fWZ1bmN0aW9uIFQodCxuLGkpe3ZhciByPXUobik7aWYociYmZGVsZXRlIHhbcl0sIWkpe2lmKCExPT09Yih0LG4pKXJldHVybjtpZihlKHQsbiksayh0KSwhMT09PUUodCxuKSlyZXR1cm59XCJURVhUQVJFQVwiIT09dC5ub2RlTmFtZT9mdW5jdGlvbihlLHQpe3ZhciBuLGkscixvLGMsZD10LmZpcnN0Q2hpbGQsdj1lLmZpcnN0Q2hpbGQ7ZTpmb3IoO2Q7KXtmb3Iobz1kLm5leHRTaWJsaW5nLG49dShkKTt2Oyl7aWYocj12Lm5leHRTaWJsaW5nLGQuaXNTYW1lTm9kZSYmZC5pc1NhbWVOb2RlKHYpKXtkPW8sdj1yO2NvbnRpbnVlIGV9aT11KHYpO3ZhciBtPXYubm9kZVR5cGUseT12b2lkIDA7aWYobT09PWQubm9kZVR5cGUmJihtPT09Zj8obj9uIT09aSYmKChjPXhbbl0pP3I9PT1jP3k9ITE6KGUuaW5zZXJ0QmVmb3JlKGMsdiksaT9QKGkpOkwodixlLCEwKSx2PWMpOnk9ITEpOmkmJih5PSExKSwoeT0hMSE9PXkmJmwodixkKSkmJlQodixkKSk6bSE9PXAmJm0hPWd8fCh5PSEwLHYubm9kZVZhbHVlIT09ZC5ub2RlVmFsdWUmJih2Lm5vZGVWYWx1ZT1kLm5vZGVWYWx1ZSkpKSx5KXtkPW8sdj1yO2NvbnRpbnVlIGV9aT9QKGkpOkwodixlLCEwKSx2PXJ9aWYobiYmKGM9eFtuXSkmJmwoYyxkKSllLmFwcGVuZENoaWxkKGMpLFQoYyxkKTtlbHNle3ZhciBiPXMoZCk7ITEhPT1iJiYoYiYmKGQ9YiksZC5hY3R1YWxpemUmJihkPWQuYWN0dWFsaXplKGUub3duZXJEb2N1bWVudHx8YSkpLGUuYXBwZW5kQ2hpbGQoZCksSShkKSl9ZD1vLHY9cn0hZnVuY3Rpb24oZSx0LG4pe2Zvcig7dDspe3ZhciBpPXQubmV4dFNpYmxpbmc7KG49dSh0KSk/UChuKTpMKHQsZSwhMCksdD1pfX0oZSx2LGkpO3ZhciBrPWhbZS5ub2RlTmFtZV07ayYmayhlLHQpfSh0LG4pOmguVEVYVEFSRUEodCxuKX0hZnVuY3Rpb24gZSh0KXtpZih0Lm5vZGVUeXBlPT09Znx8dC5ub2RlVHlwZT09PXYpZm9yKHZhciBuPXQuZmlyc3RDaGlsZDtuOyl7dmFyIGk9dShuKTtpJiYoeFtpXT1uKSxlKG4pLG49bi5uZXh0U2libGluZ319KHQpO3ZhciBfPXQsRD1fLm5vZGVUeXBlLFI9bi5ub2RlVHlwZTtpZighUylpZihEPT09ZilSPT09Zj9sKHQsbil8fChBKHQpLF89ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49ZS5maXJzdENoaWxkO247KXt2YXIgaT1uLm5leHRTaWJsaW5nO3QuYXBwZW5kQ2hpbGQobiksbj1pfXJldHVybiB0fSh0LGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQmJnQhPT1vP2EuY3JlYXRlRWxlbWVudE5TKHQsZSk6YS5jcmVhdGVFbGVtZW50KGUpfShuLm5vZGVOYW1lLG4ubmFtZXNwYWNlVVJJKSkpOl89bjtlbHNlIGlmKEQ9PT1wfHxEPT09Zyl7aWYoUj09PUQpcmV0dXJuIF8ubm9kZVZhbHVlIT09bi5ub2RlVmFsdWUmJihfLm5vZGVWYWx1ZT1uLm5vZGVWYWx1ZSksXztfPW59aWYoXz09PW4pQSh0KTtlbHNle2lmKG4uaXNTYW1lTm9kZSYmbi5pc1NhbWVOb2RlKF8pKXJldHVybjtpZihUKF8sbixTKSxDKWZvcih2YXIgTj0wLE89Qy5sZW5ndGg7TjxPO04rKyl7dmFyIEg9eFtDW05dXTtIJiZMKEgsSC5wYXJlbnROb2RlLCExKX19cmV0dXJuIVMmJl8hPT10JiZ0LnBhcmVudE5vZGUmJihfLmFjdHVhbGl6ZSYmKF89Xy5hY3R1YWxpemUodC5vd25lckRvY3VtZW50fHxhKSksdC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChfLHQpKSxffX0oZnVuY3Rpb24oZSx0KXt2YXIgbixpLG8sYSx1PXQuYXR0cmlidXRlcztpZih0Lm5vZGVUeXBlIT09ciYmZS5ub2RlVHlwZSE9PXIpe2Zvcih2YXIgcz11Lmxlbmd0aC0xO3M+PTA7cy0tKWk9KG49dVtzXSkubmFtZSxvPW4ubmFtZXNwYWNlVVJJLGE9bi52YWx1ZSxvPyhpPW4ubG9jYWxOYW1lfHxpLGUuZ2V0QXR0cmlidXRlTlMobyxpKSE9PWEmJihcInhtbG5zXCI9PT1uLnByZWZpeCYmKGk9bi5uYW1lKSxlLnNldEF0dHJpYnV0ZU5TKG8saSxhKSkpOmUuZ2V0QXR0cmlidXRlKGkpIT09YSYmZS5zZXRBdHRyaWJ1dGUoaSxhKTtmb3IodmFyIGM9ZS5hdHRyaWJ1dGVzLGw9Yy5sZW5ndGgtMTtsPj0wO2wtLSlpPShuPWNbbF0pLm5hbWUsKG89bi5uYW1lc3BhY2VVUkkpPyhpPW4ubG9jYWxOYW1lfHxpLHQuaGFzQXR0cmlidXRlTlMobyxpKXx8ZS5yZW1vdmVBdHRyaWJ1dGVOUyhvLGkpKTp0Lmhhc0F0dHJpYnV0ZShpKXx8ZS5yZW1vdmVBdHRyaWJ1dGUoaSl9fSk7ZnVuY3Rpb24gayhlKXtyZXR1cm4gUChlKXx8UyhlKXx8TChlKXx8QygpfWZ1bmN0aW9uIHcoZSx0KXt2YXIgbj1PYmplY3Qua2V5cyhlKTtpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgaT1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpO3QmJihpPWkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCkuZW51bWVyYWJsZX0pKSxuLnB1c2guYXBwbHkobixpKX1yZXR1cm4gbn1mdW5jdGlvbiBBKGUsdCxuKXtyZXR1cm4gdCBpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOm4sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW3RdPW4sZX1mdW5jdGlvbiBFKGUpe3JldHVybiBmdW5jdGlvbihlKXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBJKGUpfShlKXx8UyhlKXx8TChlKXx8ZnVuY3Rpb24oKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX0oKX1mdW5jdGlvbiBTKGUpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoZSkpcmV0dXJuIEFycmF5LmZyb20oZSl9ZnVuY3Rpb24geChlLHQpe3JldHVybiBQKGUpfHxmdW5jdGlvbihlLHQpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBTeW1ib2x8fCEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChlKSkpcmV0dXJuO3ZhciBuPVtdLGk9ITAscj0hMSxvPXZvaWQgMDt0cnl7Zm9yKHZhciBhLHU9ZVtTeW1ib2wuaXRlcmF0b3JdKCk7IShpPShhPXUubmV4dCgpKS5kb25lKSYmKG4ucHVzaChhLnZhbHVlKSwhdHx8bi5sZW5ndGghPT10KTtpPSEwKTt9Y2F0Y2goZSl7cj0hMCxvPWV9ZmluYWxseXt0cnl7aXx8bnVsbD09dS5yZXR1cm58fHUucmV0dXJuKCl9ZmluYWxseXtpZihyKXRocm93IG99fXJldHVybiBufShlLHQpfHxMKGUsdCl8fEMoKX1mdW5jdGlvbiBDKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX1mdW5jdGlvbiBQKGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIGV9ZnVuY3Rpb24gTChlLHQpe2lmKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBJKGUsdCk7dmFyIG49T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO3JldHVyblwiT2JqZWN0XCI9PT1uJiZlLmNvbnN0cnVjdG9yJiYobj1lLmNvbnN0cnVjdG9yLm5hbWUpLFwiTWFwXCI9PT1ufHxcIlNldFwiPT09bj9BcnJheS5mcm9tKGUpOlwiQXJndW1lbnRzXCI9PT1ufHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKT9JKGUsdCk6dm9pZCAwfX1mdW5jdGlvbiBJKGUsdCl7KG51bGw9PXR8fHQ+ZS5sZW5ndGgpJiYodD1lLmxlbmd0aCk7Zm9yKHZhciBuPTAsaT1uZXcgQXJyYXkodCk7bjx0O24rKylpW25dPWVbbl07cmV0dXJuIGl9ZnVuY3Rpb24gVChlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gXyhlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgaT10W25dO2kuZW51bWVyYWJsZT1pLmVudW1lcmFibGV8fCExLGkuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIGkmJihpLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxpLmtleSxpKX19ZnVuY3Rpb24gRChlLHQsbil7cmV0dXJuIHQmJl8oZS5wcm90b3R5cGUsdCksbiYmXyhlLG4pLGV9ZnVuY3Rpb24gUihlKXtcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7cmV0dXJuKFI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0pKGUpfW4uZCh0LFwiZGVidWdcIixmdW5jdGlvbigpe3JldHVybiBLfSksbi5kKHQsXCJSZW5kZXJlZFwiLGZ1bmN0aW9uKCl7cmV0dXJuIHVlfSksbi5kKHQsXCJMaXZlU29ja2V0XCIsZnVuY3Rpb24oKXtyZXR1cm4gc2V9KSxuLmQodCxcIkJyb3dzZXJcIixmdW5jdGlvbigpe3JldHVybiBjZX0pLG4uZCh0LFwiRE9NXCIsZnVuY3Rpb24oKXtyZXR1cm4gbGV9KSxuLmQodCxcIlZpZXdcIixmdW5jdGlvbigpe3JldHVybiBmZX0pO3ZhciBOPVsxZTMsM2UzXSxPPVwiZGF0YS1waHgtdmlld1wiLEg9W1wicGh4LWNsaWNrLWxvYWRpbmdcIixcInBoeC1jaGFuZ2UtbG9hZGluZ1wiLFwicGh4LXN1Ym1pdC1sb2FkaW5nXCIsXCJwaHgta2V5ZG93bi1sb2FkaW5nXCIsXCJwaHgta2V5dXAtbG9hZGluZ1wiLFwicGh4LWJsdXItbG9hZGluZ1wiLFwicGh4LWZvY3VzLWxvYWRpbmdcIl0saj1cImRhdGEtcGh4LWNvbXBvbmVudFwiLEY9XCJkYXRhLXBoeC1yZWZcIixNPVwiW1wiLmNvbmNhdChPLFwiXVwiKSxCPVtcInRleHRcIixcInRleHRhcmVhXCIsXCJudW1iZXJcIixcImVtYWlsXCIsXCJwYXNzd29yZFwiLFwic2VhcmNoXCIsXCJ0ZWxcIixcInVybFwiLFwiZGF0ZVwiLFwidGltZVwiXSxVPVtcImNoZWNrYm94XCIsXCJyYWRpb1wiXSxKPVwiZGF0YS1waHgtc3RhdGljXCIsVj0xLFc9XCJwaHgtXCIscT17ZGVib3VuY2U6MzAwLHRocm90dGxlOjMwMH0sej1mdW5jdGlvbihlLHQpe3JldHVybiBjb25zb2xlLmVycm9yJiZjb25zb2xlLmVycm9yKGUsdCl9O3ZhciBLPWZ1bmN0aW9uKGUsdCxuLGkpe2UubGl2ZVNvY2tldC5pc0RlYnVnRW5hYmxlZCgpJiZjb25zb2xlLmxvZyhcIlwiLmNvbmNhdChlLmlkLFwiIFwiKS5jb25jYXQodCxcIjogXCIpLmNvbmNhdChuLFwiIC0gXCIpLGkpfSwkPWZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZTpmdW5jdGlvbigpe3JldHVybiBlfX0sWD1mdW5jdGlvbihlKXtyZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlKSl9LEc9ZnVuY3Rpb24oZSx0LG4pe2Rve2lmKGUubWF0Y2hlcyhcIltcIi5jb25jYXQodCxcIl1cIikpKXJldHVybiBlO2U9ZS5wYXJlbnRFbGVtZW50fHxlLnBhcmVudE5vZGV9d2hpbGUobnVsbCE9PWUmJjE9PT1lLm5vZGVUeXBlJiYhKG4mJm4uaXNTYW1lTm9kZShlKXx8ZS5tYXRjaGVzKE0pKSk7cmV0dXJuIG51bGx9LFk9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPT1lJiZcIm9iamVjdFwiPT09UihlKSYmIShlIGluc3RhbmNlb2YgQXJyYXkpfSxRPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCBpbiBlKXJldHVybiExO3JldHVybiEwfSxaPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUmJnQoZSl9LGVlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4saSl7VCh0aGlzLGUpLHRoaXMucmVmPWllLmdlbkZpbGVSZWYobiksdGhpcy5maWxlRWw9dCx0aGlzLmZpbGU9bix0aGlzLnZpZXc9aSx0aGlzLm1ldGE9bnVsbCx0aGlzLl9pc0NhbmNlbGxlZD0hMSx0aGlzLl9pc0RvbmU9ITEsdGhpcy5fcHJvZ3Jlc3M9MCx0aGlzLl9vbkRvbmU9ZnVuY3Rpb24oKXt9fXJldHVybiBEKGUsbnVsbCxbe2tleTpcImlzQWN0aXZlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj12b2lkIDA9PT10Ll9waHhSZWYsaT1lLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LWFjdGl2ZS1yZWZzXCIpLnNwbGl0KFwiLFwiKS5pbmRleE9mKGllLmdlbkZpbGVSZWYodCkpPj0wO3JldHVybiB0LnNpemU+MCYmKG58fGkpfX0se2tleTpcImlzUHJlZmxpZ2h0ZWRcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtcHJlZmxpZ2h0ZWQtcmVmc1wiKS5zcGxpdChcIixcIikuaW5kZXhPZihpZS5nZW5GaWxlUmVmKHQpKT49MDtyZXR1cm4gbiYmdGhpcy5pc0FjdGl2ZShlLHQpfX1dKSxEKGUsW3trZXk6XCJtZXRhZGF0YVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWV0YX19LHtrZXk6XCJwcm9ncmVzc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5fcHJvZ3Jlc3M9TWF0aC5mbG9vcihlKSx0aGlzLl9wcm9ncmVzcz49MTAwPyh0aGlzLl9wcm9ncmVzcz0xMDAsdGhpcy5faXNEb25lPSEwLHRoaXMudmlldy5wdXNoRmlsZVByb2dyZXNzKHRoaXMuZmlsZUVsLHRoaXMucmVmLDEwMCxmdW5jdGlvbigpe2llLnVudHJhY2tGaWxlKHQuZmlsZUVsLHQuZmlsZSksdC5fb25Eb25lKCl9KSk6dGhpcy52aWV3LnB1c2hGaWxlUHJvZ3Jlc3ModGhpcy5maWxlRWwsdGhpcy5yZWYsdGhpcy5fcHJvZ3Jlc3MpfX0se2tleTpcImNhbmNlbFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5faXNDYW5jZWxsZWQ9ITAsdGhpcy5faXNEb25lPSEwLHRoaXMuX29uRG9uZSgpfX0se2tleTpcImlzRG9uZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzRG9uZX19LHtrZXk6XCJlcnJvclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOlwiZmFpbGVkXCI7dGhpcy52aWV3LnB1c2hGaWxlUHJvZ3Jlc3ModGhpcy5maWxlRWwsdGhpcy5yZWYse2Vycm9yOmV9KX19LHtrZXk6XCJvbkRvbmVcIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9vbkRvbmU9ZX19LHtrZXk6XCJ0b1ByZWZsaWdodFBheWxvYWRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybntsYXN0X21vZGlmaWVkOnRoaXMuZmlsZS5sYXN0TW9kaWZpZWQsbmFtZTp0aGlzLmZpbGUubmFtZSxzaXplOnRoaXMuZmlsZS5zaXplLHR5cGU6dGhpcy5maWxlLnR5cGUscmVmOnRoaXMucmVmfX19LHtrZXk6XCJ1cGxvYWRlclwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKHRoaXMubWV0YS51cGxvYWRlcil7dmFyIHQ9ZVt0aGlzLm1ldGEudXBsb2FkZXJdfHx6KFwibm8gdXBsb2FkZXIgY29uZmlndXJlZCBmb3IgXCIuY29uY2F0KHRoaXMubWV0YS51cGxvYWRlcikpO3JldHVybntuYW1lOnRoaXMubWV0YS51cGxvYWRlcixjYWxsYmFjazp0fX1yZXR1cm57bmFtZTpcImNoYW5uZWxcIixjYWxsYmFjazpyZX19fSx7a2V5OlwiemlwUG9zdEZsaWdodFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMubWV0YT1lLmVudHJpZXNbdGhpcy5yZWZdLHRoaXMubWV0YXx8eihcIm5vIHByZWZsaWdodCB1cGxvYWQgcmVzcG9uc2UgcmV0dXJuZWQgd2l0aCByZWYgXCIuY29uY2F0KHRoaXMucmVmKSx7aW5wdXQ6dGhpcy5maWxlRWwscmVzcG9uc2U6ZX0pfX1dKSxlfSgpLHRlPXtMaXZlRmlsZVVwbG9hZDp7cHJlZmxpZ2h0ZWRSZWZzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtcHJlZmxpZ2h0ZWQtcmVmc1wiKX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMucHJlZmxpZ2h0ZWRXYXM9dGhpcy5wcmVmbGlnaHRlZFJlZnMoKX0sdXBkYXRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXMucHJlZmxpZ2h0ZWRSZWZzKCk7dGhpcy5wcmVmbGlnaHRlZFdhcyE9PWUmJih0aGlzLnByZWZsaWdodGVkV2FzPWUsXCJcIj09PWUmJnRoaXMuX192aWV3LmNhbmNlbFN1Ym1pdCh0aGlzLmVsLmZvcm0pKX19fTt0ZS5MaXZlSW1nUHJldmlldz17bW91bnRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5yZWY9dGhpcy5lbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1lbnRyeS1yZWZcIiksdGhpcy5pbnB1dEVsPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtdXBsb2FkLXJlZlwiKSksaWUuZ2V0RW50cnlEYXRhVVJMKHRoaXMuaW5wdXRFbCx0aGlzLnJlZixmdW5jdGlvbih0KXtyZXR1cm4gZS5lbC5zcmM9dH0pfX07dmFyIG5lPTAsaWU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbixpKXtUKHRoaXMsZSksdGhpcy52aWV3PW4sdGhpcy5vbkNvbXBsZXRlPWksdGhpcy5fZW50cmllcz1BcnJheS5mcm9tKGUuZmlsZXNBd2FpdGluZ1ByZWZsaWdodCh0KXx8W10pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gbmV3IGVlKHQsZSxuKX0pLHRoaXMubnVtRW50cmllc0luUHJvZ3Jlc3M9dGhpcy5fZW50cmllcy5sZW5ndGh9cmV0dXJuIEQoZSxudWxsLFt7a2V5OlwiZ2VuRmlsZVJlZlwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUuX3BoeFJlZjtyZXR1cm4gdm9pZCAwIT09dD90OihlLl9waHhSZWY9KG5lKyspLnRvU3RyaW5nKCksZS5fcGh4UmVmKX19LHtrZXk6XCJnZXRFbnRyeURhdGFVUkxcIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7dmFyIGk9dGhpcyxyPXRoaXMuYWN0aXZlRmlsZXMoZSkuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gaS5nZW5GaWxlUmVmKGUpPT09dH0pLG89bmV3IEZpbGVSZWFkZXI7by5vbmxvYWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG4oZS50YXJnZXQucmVzdWx0KX0sby5yZWFkQXNEYXRhVVJMKHIpfX0se2tleTpcImhhc1VwbG9hZHNJblByb2dyZXNzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9MDtyZXR1cm4gbGUuYWxsKGUsJ2lucHV0W3R5cGU9XCJmaWxlXCJdJyxmdW5jdGlvbihlKXtlLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LXByZWZsaWdodGVkLXJlZnNcIikhPT1lLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LWRvbmUtcmVmc1wiKSYmdCsrfSksdD4wfX0se2tleTpcInNlcmlhbGl6ZVVwbG9hZHNcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49e307cmV0dXJuIHRoaXMuYWN0aXZlRmlsZXMoZSxcInNlcmlhbGl6ZVwiKS5mb3JFYWNoKGZ1bmN0aW9uKGkpe3ZhciByPXtwYXRoOmUubmFtZX0sbz1lLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LXVwbG9hZC1yZWZcIik7bltvXT1uW29dfHxbXSxyLnJlZj10LmdlbkZpbGVSZWYoaSksci5uYW1lPWkubmFtZSxyLnR5cGU9aS50eXBlLHIuc2l6ZT1pLnNpemUsbltvXS5wdXNoKHIpfSksbn19LHtrZXk6XCJjbGVhckZpbGVzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7ZS52YWx1ZT1udWxsLGxlLnB1dFByaXZhdGUoZSxcImZpbGVzXCIsW10pfX0se2tleTpcInVudHJhY2tGaWxlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtsZS5wdXRQcml2YXRlKGUsXCJmaWxlc1wiLGxlLnByaXZhdGUoZSxcImZpbGVzXCIpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4hT2JqZWN0LmlzKGUsdCl9KSl9fSx7a2V5OlwidHJhY2tGaWxlc1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztpZihudWxsIT09ZS5nZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiKSl7dmFyIGk9dC5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIW4uYWN0aXZlRmlsZXMoZSkuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LmlzKGUsdCl9KX0pO2xlLnB1dFByaXZhdGUoZSxcImZpbGVzXCIsdGhpcy5hY3RpdmVGaWxlcyhlKS5jb25jYXQoaSkpLGUudmFsdWU9bnVsbH1lbHNlIGxlLnB1dFByaXZhdGUoZSxcImZpbGVzXCIsdCl9fSx7a2V5OlwiYWN0aXZlRmlsZUlucHV0c1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1lLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9XCJmaWxlXCJdJyk7cmV0dXJuIEFycmF5LmZyb20obikuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLmZpbGVzJiZ0LmFjdGl2ZUZpbGVzKGUpLmxlbmd0aD4wfSl9fSx7a2V5OlwiYWN0aXZlRmlsZXNcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4obGUucHJpdmF0ZShlLFwiZmlsZXNcIil8fFtdKS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIGVlLmlzQWN0aXZlKGUsdCl9KX19LHtrZXk6XCJpbnB1dHNBd2FpdGluZ1ByZWZsaWdodFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1lLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9XCJmaWxlXCJdJyk7cmV0dXJuIEFycmF5LmZyb20obikuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiB0LmZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoZSkubGVuZ3RoPjB9KX19LHtrZXk6XCJmaWxlc0F3YWl0aW5nUHJlZmxpZ2h0XCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYWN0aXZlRmlsZXMoZSkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiFlZS5pc1ByZWZsaWdodGVkKGUsdCl9KX19XSksRChlLFt7a2V5OlwiZW50cmllc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2VudHJpZXN9fSx7a2V5OlwiaW5pdEFkYXB0ZXJVcGxvYWRcIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7dmFyIGk9dGhpczt0aGlzLl9lbnRyaWVzPXRoaXMuX2VudHJpZXMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnppcFBvc3RGbGlnaHQoZSksdC5vbkRvbmUoZnVuY3Rpb24oKXtpLm51bUVudHJpZXNJblByb2dyZXNzLS0sMD09PWkubnVtRW50cmllc0luUHJvZ3Jlc3MmJmkub25Db21wbGV0ZSgpfSksdH0pO3ZhciByPXRoaXMuX2VudHJpZXMucmVkdWNlKGZ1bmN0aW9uKGUsdCl7dmFyIGk9dC51cGxvYWRlcihuLnVwbG9hZGVycykscj1pLm5hbWUsbz1pLmNhbGxiYWNrO3JldHVybiBlW3JdPWVbcl18fHtjYWxsYmFjazpvLGVudHJpZXM6W119LGVbcl0uZW50cmllcy5wdXNoKHQpLGV9LHt9KTtmb3IodmFyIG8gaW4gcil7dmFyIGE9cltvXTsoMCxhLmNhbGxiYWNrKShhLmVudHJpZXMsdCxlLG4pfX19XSksZX0oKSxyZT1mdW5jdGlvbihlLHQsbixpKXtlLmZvckVhY2goZnVuY3Rpb24oZSl7bmV3IG9lKGUsbi5jb25maWcuY2h1bmtfc2l6ZSxpKS51cGxvYWQoKX0pfSxvZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuLGkpe1QodGhpcyxlKSx0aGlzLmxpdmVTb2NrZXQ9aSx0aGlzLmVudHJ5PXQsdGhpcy5vZmZzZXQ9MCx0aGlzLmNodW5rU2l6ZT1uLHRoaXMudXBsb2FkQ2hhbm5lbD1pLmNoYW5uZWwoXCJsdnU6XCIuY29uY2F0KHQucmVmKSx7dG9rZW46dC5tZXRhZGF0YSgpfSl9cmV0dXJuIEQoZSxbe2tleTpcInVwbG9hZFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLnVwbG9hZENoYW5uZWwuam9pbigpLnJlY2VpdmUoXCJva1wiLGZ1bmN0aW9uKHQpe3JldHVybiBlLnJlYWROZXh0Q2h1bmsoKX0pLnJlY2VpdmUoXCJlcnJvclwiLGZ1bmN0aW9uKHQpe2UudXBsb2FkQ2hhbm5lbC5sZWF2ZSgpLGUuZW50cnkuZXJyb3IoKX0pfX0se2tleTpcImlzRG9uZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub2Zmc2V0Pj10aGlzLmVudHJ5LmZpbGUuc2l6ZX19LHtrZXk6XCJyZWFkTmV4dENodW5rXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9bmV3IHdpbmRvdy5GaWxlUmVhZGVyLG49dGhpcy5lbnRyeS5maWxlLnNsaWNlKHRoaXMub2Zmc2V0LHRoaXMuY2h1bmtTaXplK3RoaXMub2Zmc2V0KTt0Lm9ubG9hZD1mdW5jdGlvbih0KXtpZihudWxsIT09dC50YXJnZXQuZXJyb3IpcmV0dXJuIHooXCJSZWFkIGVycm9yOiBcIit0LnRhcmdldC5lcnJvcik7ZS5vZmZzZXQrPXQudGFyZ2V0LnJlc3VsdC5ieXRlTGVuZ3RoLGUucHVzaENodW5rKHQudGFyZ2V0LnJlc3VsdCl9LHQucmVhZEFzQXJyYXlCdWZmZXIobil9fSx7a2V5OlwicHVzaENodW5rXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLnVwbG9hZENoYW5uZWwuaXNKb2luZWQoKSYmdGhpcy51cGxvYWRDaGFubmVsLnB1c2goXCJjaHVua1wiLGUpLnJlY2VpdmUoXCJva1wiLGZ1bmN0aW9uKCl7dC5lbnRyeS5wcm9ncmVzcyh0Lm9mZnNldC90LmVudHJ5LmZpbGUuc2l6ZSoxMDApLHQuaXNEb25lKCl8fHNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gdC5yZWFkTmV4dENodW5rKCl9LHQubGl2ZVNvY2tldC5nZXRMYXRlbmN5U2ltKCl8fDApfSl9fV0pLGV9KCksYWU9ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9LG49bmV3IEZvcm1EYXRhKGUpLGk9W107bi5mb3JFYWNoKGZ1bmN0aW9uKGUsdCxuKXtlIGluc3RhbmNlb2YgRmlsZSYmaS5wdXNoKHQpfSksaS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBuLmRlbGV0ZShlKX0pO3ZhciByLG89bmV3IFVSTFNlYXJjaFBhcmFtcyxhPWZ1bmN0aW9uKGUpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBTeW1ib2x8fG51bGw9PWVbU3ltYm9sLml0ZXJhdG9yXSl7aWYoQXJyYXkuaXNBcnJheShlKXx8KGU9TChlKSkpe3ZhciB0PTAsbj1mdW5jdGlvbigpe307cmV0dXJue3M6bixuOmZ1bmN0aW9uKCl7cmV0dXJuIHQ+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW3QrK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6bn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBpLHIsbz0hMCxhPSExO3JldHVybntzOmZ1bmN0aW9uKCl7aT1lW1N5bWJvbC5pdGVyYXRvcl0oKX0sbjpmdW5jdGlvbigpe3ZhciBlPWkubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe2E9ITAscj1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PWkucmV0dXJufHxpLnJldHVybigpfWZpbmFsbHl7aWYoYSl0aHJvdyByfX19fShuLmVudHJpZXMoKSk7dHJ5e2ZvcihhLnMoKTshKHI9YS5uKCkpLmRvbmU7KXt2YXIgdT14KHIudmFsdWUsMikscz11WzBdLGM9dVsxXTtvLmFwcGVuZChzLGMpfX1jYXRjaChlKXthLmUoZSl9ZmluYWxseXthLmYoKX1mb3IodmFyIGwgaW4gdClvLmFwcGVuZChsLHRbbF0pO3JldHVybiBvLnRvU3RyaW5nKCl9LHVlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4pe1QodGhpcyxlKSx0aGlzLnZpZXdJZD10LHRoaXMucmVuZGVyZWQ9e30sdGhpcy5tZXJnZURpZmYobil9cmV0dXJuIEQoZSxudWxsLFt7a2V5OlwiZXh0cmFjdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUucixuPWUuZSxpPWUudDtyZXR1cm4gZGVsZXRlIGUucixkZWxldGUgZS5lLGRlbGV0ZSBlLnQse2RpZmY6ZSx0aXRsZTppLHJlcGx5OnR8fG51bGwsZXZlbnRzOm58fFtdfX19XSksRChlLFt7a2V5OlwicGFyZW50Vmlld0lkXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWV3SWR9fSx7a2V5OlwidG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZWN1cnNpdmVUb1N0cmluZyh0aGlzLnJlbmRlcmVkLHRoaXMucmVuZGVyZWQuYyxlKX19LHtrZXk6XCJyZWN1cnNpdmVUb1N0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTplLmMsbj1hcmd1bWVudHMubGVuZ3RoPjI/YXJndW1lbnRzWzJdOnZvaWQgMCxpPXtidWZmZXI6XCJcIixjb21wb25lbnRzOnQsb25seUNpZHM6bj1uP25ldyBTZXQobik6bnVsbH07cmV0dXJuIHRoaXMudG9PdXRwdXRCdWZmZXIoZSxpKSxpLmJ1ZmZlcn19LHtrZXk6XCJjb21wb25lbnRDSURzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5rZXlzKGUuY3x8e30pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gcGFyc2VJbnQoZSl9KX19LHtrZXk6XCJpc0NvbXBvbmVudE9ubHlEaWZmXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuISFlLmMmJjE9PT1PYmplY3Qua2V5cyhlKS5sZW5ndGh9fSx7a2V5OlwiZ2V0Q29tcG9uZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5jW3RdfX0se2tleTpcIm1lcmdlRGlmZlwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUuYztpZihkZWxldGUgZS5jLHRoaXMucmVuZGVyZWQ9dGhpcy5yZWN1cnNpdmVNZXJnZSh0aGlzLnJlbmRlcmVkLGUpLHRoaXMucmVuZGVyZWQuYz10aGlzLnJlbmRlcmVkLmN8fHt9LHQpe3ZhciBuPXRoaXMucmVuZGVyZWQuYztmb3IodmFyIGkgaW4gdCl7dmFyIHI9dFtpXSxvPXIsYT1vLnM7aWYoXCJudW1iZXJcIj09dHlwZW9mIGEpe2Zvcig7XCJudW1iZXJcIj09dHlwZW9mIGE7KWE9KG89YT4wP3RbYV06blstYV0pLnM7bz1YKG8pLHRoaXMuZG9SZWN1cnNpdmVNZXJnZShvLHIpLG8ucz1hfWVsc2Ugbz1uW2ldfHx7fSxvPXRoaXMucmVjdXJzaXZlTWVyZ2UobyxyKTt0W2ldPW99Zm9yKHZhciB1IGluIHQpblt1XT10W3VdO2UuYz10fX19LHtrZXk6XCJyZWN1cnNpdmVNZXJnZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMCE9PXQucz90Oih0aGlzLmRvUmVjdXJzaXZlTWVyZ2UoZSx0KSxlKX19LHtrZXk6XCJkb1JlY3Vyc2l2ZU1lcmdlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4gaW4gdCl7dmFyIGk9dFtuXSxyPWVbbl07WShpKSYmdm9pZCAwPT09aS5zJiZZKHIpP3RoaXMuZG9SZWN1cnNpdmVNZXJnZShyLGkpOmVbbl09aX19fSx7a2V5OlwiY29tcG9uZW50VG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZWN1cnNpdmVDSURUb1N0cmluZyh0aGlzLnJlbmRlcmVkLmMsZSl9fSx7a2V5OlwicHJ1bmVDSURzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztlLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGRlbGV0ZSB0LnJlbmRlcmVkLmNbZV19KX19LHtrZXk6XCJnZXRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJlbmRlcmVkfX0se2tleTpcImlzTmV3RmluZ2VycHJpbnRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiEhKGFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSkuc319LHtrZXk6XCJ0b091dHB1dEJ1ZmZlclwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7aWYoZS5kKXJldHVybiB0aGlzLmNvbXByZWhlbnNpb25Ub0J1ZmZlcihlLHQpO3ZhciBuPWUuczt0LmJ1ZmZlcis9blswXTtmb3IodmFyIGk9MTtpPG4ubGVuZ3RoO2krKyl0aGlzLmR5bmFtaWNUb0J1ZmZlcihlW2ktMV0sdCksdC5idWZmZXIrPW5baV19fSx7a2V5OlwiY29tcHJlaGVuc2lvblRvQnVmZmVyXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49ZS5kLGk9ZS5zLHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIG89bltyXTt0LmJ1ZmZlcis9aVswXTtmb3IodmFyIGE9MTthPGkubGVuZ3RoO2ErKyl0aGlzLmR5bmFtaWNUb0J1ZmZlcihvW2EtMV0sdCksdC5idWZmZXIrPWlbYV19fX0se2tleTpcImR5bmFtaWNUb0J1ZmZlclwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7XCJudW1iZXJcIj09dHlwZW9mIGU/dC5idWZmZXIrPXRoaXMucmVjdXJzaXZlQ0lEVG9TdHJpbmcodC5jb21wb25lbnRzLGUsdC5vbmx5Q2lkcyk6WShlKT90aGlzLnRvT3V0cHV0QnVmZmVyKGUsdCk6dC5idWZmZXIrPWV9fSx7a2V5OlwicmVjdXJzaXZlQ0lEVG9TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7dmFyIGk9dGhpcyxyPWVbdF18fHooXCJubyBjb21wb25lbnQgZm9yIENJRCBcIi5jb25jYXQodCksZSksbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7by5pbm5lckhUTUw9dGhpcy5yZWN1cnNpdmVUb1N0cmluZyhyLGUsbik7dmFyIGE9by5jb250ZW50LHU9biYmIW4uaGFzKHQpLHM9eChBcnJheS5mcm9tKGEuY2hpbGROb2RlcykucmVkdWNlKGZ1bmN0aW9uKGUsbixyKXt2YXIgYT14KGUsMikscz1hWzBdLGM9YVsxXTtyZXR1cm4gbi5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFP24uZ2V0QXR0cmlidXRlKGopP1tzLCEwXToobi5zZXRBdHRyaWJ1dGUoaix0KSxuLmlkfHwobi5pZD1cIlwiLmNvbmNhdChpLnBhcmVudFZpZXdJZCgpLFwiLVwiKS5jb25jYXQodCxcIi1cIikuY29uY2F0KHIpKSx1JiYobi5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1za2lwXCIsXCJcIiksbi5pbm5lckhUTUw9XCJcIiksWyEwLGNdKTpcIlwiIT09bi5ub2RlVmFsdWUudHJpbSgpPyh6KFwib25seSBIVE1MIGVsZW1lbnQgdGFncyBhcmUgYWxsb3dlZCBhdCB0aGUgcm9vdCBvZiBjb21wb25lbnRzLlxcblxcblwiKydnb3Q6IFwiJy5jb25jYXQobi5ub2RlVmFsdWUudHJpbSgpLCdcIlxcblxcbicpK1wid2l0aGluOlxcblwiLG8uaW5uZXJIVE1MLnRyaW0oKSksbi5yZXBsYWNlV2l0aChpLmNyZWF0ZVNwYW4obi5ub2RlVmFsdWUsdCkpLFshMCxjXSk6KG4ucmVtb3ZlKCksW3MsY10pfSxbITEsITFdKSwyKSxjPXNbMF0sbD1zWzFdO3JldHVybiBjfHxsPyFjJiZsPyh6KFwiZXhwZWN0ZWQgYXQgbGVhc3Qgb25lIEhUTUwgZWxlbWVudCB0YWcgZGlyZWN0bHkgaW5zaWRlIGEgY29tcG9uZW50LCBidXQgb25seSBzdWJjb21wb25lbnRzIHdlcmUgZm91bmQuIEEgY29tcG9uZW50IG11c3QgcmVuZGVyIGF0IGxlYXN0IG9uZSBIVE1MIHRhZyBkaXJlY3RseSBpbnNpZGUgaXRzZWxmLlwiLG8uaW5uZXJIVE1MLnRyaW0oKSksby5pbm5lckhUTUwpOm8uaW5uZXJIVE1MOih6KFwiZXhwZWN0ZWQgYXQgbGVhc3Qgb25lIEhUTUwgZWxlbWVudCB0YWcgaW5zaWRlIGEgY29tcG9uZW50LCBidXQgdGhlIGNvbXBvbmVudCBpcyBlbXB0eTpcXG5cIixvLmlubmVySFRNTC50cmltKCkpLHRoaXMuY3JlYXRlU3BhbihcIlwiLHQpLm91dGVySFRNTCl9fSx7a2V5OlwiY3JlYXRlU3BhblwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7cmV0dXJuIG4uaW5uZXJUZXh0PWUsbi5zZXRBdHRyaWJ1dGUoaix0KSxufX1dKSxlfSgpLHNlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4pe3ZhciBpPXRoaXMscj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e307aWYoVCh0aGlzLGUpLHRoaXMudW5sb2FkZWQ9ITEsIW58fFwiT2JqZWN0XCI9PT1uLmNvbnN0cnVjdG9yLm5hbWUpdGhyb3cgbmV3IEVycm9yKCdcXG4gICAgICBhIHBob2VuaXggU29ja2V0IG11c3QgYmUgcHJvdmlkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byB0aGUgTGl2ZVNvY2tldCBjb25zdHJ1Y3Rvci4gRm9yIGV4YW1wbGU6XFxuXFxuICAgICAgICAgIGltcG9ydCB7U29ja2V0fSBmcm9tIFwicGhvZW5peFwiXFxuICAgICAgICAgIGltcG9ydCB7TGl2ZVNvY2tldH0gZnJvbSBcInBob2VuaXhfbGl2ZV92aWV3XCJcXG4gICAgICAgICAgbGV0IGxpdmVTb2NrZXQgPSBuZXcgTGl2ZVNvY2tldChcIi9saXZlXCIsIFNvY2tldCwgey4uLn0pXFxuICAgICAgJyk7dGhpcy5zb2NrZXQ9bmV3IG4odCxyKSx0aGlzLmJpbmRpbmdQcmVmaXg9ci5iaW5kaW5nUHJlZml4fHxXLHRoaXMub3B0cz1yLHRoaXMucGFyYW1zPSQoci5wYXJhbXN8fHt9KSx0aGlzLnZpZXdMb2dnZXI9ci52aWV3TG9nZ2VyLHRoaXMubWV0YWRhdGFDYWxsYmFja3M9ci5tZXRhZGF0YXx8e30sdGhpcy5kZWZhdWx0cz1PYmplY3QuYXNzaWduKFgocSksci5kZWZhdWx0c3x8e30pLHRoaXMuYWN0aXZlRWxlbWVudD1udWxsLHRoaXMucHJldkFjdGl2ZT1udWxsLHRoaXMuc2lsZW5jZWQ9ITEsdGhpcy5tYWluPW51bGwsdGhpcy5saW5rUmVmPTAsdGhpcy5yb290cz17fSx0aGlzLmhyZWY9d2luZG93LmxvY2F0aW9uLmhyZWYsdGhpcy5wZW5kaW5nTGluaz1udWxsLHRoaXMuY3VycmVudExvY2F0aW9uPVgod2luZG93LmxvY2F0aW9uKSx0aGlzLmhvb2tzPXIuaG9va3N8fHt9LHRoaXMudXBsb2FkZXJzPXIudXBsb2FkZXJzfHx7fSx0aGlzLmxvYWRlclRpbWVvdXQ9ci5sb2FkZXJUaW1lb3V0fHxWLHRoaXMuYm91bmRUb3BMZXZlbEV2ZW50cz0hMSx0aGlzLmRvbUNhbGxiYWNrcz1PYmplY3QuYXNzaWduKHtvbk5vZGVBZGRlZDokKCksb25CZWZvcmVFbFVwZGF0ZWQ6JCgpfSxyLmRvbXx8e30pLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidW5sb2FkXCIsZnVuY3Rpb24oZSl7aS51bmxvYWRlZD0hMH0pLHRoaXMuc29ja2V0Lm9uT3BlbihmdW5jdGlvbigpe2kuaXNVbmxvYWRlZCgpJiZ3aW5kb3cubG9jYXRpb24ucmVsb2FkKCl9KX1yZXR1cm4gRChlLFt7a2V5OlwiaXNQcm9maWxlRW5hYmxlZFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCJ0cnVlXCI9PT1zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicGh4OmxpdmUtc29ja2V0OnByb2ZpbGluZ1wiKX19LHtrZXk6XCJpc0RlYnVnRW5hYmxlZFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCJ0cnVlXCI9PT1zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicGh4OmxpdmUtc29ja2V0OmRlYnVnXCIpfX0se2tleTpcImVuYWJsZURlYnVnXCIsdmFsdWU6ZnVuY3Rpb24oKXtzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwicGh4OmxpdmUtc29ja2V0OmRlYnVnXCIsXCJ0cnVlXCIpfX0se2tleTpcImVuYWJsZVByb2ZpbGluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7c2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcInBoeDpsaXZlLXNvY2tldDpwcm9maWxpbmdcIixcInRydWVcIil9fSx7a2V5OlwiZGlzYWJsZURlYnVnXCIsdmFsdWU6ZnVuY3Rpb24oKXtzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFwicGh4OmxpdmUtc29ja2V0OmRlYnVnXCIpfX0se2tleTpcImRpc2FibGVQcm9maWxpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3Nlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oXCJwaHg6bGl2ZS1zb2NrZXQ6cHJvZmlsaW5nXCIpfX0se2tleTpcImVuYWJsZUxhdGVuY3lTaW1cIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLmVuYWJsZURlYnVnKCksY29uc29sZS5sb2coXCJsYXRlbmN5IHNpbXVsYXRvciBlbmFibGVkIGZvciB0aGUgZHVyYXRpb24gb2YgdGhpcyBicm93c2VyIHNlc3Npb24uIENhbGwgZGlzYWJsZUxhdGVuY3lTaW0oKSB0byBkaXNhYmxlXCIpLHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJwaHg6bGl2ZS1zb2NrZXQ6bGF0ZW5jeS1zaW1cIixlKX19LHtrZXk6XCJkaXNhYmxlTGF0ZW5jeVNpbVwiLHZhbHVlOmZ1bmN0aW9uKCl7c2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShcInBoeDpsaXZlLXNvY2tldDpsYXRlbmN5LXNpbVwiKX19LHtrZXk6XCJnZXRMYXRlbmN5U2ltXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicGh4OmxpdmUtc29ja2V0OmxhdGVuY3ktc2ltXCIpO3JldHVybiBlP3BhcnNlSW50KGUpOm51bGx9fSx7a2V5OlwiZ2V0U29ja2V0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zb2NrZXR9fSx7a2V5OlwiY29ubmVjdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWZ1bmN0aW9uKCl7ZS5qb2luUm9vdFZpZXdzKCkmJihlLmJpbmRUb3BMZXZlbEV2ZW50cygpLGUuc29ja2V0LmNvbm5lY3QoKSl9O1tcImNvbXBsZXRlXCIsXCJsb2FkZWRcIixcImludGVyYWN0aXZlXCJdLmluZGV4T2YoZG9jdW1lbnQucmVhZHlTdGF0ZSk+PTA/dCgpOmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsZnVuY3Rpb24oKXtyZXR1cm4gdCgpfSl9fSx7a2V5OlwiZGlzY29ubmVjdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuc29ja2V0LmRpc2Nvbm5lY3QoZSl9fSx7a2V5OlwidHJpZ2dlckRPTVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG47KG49dGhpcy5kb21DYWxsYmFja3MpW2VdLmFwcGx5KG4sRSh0KSl9fSx7a2V5OlwidGltZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7aWYoIXRoaXMuaXNQcm9maWxlRW5hYmxlZCgpfHwhY29uc29sZS50aW1lKXJldHVybiB0KCk7Y29uc29sZS50aW1lKGUpO3ZhciBuPXQoKTtyZXR1cm4gY29uc29sZS50aW1lRW5kKGUpLG59fSx7a2V5OlwibG9nXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe2lmKHRoaXMudmlld0xvZ2dlcil7dmFyIGk9eChuKCksMikscj1pWzBdLG89aVsxXTt0aGlzLnZpZXdMb2dnZXIoZSx0LHIsbyl9ZWxzZSBpZih0aGlzLmlzRGVidWdFbmFibGVkKCkpe3ZhciBhPXgobigpLDIpLHU9YVswXSxzPWFbMV07SyhlLHQsdSxzKX19fSx7a2V5Olwib25DaGFubmVsXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPXRoaXM7ZS5vbih0LGZ1bmN0aW9uKGUpe3ZhciB0PWkuZ2V0TGF0ZW5jeVNpbSgpO3Q/KGNvbnNvbGUubG9nKFwic2ltdWxhdGluZyBcIi5jb25jYXQodCxcIm1zIG9mIGxhdGVuY3kgZnJvbSBzZXJ2ZXIgdG8gY2xpZW50XCIpKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIG4oZSl9LHQpKTpuKGUpfSl9fSx7a2V5Olwid3JhcFB1c2hcIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7dmFyIGk9dGhpcyxyPXRoaXMuZ2V0TGF0ZW5jeVNpbSgpO2lmKCFyKXJldHVybiB0LnRpbWVvdXQ/bigpLnJlY2VpdmUoXCJ0aW1lb3V0XCIsZnVuY3Rpb24oKXtlLmlzRGVzdHJveWVkKCl8fGkucmVsb2FkV2l0aEppdHRlcihlLGZ1bmN0aW9uKCl7aS5sb2coZSxcInRpbWVvdXRcIixmdW5jdGlvbigpe3JldHVybltcInJlY2VpdmVkIHRpbWVvdXQgd2hpbGUgY29tbXVuaWNhdGluZyB3aXRoIHNlcnZlci4gRmFsbGluZyBiYWNrIHRvIGhhcmQgcmVmcmVzaCBmb3IgcmVjb3ZlcnlcIl19KX0pfSk6bigpO2NvbnNvbGUubG9nKFwic2ltdWxhdGluZyBcIi5jb25jYXQocixcIm1zIG9mIGxhdGVuY3kgZnJvbSBjbGllbnQgdG8gc2VydmVyXCIpKTt2YXIgbz17cmVjZWl2ZXM6W10scmVjZWl2ZTpmdW5jdGlvbihlLHQpe3RoaXMucmVjZWl2ZXMucHVzaChbZSx0XSl9fTtyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe28ucmVjZWl2ZXMucmVkdWNlKGZ1bmN0aW9uKGUsdCl7dmFyIG49eCh0LDIpLGk9blswXSxyPW5bMV07cmV0dXJuIGUucmVjZWl2ZShpLHIpfSxuKCkpfSxyKSxvfX0se2tleTpcInJlbG9hZFdpdGhKaXR0ZXJcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7ZS5kZXN0cm95KCksdGhpcy5kaXNjb25uZWN0KCk7dmFyIGk9TlswXSxyPU5bMV0sbz1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKHItaSsxKSkraSxhPWNlLnVwZGF0ZUxvY2FsKGUubmFtZSgpLFwiY29uc2VjdXRpdmUtcmVsb2Fkc1wiLDAsZnVuY3Rpb24oZSl7cmV0dXJuIGUrMX0pO3Q/dCgpOnRoaXMubG9nKGUsXCJqb2luXCIsZnVuY3Rpb24oKXtyZXR1cm5bXCJlbmNvdW50ZXJlZCBcIi5jb25jYXQoYSxcIiBjb25zZWN1dGl2ZSByZWxvYWRzXCIpXX0pLGE+MTAmJih0aGlzLmxvZyhlLFwiam9pblwiLGZ1bmN0aW9uKCl7cmV0dXJuW1wiZXhjZWVkZWQgXCIuY29uY2F0KDEwLFwiIGNvbnNlY3V0aXZlIHJlbG9hZHMuIEVudGVyaW5nIGZhaWxzYWZlIG1vZGVcIildfSksbz0zZTQpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtuLmhhc1BlbmRpbmdMaW5rKCk/d2luZG93LmxvY2F0aW9uPW4ucGVuZGluZ0xpbms6d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpfSxvKX19LHtrZXk6XCJnZXRIb29rQ2FsbGJhY2tzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuc3RhcnRzV2l0aChcIlBob2VuaXguXCIpP3RlW2Uuc3BsaXQoXCIuXCIpWzFdXTp0aGlzLmhvb2tzW2VdfX0se2tleTpcImlzVW5sb2FkZWRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnVubG9hZGVkfX0se2tleTpcImlzQ29ubmVjdGVkXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKX19LHtrZXk6XCJnZXRCaW5kaW5nUHJlZml4XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5iaW5kaW5nUHJlZml4fX0se2tleTpcImJpbmRpbmdcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm5cIlwiLmNvbmNhdCh0aGlzLmdldEJpbmRpbmdQcmVmaXgoKSkuY29uY2F0KGUpfX0se2tleTpcImNoYW5uZWxcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLnNvY2tldC5jaGFubmVsKGUsdCl9fSx7a2V5Olwiam9pblJvb3RWaWV3c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PSExO3JldHVybiBsZS5hbGwoZG9jdW1lbnQsXCJcIi5jb25jYXQoTSxcIjpub3QoW1wiKS5jb25jYXQoXCJkYXRhLXBoeC1wYXJlbnQtaWRcIixcIl0pXCIpLGZ1bmN0aW9uKG4pe2lmKCFlLmdldFJvb3RCeUlkKG4uaWQpKXt2YXIgaT1lLmpvaW5Sb290VmlldyhuLGUuZ2V0SHJlZigpKTtlLnJvb3Q9ZS5yb290fHxpLG4uZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtbWFpblwiKSYmKGUubWFpbj1pKX10PSEwfSksdH19LHtrZXk6XCJyZWRpcmVjdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dGhpcy5kaXNjb25uZWN0KCksY2UucmVkaXJlY3QoZSx0KX19LHtrZXk6XCJyZXBsYWNlTWFpblwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcyxpPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsLHI9YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOnRoaXMuc2V0UGVuZGluZ0xpbmsoZSksbz10aGlzLm1haW4uZWw7dGhpcy5tYWluLnNob3dMb2FkZXIodGhpcy5sb2FkZXJUaW1lb3V0KSx0aGlzLm1haW4uZGVzdHJveSgpLGNlLmZldGNoUGFnZShlLGZ1bmN0aW9uKGEsdSl7aWYoMjAwIT09YSlyZXR1cm4gbi5yZWRpcmVjdChlKTt2YXIgcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7cy5pbm5lckhUTUw9dTt2YXIgYz1zLmNvbnRlbnQuY2hpbGROb2Rlc1swXTtpZighY3x8IW4uaXNQaHhWaWV3KGMpKXJldHVybiBuLnJlZGlyZWN0KGUpO24uam9pblJvb3RWaWV3KGMsZSx0LGZ1bmN0aW9uKGUsdCl7MT09PXQmJihuLmNvbW1pdFBlbmRpbmdMaW5rKHIpPyhvLnJlcGxhY2VXaXRoKGUuZWwpLG4ubWFpbj1lLGkmJmkoKSk6ZS5kZXN0cm95KCkpfSl9KX19LHtrZXk6XCJpc1BoeFZpZXdcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUmJm51bGwhPT1lLmdldEF0dHJpYnV0ZShPKX19LHtrZXk6XCJqb2luUm9vdFZpZXdcIix2YWx1ZTpmdW5jdGlvbihlLHQsbixpKXt2YXIgcj1uZXcgZmUoZSx0aGlzLG51bGwsdCxuKTtyZXR1cm4gdGhpcy5yb290c1tyLmlkXT1yLHIuam9pbihpKSxyfX0se2tleTpcIm93bmVyXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLGk9WihlLmNsb3Nlc3QoTSksZnVuY3Rpb24oZSl7cmV0dXJuIG4uZ2V0Vmlld0J5RWwoZSl9KTtpJiZ0KGkpfX0se2tleTpcIndpdGhpbk93bmVyc1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpczt0aGlzLm93bmVyKGUsZnVuY3Rpb24oaSl7dmFyIHI9ZS5nZXRBdHRyaWJ1dGUobi5iaW5kaW5nKFwidGFyZ2V0XCIpKTtudWxsPT09cj90KGksZSk6aS53aXRoaW5UYXJnZXRzKHIsdCl9KX19LHtrZXk6XCJnZXRWaWV3QnlFbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtcm9vdC1pZFwiKTtyZXR1cm4gWih0aGlzLmdldFJvb3RCeUlkKHQpLGZ1bmN0aW9uKHQpe3JldHVybiB0LmdldERlc2NlbmRlbnRCeUVsKGUpfSl9fSx7a2V5OlwiZ2V0Um9vdEJ5SWRcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yb290c1tlXX19LHtrZXk6XCJkZXN0cm95QWxsVmlld3NcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgZSBpbiB0aGlzLnJvb3RzKXRoaXMucm9vdHNbZV0uZGVzdHJveSgpLGRlbGV0ZSB0aGlzLnJvb3RzW2VdfX0se2tleTpcImRlc3Ryb3lWaWV3QnlFbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZ2V0Um9vdEJ5SWQoZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1yb290LWlkXCIpKTt0JiZ0LmRlc3Ryb3lEZXNjZW5kZW50KGUuaWQpfX0se2tleTpcInNldEFjdGl2ZUVsZW1lbnRcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKHRoaXMuYWN0aXZlRWxlbWVudCE9PWUpe3RoaXMuYWN0aXZlRWxlbWVudD1lO3ZhciBuPWZ1bmN0aW9uKCl7ZT09PXQuYWN0aXZlRWxlbWVudCYmKHQuYWN0aXZlRWxlbWVudD1udWxsKSxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsdCksZS5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIix0KX07ZS5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLG4pLGUuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsbil9fX0se2tleTpcImdldEFjdGl2ZUVsZW1lbnRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50PT09ZG9jdW1lbnQuYm9keT90aGlzLmFjdGl2ZUVsZW1lbnR8fGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ6ZG9jdW1lbnQuYWN0aXZlRWxlbWVudHx8ZG9jdW1lbnQuYm9keX19LHtrZXk6XCJkcm9wQWN0aXZlRWxlbWVudFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMucHJldkFjdGl2ZSYmZS5vd25zRWxlbWVudCh0aGlzLnByZXZBY3RpdmUpJiYodGhpcy5wcmV2QWN0aXZlPW51bGwpfX0se2tleTpcInJlc3RvcmVQcmV2aW91c2x5QWN0aXZlRm9jdXNcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMucHJldkFjdGl2ZSYmdGhpcy5wcmV2QWN0aXZlIT09ZG9jdW1lbnQuYm9keSYmdGhpcy5wcmV2QWN0aXZlLmZvY3VzKCl9fSx7a2V5OlwiYmx1ckFjdGl2ZUVsZW1lbnRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMucHJldkFjdGl2ZT10aGlzLmdldEFjdGl2ZUVsZW1lbnQoKSx0aGlzLnByZXZBY3RpdmUhPT1kb2N1bWVudC5ib2R5JiZ0aGlzLnByZXZBY3RpdmUuYmx1cigpfX0se2tleTpcImJpbmRUb3BMZXZlbEV2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmJvdW5kVG9wTGV2ZWxFdmVudHN8fCh0aGlzLmJvdW5kVG9wTGV2ZWxFdmVudHM9ITAsd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlc2hvd1wiLGZ1bmN0aW9uKHQpe3QucGVyc2lzdGVkJiYoZS53aXRoUGFnZUxvYWRpbmcoe3RvOndpbmRvdy5sb2NhdGlvbi5ocmVmLGtpbmQ6XCJyZWRpcmVjdFwifSksd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpKX0pLHRoaXMuYmluZENsaWNrcygpLHRoaXMuYmluZE5hdigpLHRoaXMuYmluZEZvcm1zKCksdGhpcy5iaW5kKHtrZXl1cDpcImtleXVwXCIsa2V5ZG93bjpcImtleWRvd25cIn0sZnVuY3Rpb24odCxuLGkscixvLGEsdSl7dmFyIHM9ci5nZXRBdHRyaWJ1dGUoZS5iaW5kaW5nKFwia2V5XCIpKSxjPXQua2V5JiZ0LmtleS50b0xvd2VyQ2FzZSgpO3MmJnMudG9Mb3dlckNhc2UoKSE9PWN8fGkucHVzaEtleShyLG8sbixhLGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBuPW51bGwhPWFyZ3VtZW50c1t0XT9hcmd1bWVudHNbdF06e307dCUyP3coT2JqZWN0KG4pLCEwKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe0EoZSx0LG5bdF0pfSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhuKSk6dyhPYmplY3QobikpLmZvckVhY2goZnVuY3Rpb24odCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sdCkpfSl9cmV0dXJuIGV9KHtrZXk6dC5rZXl9LGUuZXZlbnRNZXRhKG4sdCxyKSkpfSksdGhpcy5iaW5kKHtibHVyOlwiZm9jdXNvdXRcIixmb2N1czpcImZvY3VzaW5cIn0sZnVuY3Rpb24odCxuLGkscixvLGEsdSl7dXx8aS5wdXNoRXZlbnQobixyLG8sYSxlLmV2ZW50TWV0YShuLHQscikpfSksdGhpcy5iaW5kKHtibHVyOlwiYmx1clwiLGZvY3VzOlwiZm9jdXNcIn0sZnVuY3Rpb24odCxuLGkscixvLGEsdSl7dSYmXCJ3aW5kb3dcIiE9PSF1JiZpLnB1c2hFdmVudChuLHIsbyxhLGUuZXZlbnRNZXRhKG4sdCxyKSl9KSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdvdmVyXCIsZnVuY3Rpb24oZSl7cmV0dXJuIGUucHJldmVudERlZmF1bHQoKX0pLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLGZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKTt2YXIgbj1aKEcodC50YXJnZXQsZS5iaW5kaW5nKFwiZHJvcC10YXJnZXRcIikpLGZ1bmN0aW9uKHQpe3JldHVybiB0LmdldEF0dHJpYnV0ZShlLmJpbmRpbmcoXCJkcm9wLXRhcmdldFwiKSl9KSxpPW4mJmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG4pLHI9QXJyYXkuZnJvbSh0LmRhdGFUcmFuc2Zlci5maWxlc3x8W10pO2kmJiFpLmRpc2FibGVkJiYwIT09ci5sZW5ndGgmJmkuZmlsZXMgaW5zdGFuY2VvZiBGaWxlTGlzdCYmKGllLnRyYWNrRmlsZXMoaSxyKSxpLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIix7YnViYmxlczohMH0pKSl9KSl9fSx7a2V5OlwiZXZlbnRNZXRhXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPXRoaXMubWV0YWRhdGFDYWxsYmFja3NbZV07cmV0dXJuIGk/aSh0LG4pOnt9fX0se2tleTpcInNldFBlbmRpbmdMaW5rXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMubGlua1JlZisrLHRoaXMucGVuZGluZ0xpbms9ZSx0aGlzLmxpbmtSZWZ9fSx7a2V5OlwiY29tbWl0UGVuZGluZ0xpbmtcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5saW5rUmVmPT09ZSYmKHRoaXMuaHJlZj10aGlzLnBlbmRpbmdMaW5rLHRoaXMucGVuZGluZ0xpbms9bnVsbCwhMCl9fSx7a2V5OlwiZ2V0SHJlZlwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaHJlZn19LHtrZXk6XCJoYXNQZW5kaW5nTGlua1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLnBlbmRpbmdMaW5rfX0se2tleTpcImJpbmRcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMsaT1mdW5jdGlvbihpKXt2YXIgcj1lW2ldO24ub24ocixmdW5jdGlvbihlKXt2YXIgcj1uLmJpbmRpbmcoaSksbz1uLmJpbmRpbmcoXCJ3aW5kb3ctXCIuY29uY2F0KGkpKSxhPWUudGFyZ2V0LmdldEF0dHJpYnV0ZSYmZS50YXJnZXQuZ2V0QXR0cmlidXRlKHIpO2E/bi5kZWJvdW5jZShlLnRhcmdldCxlLGZ1bmN0aW9uKCl7bi53aXRoaW5Pd25lcnMoZS50YXJnZXQsZnVuY3Rpb24obixyKXt0KGUsaSxuLGUudGFyZ2V0LHIsYSxudWxsKX0pfSk6bGUuYWxsKGRvY3VtZW50LFwiW1wiLmNvbmNhdChvLFwiXVwiKSxmdW5jdGlvbihyKXt2YXIgYT1yLmdldEF0dHJpYnV0ZShvKTtuLmRlYm91bmNlKHIsZSxmdW5jdGlvbigpe24ud2l0aGluT3duZXJzKHIsZnVuY3Rpb24obixvKXt0KGUsaSxuLHIsbyxhLFwid2luZG93XCIpfSl9KX0pfSl9O2Zvcih2YXIgciBpbiBlKWkocil9fSx7a2V5OlwiYmluZENsaWNrc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztbITAsITFdLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIG49dD9lLmJpbmRpbmcoXCJjYXB0dXJlLWNsaWNrXCIpOmUuYmluZGluZyhcImNsaWNrXCIpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbihpKXt2YXIgcj1udWxsLG89KHI9dD9pLnRhcmdldC5tYXRjaGVzKFwiW1wiLmNvbmNhdChuLFwiXVwiKSk/aS50YXJnZXQ6aS50YXJnZXQucXVlcnlTZWxlY3RvcihcIltcIi5jb25jYXQobixcIl1cIikpOkcoaS50YXJnZXQsbikpJiZyLmdldEF0dHJpYnV0ZShuKTtvJiYoXCIjXCI9PT1yLmdldEF0dHJpYnV0ZShcImhyZWZcIikmJmkucHJldmVudERlZmF1bHQoKSxlLmRlYm91bmNlKHIsaSxmdW5jdGlvbigpe2Uud2l0aGluT3duZXJzKHIsZnVuY3Rpb24odCxuKXt0LnB1c2hFdmVudChcImNsaWNrXCIscixuLG8sZS5ldmVudE1ldGEoXCJjbGlja1wiLGkscikpfSl9KSl9LHQpfSl9fSx7a2V5OlwiYmluZE5hdlwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZihjZS5jYW5QdXNoU3RhdGUoKSl7aGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiYmKGhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb249XCJtYW51YWxcIik7dmFyIHQ9bnVsbDt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLGZ1bmN0aW9uKGUpe2NsZWFyVGltZW91dCh0KSx0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtjZS51cGRhdGVDdXJyZW50U3RhdGUoZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5hc3NpZ24oZSx7c2Nyb2xsOndpbmRvdy5zY3JvbGxZfSl9KX0sMTAwKX0pLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIixmdW5jdGlvbih0KXtpZihlLnJlZ2lzdGVyTmV3TG9jYXRpb24od2luZG93LmxvY2F0aW9uKSl7dmFyIG49dC5zdGF0ZXx8e30saT1uLnR5cGUscj1uLmlkLG89bi5yb290LGE9bi5zY3JvbGwsdT13aW5kb3cubG9jYXRpb24uaHJlZjtlLm1haW4uaXNDb25uZWN0ZWQoKSYmXCJwYXRjaFwiPT09aSYmcj09PWUubWFpbi5pZD9lLm1haW4ucHVzaExpbmtQYXRjaCh1LG51bGwpOmUucmVwbGFjZU1haW4odSxudWxsLGZ1bmN0aW9uKCl7byYmZS5yZXBsYWNlUm9vdEhpc3RvcnkoKSxcIm51bWJlclwiPT10eXBlb2YgYSYmc2V0VGltZW91dChmdW5jdGlvbigpe3dpbmRvdy5zY3JvbGxUbygwLGEpfSwwKX0pfX0sITEpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbih0KXt2YXIgbj1HKHQudGFyZ2V0LFwiZGF0YS1waHgtbGlua1wiKSxpPW4mJm4uZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtbGlua1wiKSxyPXQubWV0YUtleXx8dC5jdHJsS2V5fHwxPT09dC5idXR0b247aWYoaSYmZS5pc0Nvbm5lY3RlZCgpJiZlLm1haW4mJiFyKXt2YXIgbz1uLmhyZWYsYT1uLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LWxpbmstc3RhdGVcIik7aWYodC5wcmV2ZW50RGVmYXVsdCgpLGUucGVuZGluZ0xpbmshPT1vKWlmKFwicGF0Y2hcIj09PWkpZS5wdXNoSGlzdG9yeVBhdGNoKG8sYSxuKTtlbHNle2lmKFwicmVkaXJlY3RcIiE9PWkpdGhyb3cgbmV3IEVycm9yKFwiZXhwZWN0ZWQgXCIuY29uY2F0KFwiZGF0YS1waHgtbGlua1wiLCcgdG8gYmUgXCJwYXRjaFwiIG9yIFwicmVkaXJlY3RcIiwgZ290OiAnKS5jb25jYXQoaSkpO2UuaGlzdG9yeVJlZGlyZWN0KG8sYSl9fX0sITEpfX19LHtrZXk6XCJ3aXRoUGFnZUxvYWRpbmdcIix2YWx1ZTpmdW5jdGlvbihlLHQpe2xlLmRpc3BhdGNoRXZlbnQod2luZG93LFwicGh4OnBhZ2UtbG9hZGluZy1zdGFydFwiLGUpO3ZhciBuPWZ1bmN0aW9uKCl7cmV0dXJuIGxlLmRpc3BhdGNoRXZlbnQod2luZG93LFwicGh4OnBhZ2UtbG9hZGluZy1zdG9wXCIsZSl9O3JldHVybiB0P3Qobik6bn19LHtrZXk6XCJwdXNoSGlzdG9yeVBhdGNoXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPXRoaXM7dGhpcy53aXRoUGFnZUxvYWRpbmcoe3RvOmUsa2luZDpcInBhdGNoXCJ9LGZ1bmN0aW9uKHIpe2kubWFpbi5wdXNoTGlua1BhdGNoKGUsbixmdW5jdGlvbigpe2kuaGlzdG9yeVBhdGNoKGUsdCkscigpfSl9KX19LHtrZXk6XCJoaXN0b3J5UGF0Y2hcIix2YWx1ZTpmdW5jdGlvbihlLHQpe2NlLnB1c2hTdGF0ZSh0LHt0eXBlOlwicGF0Y2hcIixpZDp0aGlzLm1haW4uaWR9LGUpLHRoaXMucmVnaXN0ZXJOZXdMb2NhdGlvbih3aW5kb3cubG9jYXRpb24pfX0se2tleTpcImhpc3RvcnlSZWRpcmVjdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgaT10aGlzLHI9d2luZG93LnNjcm9sbFk7dGhpcy53aXRoUGFnZUxvYWRpbmcoe3RvOmUsa2luZDpcInJlZGlyZWN0XCJ9LGZ1bmN0aW9uKG8pe2kucmVwbGFjZU1haW4oZSxuLGZ1bmN0aW9uKCl7Y2UucHVzaFN0YXRlKHQse3R5cGU6XCJyZWRpcmVjdFwiLGlkOmkubWFpbi5pZCxzY3JvbGw6cn0sZSksaS5yZWdpc3Rlck5ld0xvY2F0aW9uKHdpbmRvdy5sb2NhdGlvbiksbygpfSl9KX19LHtrZXk6XCJyZXBsYWNlUm9vdEhpc3RvcnlcIix2YWx1ZTpmdW5jdGlvbigpe2NlLnB1c2hTdGF0ZShcInJlcGxhY2VcIix7cm9vdDohMCx0eXBlOlwicGF0Y2hcIixpZDp0aGlzLm1haW4uaWR9KX19LHtrZXk6XCJyZWdpc3Rlck5ld0xvY2F0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5jdXJyZW50TG9jYXRpb247cmV0dXJuIHQucGF0aG5hbWUrdC5zZWFyY2ghPT1lLnBhdGhuYW1lK2Uuc2VhcmNoJiYodGhpcy5jdXJyZW50TG9jYXRpb249WChlKSwhMCl9fSx7a2V5OlwiYmluZEZvcm1zXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9MDt0aGlzLm9uKFwic3VibWl0XCIsZnVuY3Rpb24odCl7dmFyIG49dC50YXJnZXQuZ2V0QXR0cmlidXRlKGUuYmluZGluZyhcInN1Ym1pdFwiKSk7biYmKHQucHJldmVudERlZmF1bHQoKSx0LnRhcmdldC5kaXNhYmxlZD0hMCxlLndpdGhpbk93bmVycyh0LnRhcmdldCxmdW5jdGlvbihlLGkpe3JldHVybiBlLnN1Ym1pdEZvcm0odC50YXJnZXQsaSxuKX0pKX0sITEpO2Zvcih2YXIgbj1mdW5jdGlvbigpe3ZhciBuPXJbaV07ZS5vbihuLGZ1bmN0aW9uKGkpe3ZhciByPWkudGFyZ2V0LG89ci5mb3JtJiZyLmZvcm0uZ2V0QXR0cmlidXRlKGUuYmluZGluZyhcImNoYW5nZVwiKSk7aWYobyYmKFwibnVtYmVyXCIhPT1yLnR5cGV8fCFyLnZhbGlkaXR5fHwhci52YWxpZGl0eS5iYWRJbnB1dCkpe3ZhciBhPXQ7dCsrO3ZhciB1PWxlLnByaXZhdGUocixcInByZXYtaXRlcmF0aW9uXCIpfHx7fSxzPXUuYXQsYz11LnR5cGU7cz09PWEtMSYmbiE9PWN8fChsZS5wdXRQcml2YXRlKHIsXCJwcmV2LWl0ZXJhdGlvblwiLHthdDphLHR5cGU6bn0pLGUuZGVib3VuY2UocixpLGZ1bmN0aW9uKCl7ZS53aXRoaW5Pd25lcnMoci5mb3JtLGZ1bmN0aW9uKHQsbil7bGUucHV0UHJpdmF0ZShyLFwicGh4LWhhcy1mb2N1c2VkXCIsITApLGxlLmlzVGV4dHVhbElucHV0KHIpfHxlLnNldEFjdGl2ZUVsZW1lbnQociksdC5wdXNoSW5wdXQocixuLG8saS50YXJnZXQpfSl9KSl9fSwhMSl9LGk9MCxyPVtcImNoYW5nZVwiLFwiaW5wdXRcIl07aTxyLmxlbmd0aDtpKyspbigpfX0se2tleTpcImRlYm91bmNlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPXRoaXMuYmluZGluZyhcImRlYm91bmNlXCIpLHI9dGhpcy5iaW5kaW5nKFwidGhyb3R0bGVcIiksbz10aGlzLmRlZmF1bHRzLmRlYm91bmNlLnRvU3RyaW5nKCksYT10aGlzLmRlZmF1bHRzLnRocm90dGxlLnRvU3RyaW5nKCk7bGUuZGVib3VuY2UoZSx0LGksbyxyLGEsbil9fSx7a2V5Olwic2lsZW5jZUV2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuc2lsZW5jZWQ9ITAsZSgpLHRoaXMuc2lsZW5jZWQ9ITF9fSx7a2V5Olwib25cIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZSxmdW5jdGlvbihlKXtuLnNpbGVuY2VkfHx0KGUpfSl9fV0pLGV9KCksY2U9e2NhblB1c2hTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT1oaXN0b3J5LnB1c2hTdGF0ZX0sZHJvcExvY2FsOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLmxvY2FsS2V5KGUsdCkpfSx1cGRhdGVMb2NhbDpmdW5jdGlvbihlLHQsbixpKXt2YXIgcj10aGlzLmdldExvY2FsKGUsdCksbz10aGlzLmxvY2FsS2V5KGUsdCksYT1udWxsPT09cj9uOmkocik7cmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShvLEpTT04uc3RyaW5naWZ5KGEpKSxhfSxnZXRMb2NhbDpmdW5jdGlvbihlLHQpe3JldHVybiBKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmxvY2FsS2V5KGUsdCkpKX0sZmV0Y2hQYWdlOmZ1bmN0aW9uKGUsdCl7dmFyIG49bmV3IFhNTEh0dHBSZXF1ZXN0O24ub3BlbihcIkdFVFwiLGUsITApLG4udGltZW91dD0zZTQsbi5zZXRSZXF1ZXN0SGVhZGVyKFwiY29udGVudC10eXBlXCIsXCJ0ZXh0L2h0bWxcIiksbi5zZXRSZXF1ZXN0SGVhZGVyKFwiY2FjaGUtY29udHJvbFwiLFwibWF4LWFnZT0wLCBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZSwgcG9zdC1jaGVjaz0wLCBwcmUtY2hlY2s9MFwiKSxuLnNldFJlcXVlc3RIZWFkZXIoXCJ4LXJlcXVlc3RlZC13aXRoXCIsXCJsaXZlLWxpbmtcIiksbi5vbmVycm9yPWZ1bmN0aW9uKCl7cmV0dXJuIHQoNDAwKX0sbi5vbnRpbWVvdXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdCg1MDQpfSxuLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2lmKDQ9PT1uLnJlYWR5U3RhdGUpe3ZhciBpPW5ldyBVUkwoZSkscj1pLnBhdGhuYW1lK2kuc2VhcmNoLG89WihuLmdldFJlc3BvbnNlSGVhZGVyKFwieC1yZXNwb25zZS11cmxcIil8fG4ucmVzcG9uc2VVUkwsZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBVUkwoZSl9KSxhPW8/by5wYXRobmFtZStvLnNlYXJjaDpudWxsO3JldHVyblwibGl2ZS1saW5rXCIhPT1uLmdldFJlc3BvbnNlSGVhZGVyKFwieC1yZXF1ZXN0ZWQtd2l0aFwiKT90KDQwMCk6bnVsbD09PW98fGEhPXI/dCgzMDIpOjIwMCE9PW4uc3RhdHVzP3Qobi5zdGF0dXMpOnZvaWQgdCgyMDAsbi5yZXNwb25zZVRleHQpfX0sbi5zZW5kKCl9LHVwZGF0ZUN1cnJlbnRTdGF0ZTpmdW5jdGlvbihlKXt0aGlzLmNhblB1c2hTdGF0ZSgpJiZoaXN0b3J5LnJlcGxhY2VTdGF0ZShlKGhpc3Rvcnkuc3RhdGV8fHt9KSxcIlwiLHdpbmRvdy5sb2NhdGlvbi5ocmVmKX0scHVzaFN0YXRlOmZ1bmN0aW9uKGUsdCxuKXtpZih0aGlzLmNhblB1c2hTdGF0ZSgpKXtpZihuIT09d2luZG93LmxvY2F0aW9uLmhyZWYpe2lmKFwicmVkaXJlY3RcIj09dC50eXBlJiZ0LnNjcm9sbCl7dmFyIGk9aGlzdG9yeS5zdGF0ZXx8e307aS5zY3JvbGw9dC5zY3JvbGwsaGlzdG9yeS5yZXBsYWNlU3RhdGUoaSxcIlwiLHdpbmRvdy5sb2NhdGlvbi5ocmVmKX1kZWxldGUgdC5zY3JvbGwsaGlzdG9yeVtlK1wiU3RhdGVcIl0odCxcIlwiLG58fG51bGwpO3ZhciByPXRoaXMuZ2V0SGFzaFRhcmdldEVsKHdpbmRvdy5sb2NhdGlvbi5oYXNoKTtyP3Iuc2Nyb2xsSW50b1ZpZXcoKTpcInJlZGlyZWN0XCI9PT10LnR5cGUmJndpbmRvdy5zY3JvbGwoMCwwKX19ZWxzZSB0aGlzLnJlZGlyZWN0KG4pfSxzZXRDb29raWU6ZnVuY3Rpb24oZSx0KXtkb2N1bWVudC5jb29raWU9XCJcIi5jb25jYXQoZSxcIj1cIikuY29uY2F0KHQpfSxnZXRDb29raWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGRvY3VtZW50LmNvb2tpZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoPzooPzpefC4qO3MqKVwiLmNvbmNhdChlLFwicyo9cyooW147XSopLiokKXxeLiokXCIpKSxcIiQxXCIpfSxyZWRpcmVjdDpmdW5jdGlvbihlLHQpe3QmJmNlLnNldENvb2tpZShcIl9fcGhvZW5peF9mbGFzaF9fXCIsdCtcIjsgbWF4LWFnZT02MDAwMDsgcGF0aD0vXCIpLHdpbmRvdy5sb2NhdGlvbj1lfSxsb2NhbEtleTpmdW5jdGlvbihlLHQpe3JldHVyblwiXCIuY29uY2F0KGUsXCItXCIpLmNvbmNhdCh0KX0sZ2V0SGFzaFRhcmdldEVsOmZ1bmN0aW9uKGUpe3ZhciB0PWUudG9TdHJpbmcoKS5zdWJzdHJpbmcoMSk7aWYoXCJcIiE9PXQpcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHQpfHxkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdhW25hbWU9XCInLmNvbmNhdCh0LCdcIl0nKSl9fSxsZT17YnlJZDpmdW5jdGlvbihlKXtyZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZSl8fHooXCJubyBpZCBmb3VuZCBmb3IgXCIuY29uY2F0KGUpKX0scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oZSx0KXtlLmNsYXNzTGlzdC5yZW1vdmUodCksMD09PWUuY2xhc3NMaXN0Lmxlbmd0aCYmZS5yZW1vdmVBdHRyaWJ1dGUoXCJjbGFzc1wiKX0sYWxsOmZ1bmN0aW9uKGUsdCxuKXt2YXIgaT1BcnJheS5mcm9tKGUucXVlcnlTZWxlY3RvckFsbCh0KSk7cmV0dXJuIG4/aS5mb3JFYWNoKG4pOml9LGZpbmRDb21wb25lbnROb2RlTGlzdDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmZpbHRlcldpdGhpblNhbWVMaXZlVmlldyh0aGlzLmFsbChlLFwiW1wiLmNvbmNhdChqLCc9XCInKS5jb25jYXQodCwnXCJdJykpLGUpfSxmaW5kUGh4Q2hpbGRyZW5JbkZyYWdtZW50OmZ1bmN0aW9uKGUsdCl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO3JldHVybiBuLmlubmVySFRNTD1lLHRoaXMuZmluZFBoeENoaWxkcmVuKG4uY29udGVudCx0KX0saXNJZ25vcmVkOmZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJpZ25vcmVcIj09PShlLmdldEF0dHJpYnV0ZSh0KXx8ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC11cGRhdGVcIikpfSxpc1BoeFVwZGF0ZTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGUuZ2V0QXR0cmlidXRlJiZuLmluZGV4T2YoZS5nZXRBdHRyaWJ1dGUodCkpPj0wfSxmaW5kUGh4Q2hpbGRyZW46ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5hbGwoZSxcIlwiLmNvbmNhdChNLFwiW1wiKS5jb25jYXQoXCJkYXRhLXBoeC1wYXJlbnQtaWRcIiwnPVwiJykuY29uY2F0KHQsJ1wiXScpKX0sZmluZFBhcmVudENJRHM6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLGk9bmV3IFNldCh0KTtyZXR1cm4gdC5yZWR1Y2UoZnVuY3Rpb24odCxpKXt2YXIgcj1cIltcIi5jb25jYXQoaiwnPVwiJykuY29uY2F0KGksJ1wiXSBbJykuY29uY2F0KGosXCJdXCIpO3JldHVybiBuLmZpbHRlcldpdGhpblNhbWVMaXZlVmlldyhuLmFsbChlLHIpLGUpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gcGFyc2VJbnQoZS5nZXRBdHRyaWJ1dGUoaikpfSkuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gdC5kZWxldGUoZSl9KSx0fSxpKX0sZmlsdGVyV2l0aGluU2FtZUxpdmVWaWV3OmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztyZXR1cm4gdC5xdWVyeVNlbGVjdG9yKE0pP2UuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBuLndpdGhpblNhbWVMaXZlVmlldyhlLHQpfSk6ZX0sd2l0aGluU2FtZUxpdmVWaWV3OmZ1bmN0aW9uKGUsdCl7Zm9yKDtlPWUucGFyZW50Tm9kZTspe2lmKGUuaXNTYW1lTm9kZSh0KSlyZXR1cm4hMDtpZihlLmdldEF0dHJpYnV0ZShPKSlyZXR1cm4hMX19LHByaXZhdGU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5waHhQcml2YXRlJiZlLnBoeFByaXZhdGVbdF19LGRlbGV0ZVByaXZhdGU6ZnVuY3Rpb24oZSx0KXtlLnBoeFByaXZhdGUmJmRlbGV0ZSBlLnBoeFByaXZhdGVbdF19LHB1dFByaXZhdGU6ZnVuY3Rpb24oZSx0LG4pe2UucGh4UHJpdmF0ZXx8KGUucGh4UHJpdmF0ZT17fSksZS5waHhQcml2YXRlW3RdPW59LGNvcHlQcml2YXRlczpmdW5jdGlvbihlLHQpe3QucGh4UHJpdmF0ZSYmKGUucGh4UHJpdmF0ZT1YKHQucGh4UHJpdmF0ZSkpfSxwdXRUaXRsZTpmdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwidGl0bGVcIikuZGF0YXNldCxuPXQucHJlZml4LGk9dC5zdWZmaXg7ZG9jdW1lbnQudGl0bGU9XCJcIi5jb25jYXQobnx8XCJcIikuY29uY2F0KGUpLmNvbmNhdChpfHxcIlwiKX0sZGVib3VuY2U6ZnVuY3Rpb24oZSx0LG4saSxyLG8sYSl7dmFyIHU9dGhpcyxzPWUuZ2V0QXR0cmlidXRlKG4pLGM9ZS5nZXRBdHRyaWJ1dGUocik7XCJcIj09PXMmJihzPWkpLFwiXCI9PT1jJiYoYz1vKTt2YXIgbD1zfHxjO3N3aXRjaChsKXtjYXNlIG51bGw6cmV0dXJuIGEoKTtjYXNlXCJibHVyXCI6cmV0dXJuIHZvaWQodGhpcy5vbmNlKGUsXCJkZWJvdW5jZS1ibHVyXCIpJiZlLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsZnVuY3Rpb24oKXtyZXR1cm4gYSgpfSkpO2RlZmF1bHQ6dmFyIGQ9cGFyc2VJbnQobCksaD10aGlzLmluY0N5Y2xlKGUsXCJkZWJvdW5jZS10cmlnZ2VyXCIsZnVuY3Rpb24oKXtyZXR1cm4gYz91LmRlbGV0ZVByaXZhdGUoZSxcInRocm90dGxlZFwiKTphKCl9KTtpZihpc05hTihkKSlyZXR1cm4geihcImludmFsaWQgdGhyb3R0bGUvZGVib3VuY2UgdmFsdWU6IFwiLmNvbmNhdChsKSk7aWYoYyl7dmFyIGY9ITE7aWYoXCJrZXlkb3duXCI9PT10LnR5cGUpe3ZhciB2PXRoaXMucHJpdmF0ZShlLFwiZGVib3VuY2UtcHJldi1rZXlcIik7dGhpcy5wdXRQcml2YXRlKGUsXCJkZWJvdW5jZS1wcmV2LWtleVwiLHQua2V5KSxmPXYhPT10LmtleX1pZighZiYmdGhpcy5wcml2YXRlKGUsXCJ0aHJvdHRsZWRcIikpcmV0dXJuITE7YSgpLHRoaXMucHV0UHJpdmF0ZShlLFwidGhyb3R0bGVkXCIsITApLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gdS50cmlnZ2VyQ3ljbGUoZSxcImRlYm91bmNlLXRyaWdnZXJcIil9LGQpfWVsc2Ugc2V0VGltZW91dChmdW5jdGlvbigpe3JldHVybiB1LnRyaWdnZXJDeWNsZShlLFwiZGVib3VuY2UtdHJpZ2dlclwiLGgpfSxkKTtlLmZvcm0mJnRoaXMub25jZShlLmZvcm0sXCJiaW5kLWRlYm91bmNlXCIpJiZlLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLGZ1bmN0aW9uKHQpe0FycmF5LmZyb20obmV3IEZvcm1EYXRhKGUuZm9ybSkuZW50cmllcygpLGZ1bmN0aW9uKHQpe3ZhciBuPXgodCwyKSxpPW5bMF0scj0oblsxXSxlLmZvcm0ucXVlcnlTZWxlY3RvcignW25hbWU9XCInLmNvbmNhdChpLCdcIl0nKSkpO3UuaW5jQ3ljbGUocixcImRlYm91bmNlLXRyaWdnZXJcIiksdS5kZWxldGVQcml2YXRlKHIsXCJ0aHJvdHRsZWRcIil9KX0pLHRoaXMub25jZShlLFwiYmluZC1kZWJvdW5jZVwiKSYmZS5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLGZ1bmN0aW9uKHQpe3JldHVybiB1LnRyaWdnZXJDeWNsZShlLFwiZGVib3VuY2UtdHJpZ2dlclwiKX0pfX0sdHJpZ2dlckN5Y2xlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgaT14KHRoaXMucHJpdmF0ZShlLHQpLDIpLHI9aVswXSxvPWlbMV07bnx8KG49ciksbj09PXImJih0aGlzLmluY0N5Y2xlKGUsdCksbygpKX0sb25jZTpmdW5jdGlvbihlLHQpe3JldHVybiEwIT09dGhpcy5wcml2YXRlKGUsdCkmJih0aGlzLnB1dFByaXZhdGUoZSx0LCEwKSwhMCl9LGluY0N5Y2xlOmZ1bmN0aW9uKGUsdCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmZ1bmN0aW9uKCl7fSxpPXgodGhpcy5wcml2YXRlKGUsdCl8fFswLG5dLDIpLHI9aVswXTtpWzFdO3JldHVybiByKyssdGhpcy5wdXRQcml2YXRlKGUsdCxbcixuXSkscn0sZGlzY2FyZEVycm9yOmZ1bmN0aW9uKGUsdCxuKXt2YXIgaT10LmdldEF0dHJpYnV0ZSYmdC5nZXRBdHRyaWJ1dGUobikscj1pJiZlLnF1ZXJ5U2VsZWN0b3IoXCIjXCIuY29uY2F0KGkpKTtyJiYodGhpcy5wcml2YXRlKHIsXCJwaHgtaGFzLWZvY3VzZWRcIil8fHRoaXMucHJpdmF0ZShyLmZvcm0sXCJwaHgtaGFzLXN1Ym1pdHRlZFwiKXx8dC5jbGFzc0xpc3QuYWRkKFwicGh4LW5vLWZlZWRiYWNrXCIpKX0saXNQaHhDaGlsZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUmJmUuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtcGFyZW50LWlkXCIpfSxkaXNwYXRjaEV2ZW50OmZ1bmN0aW9uKGUsdCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnt9LGk9bmV3IEN1c3RvbUV2ZW50KHQse2J1YmJsZXM6ITAsY2FuY2VsYWJsZTohMCxkZXRhaWw6bn0pO2UuZGlzcGF0Y2hFdmVudChpKX0sY2xvbmVOb2RlOmZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dClyZXR1cm4gZS5jbG9uZU5vZGUoITApO3ZhciBuPWUuY2xvbmVOb2RlKCExKTtyZXR1cm4gbi5pbm5lckhUTUw9dCxufSxtZXJnZUF0dHJzOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fSxpPW4uZXhjbHVkZXx8W10scj1uLmlzSWdub3JlZCxvPXQuYXR0cmlidXRlcyxhPW8ubGVuZ3RoLTE7YT49MDthLS0pe3ZhciB1PW9bYV0ubmFtZTtpLmluZGV4T2YodSk8MCYmZS5zZXRBdHRyaWJ1dGUodSx0LmdldEF0dHJpYnV0ZSh1KSl9Zm9yKHZhciBzPWUuYXR0cmlidXRlcyxjPXMubGVuZ3RoLTE7Yz49MDtjLS0pe3ZhciBsPXNbY10ubmFtZTtyP2wuc3RhcnRzV2l0aChcImRhdGEtXCIpJiYhdC5oYXNBdHRyaWJ1dGUobCkmJmUucmVtb3ZlQXR0cmlidXRlKGwpOnQuaGFzQXR0cmlidXRlKGwpfHxlLnJlbW92ZUF0dHJpYnV0ZShsKX19LG1lcmdlRm9jdXNlZElucHV0OmZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50fHxsZS5tZXJnZUF0dHJzKGUsdCx7ZXhjZXB0OltcInZhbHVlXCJdfSksdC5yZWFkT25seT9lLnNldEF0dHJpYnV0ZShcInJlYWRvbmx5XCIsITApOmUucmVtb3ZlQXR0cmlidXRlKFwicmVhZG9ubHlcIil9LGhhc1NlbGVjdGlvblJhbmdlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnNldFNlbGVjdGlvblJhbmdlJiYoXCJ0ZXh0XCI9PT1lLnR5cGV8fFwidGV4dGFyZWFcIj09PWUudHlwZSl9LHJlc3RvcmVGb2N1czpmdW5jdGlvbihlLHQsbil7aWYobGUuaXNUZXh0dWFsSW5wdXQoZSkpe3ZhciBpPWUubWF0Y2hlcyhcIjpmb2N1c1wiKTtlLnJlYWRPbmx5JiZlLmJsdXIoKSxpfHxlLmZvY3VzKCksdGhpcy5oYXNTZWxlY3Rpb25SYW5nZShlKSYmZS5zZXRTZWxlY3Rpb25SYW5nZSh0LG4pfX0saXNGb3JtSW5wdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWEpJC9pLnRlc3QoZS50YWdOYW1lKSYmXCJidXR0b25cIiE9PWUudHlwZX0sc3luY0F0dHJzVG9Qcm9wczpmdW5jdGlvbihlKXtlIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCYmVS5pbmRleE9mKGUudHlwZS50b0xvY2FsZUxvd2VyQ2FzZSgpKT49MCYmKGUuY2hlY2tlZD1udWxsIT09ZS5nZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIpKX0saXNUZXh0dWFsSW5wdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIEIuaW5kZXhPZihlLnR5cGUpPj0wfSxpc05vd1RyaWdnZXJGb3JtRXh0ZXJuYWw6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUmJm51bGwhPT1lLmdldEF0dHJpYnV0ZSh0KX0sc3luY1BlbmRpbmdSZWY6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPWUuZ2V0QXR0cmlidXRlKEYpO3JldHVybiBudWxsPT09aXx8KGxlLmlzRm9ybUlucHV0KGUpfHxudWxsIT09ZS5nZXRBdHRyaWJ1dGUobik/KFwiZmlsZVwiPT09ZS50eXBlJiZsZS5tZXJnZUF0dHJzKGUsdCx7aXNJZ25vcmVkOiEwfSksbGUucHV0UHJpdmF0ZShlLEYsdCksITEpOihILmZvckVhY2goZnVuY3Rpb24obil7ZS5jbGFzc0xpc3QuY29udGFpbnMobikmJnQuY2xhc3NMaXN0LmFkZChuKX0pLHQuc2V0QXR0cmlidXRlKEYsaSksITApKX0sY2xlYW5DaGlsZE5vZGVzOmZ1bmN0aW9uKGUsdCl7aWYobGUuaXNQaHhVcGRhdGUoZSx0LFtcImFwcGVuZFwiLFwicHJlcGVuZFwiXSkpe3ZhciBuPVtdO2UuY2hpbGROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UuaWR8fChlLm5vZGVUeXBlPT09Tm9kZS5URVhUX05PREUmJlwiXCI9PT1lLm5vZGVWYWx1ZS50cmltKCl8fHooXCJvbmx5IEhUTUwgZWxlbWVudCB0YWdzIHdpdGggYW4gaWQgYXJlIGFsbG93ZWQgaW5zaWRlIGNvbnRhaW5lcnMgd2l0aCBwaHgtdXBkYXRlLlxcblxcblwiKydyZW1vdmluZyBpbGxlZ2FsIG5vZGU6IFwiJy5jb25jYXQoKGUub3V0ZXJIVE1MfHxlLm5vZGVWYWx1ZSkudHJpbSgpLCdcIlxcblxcbicpKSxuLnB1c2goZSkpfSksbi5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJlbW92ZSgpfSl9fX0sZGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbixpKXtUKHRoaXMsZSk7dmFyIHI9bmV3IFNldCxvPW5ldyBTZXQoRShuLmNoaWxkcmVuKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaWR9KSksYT1bXTtBcnJheS5mcm9tKHQuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24oZSl7aWYoZS5pZCYmKHIuYWRkKGUuaWQpLG8uaGFzKGUuaWQpKSl7dmFyIHQ9ZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nJiZlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuaWQ7YS5wdXNoKHtlbGVtZW50SWQ6ZS5pZCxwcmV2aW91c0VsZW1lbnRJZDp0fSl9fSksdGhpcy5jb250YWluZXJJZD1uLmlkLHRoaXMudXBkYXRlVHlwZT1pLHRoaXMuZWxlbWVudHNUb01vZGlmeT1hLHRoaXMuZWxlbWVudElkc1RvQWRkPUUobykuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiFyLmhhcyhlKX0pfXJldHVybiBEKGUsW3trZXk6XCJwZXJmb3JtXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1sZS5ieUlkKHRoaXMuY29udGFpbmVySWQpO3RoaXMuZWxlbWVudHNUb01vZGlmeS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QucHJldmlvdXNFbGVtZW50SWQ/Wihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0LnByZXZpb3VzRWxlbWVudElkKSxmdW5jdGlvbihlKXtaKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHQuZWxlbWVudElkKSxmdW5jdGlvbih0KXt0LnByZXZpb3VzRWxlbWVudFNpYmxpbmcmJnQucHJldmlvdXNFbGVtZW50U2libGluZy5pZD09ZS5pZHx8ZS5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJhZnRlcmVuZFwiLHQpfSl9KTpaKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHQuZWxlbWVudElkKSxmdW5jdGlvbih0KXtudWxsPT10LnByZXZpb3VzRWxlbWVudFNpYmxpbmd8fGUuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJiZWdpblwiLHQpfSl9KSxcInByZXBlbmRcIj09dGhpcy51cGRhdGVUeXBlJiZ0aGlzLmVsZW1lbnRJZHNUb0FkZC5yZXZlcnNlKCkuZm9yRWFjaChmdW5jdGlvbih0KXtaKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHQpLGZ1bmN0aW9uKHQpe3JldHVybiBlLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyYmVnaW5cIix0KX0pfSl9fV0pLGV9KCksaGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbixpLHIsbyl7VCh0aGlzLGUpLHRoaXMudmlldz10LHRoaXMubGl2ZVNvY2tldD10LmxpdmVTb2NrZXQsdGhpcy5jb250YWluZXI9bix0aGlzLmlkPWksdGhpcy5yb290SUQ9dC5yb290LmlkLHRoaXMuaHRtbD1yLHRoaXMudGFyZ2V0Q0lEPW8sdGhpcy5jaWRQYXRjaD1cIm51bWJlclwiPT10eXBlb2YgdGhpcy50YXJnZXRDSUQsdGhpcy5jYWxsYmFja3M9e2JlZm9yZWFkZGVkOltdLGJlZm9yZXVwZGF0ZWQ6W10sYmVmb3JlZGlzY2FyZGVkOltdLGJlZm9yZXBoeENoaWxkQWRkZWQ6W10sYWZ0ZXJhZGRlZDpbXSxhZnRlcnVwZGF0ZWQ6W10sYWZ0ZXJkaXNjYXJkZWQ6W10sYWZ0ZXJwaHhDaGlsZEFkZGVkOltdfX1yZXR1cm4gRChlLG51bGwsW3trZXk6XCJwYXRjaEVsXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe2IoZSx0LHtjaGlsZHJlbk9ubHk6ITEsb25CZWZvcmVFbFVwZGF0ZWQ6ZnVuY3Rpb24oZSx0KXtpZihuJiZuLmlzU2FtZU5vZGUoZSkmJmxlLmlzRm9ybUlucHV0KGUpKXJldHVybiBsZS5tZXJnZUZvY3VzZWRJbnB1dChlLHQpLCExfX0pfX1dKSxEKGUsW3trZXk6XCJiZWZvcmVcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMuY2FsbGJhY2tzW1wiYmVmb3JlXCIuY29uY2F0KGUpXS5wdXNoKHQpfX0se2tleTpcImFmdGVyXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt0aGlzLmNhbGxiYWNrc1tcImFmdGVyXCIuY29uY2F0KGUpXS5wdXNoKHQpfX0se2tleTpcInRyYWNrQmVmb3JlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxpPTE7aTx0O2krKyluW2ktMV09YXJndW1lbnRzW2ldO3RoaXMuY2FsbGJhY2tzW1wiYmVmb3JlXCIuY29uY2F0KGUpXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmFwcGx5KHZvaWQgMCxuKX0pfX0se2tleTpcInRyYWNrQWZ0ZXJcIix2YWx1ZTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLGk9MTtpPHQ7aSsrKW5baS0xXT1hcmd1bWVudHNbaV07dGhpcy5jYWxsYmFja3NbXCJhZnRlclwiLmNvbmNhdChlKV0uZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5hcHBseSh2b2lkIDAsbil9KX19LHtrZXk6XCJtYXJrUHJ1bmFibGVDb250ZW50Rm9yUmVtb3ZhbFwiLHZhbHVlOmZ1bmN0aW9uKCl7bGUuYWxsKHRoaXMuY29udGFpbmVyLFwiW3BoeC11cGRhdGU9YXBwZW5kXSA+ICosIFtwaHgtdXBkYXRlPXByZXBlbmRdID4gKlwiLGZ1bmN0aW9uKGUpe2Uuc2V0QXR0cmlidXRlKFwiZGF0YS1waHgtcmVtb3ZlXCIsXCJcIil9KX19LHtrZXk6XCJwZXJmb3JtXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy52aWV3LG49dGhpcy5saXZlU29ja2V0LGk9dGhpcy5jb250YWluZXIscj10aGlzLmh0bWwsbz10aGlzLmlzQ0lEUGF0Y2goKT90aGlzLnRhcmdldENJRENvbnRhaW5lcigpOmk7aWYoIXRoaXMuaXNDSURQYXRjaCgpfHxvKXt2YXIgYT1uLmdldEFjdGl2ZUVsZW1lbnQoKSx1PWEmJmxlLmhhc1NlbGVjdGlvblJhbmdlKGEpP2E6e30scz11LnNlbGVjdGlvblN0YXJ0LGM9dS5zZWxlY3Rpb25FbmQsbD1uLmJpbmRpbmcoXCJ1cGRhdGVcIiksZD1uLmJpbmRpbmcoXCJmZWVkYmFjay1mb3JcIiksaD1uLmJpbmRpbmcoXCJkaXNhYmxlLXdpdGhcIiksZj1uLmJpbmRpbmcoXCJ0cmlnZ2VyLWFjdGlvblwiKSx2PVtdLHA9W10sZz1bXSxtPW51bGwseT1uLnRpbWUoXCJwcmVtb3JwaCBjb250YWluZXIgcHJlcFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGUuYnVpbGREaWZmSFRNTChpLHIsbCxvKX0pO3JldHVybiB0aGlzLnRyYWNrQmVmb3JlKFwiYWRkZWRcIixpKSx0aGlzLnRyYWNrQmVmb3JlKFwidXBkYXRlZFwiLGksaSksbi50aW1lKFwibW9ycGhkb21cIixmdW5jdGlvbigpe2Iobyx5LHtjaGlsZHJlbk9ubHk6bnVsbD09PW8uZ2V0QXR0cmlidXRlKGopLG9uQmVmb3JlTm9kZUFkZGVkOmZ1bmN0aW9uKHQpe3JldHVybiBsZS5kaXNjYXJkRXJyb3Iobyx0LGQpLGUudHJhY2tCZWZvcmUoXCJhZGRlZFwiLHQpLHR9LG9uTm9kZUFkZGVkOmZ1bmN0aW9uKG4pe2xlLmlzTm93VHJpZ2dlckZvcm1FeHRlcm5hbChuLGYpJiYobT1uKSxsZS5pc1BoeENoaWxkKG4pJiZ0Lm93bnNFbGVtZW50KG4pJiZlLnRyYWNrQWZ0ZXIoXCJwaHhDaGlsZEFkZGVkXCIsbiksdi5wdXNoKG4pfSxvbk5vZGVEaXNjYXJkZWQ6ZnVuY3Rpb24odCl7bGUuaXNQaHhDaGlsZCh0KSYmbi5kZXN0cm95Vmlld0J5RWwodCksZS50cmFja0FmdGVyKFwiZGlzY2FyZGVkXCIsdCl9LG9uQmVmb3JlTm9kZURpc2NhcmRlZDpmdW5jdGlvbih0KXtyZXR1cm4hKCF0LmdldEF0dHJpYnV0ZXx8bnVsbD09PXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtcmVtb3ZlXCIpKXx8KG51bGw9PT10LnBhcmVudE5vZGV8fCFsZS5pc1BoeFVwZGF0ZSh0LnBhcmVudE5vZGUsbCxbXCJhcHBlbmRcIixcInByZXBlbmRcIl0pfHwhdC5pZCkmJighZS5za2lwQ0lEU2libGluZyh0KSYmKGUudHJhY2tCZWZvcmUoXCJkaXNjYXJkZWRcIix0KSwhMCkpfSxvbkVsVXBkYXRlZDpmdW5jdGlvbihlKXtsZS5pc05vd1RyaWdnZXJGb3JtRXh0ZXJuYWwoZSxmKSYmKG09ZSkscC5wdXNoKGUpfSxvbkJlZm9yZUVsVXBkYXRlZDpmdW5jdGlvbih0LG4pe2lmKGxlLmNsZWFuQ2hpbGROb2RlcyhuLGwpLGUuc2tpcENJRFNpYmxpbmcobikpcmV0dXJuITE7aWYobGUuaXNJZ25vcmVkKHQsbCkpcmV0dXJuIGUudHJhY2tCZWZvcmUoXCJ1cGRhdGVkXCIsdCxuKSxsZS5tZXJnZUF0dHJzKHQsbix7aXNJZ25vcmVkOiEwfSkscC5wdXNoKHQpLCExO2lmKFwibnVtYmVyXCI9PT10LnR5cGUmJnQudmFsaWRpdHkmJnQudmFsaWRpdHkuYmFkSW5wdXQpcmV0dXJuITE7aWYoIWxlLnN5bmNQZW5kaW5nUmVmKHQsbixoKSlyZXR1cm5cImZpbGVcIj09PXQudHlwZSYmKGUudHJhY2tCZWZvcmUoXCJ1cGRhdGVkXCIsdCxuKSxwLnB1c2godCkpLCExO2lmKGxlLmlzUGh4Q2hpbGQobikpe3ZhciBpPXQuZ2V0QXR0cmlidXRlKEopO3JldHVybiBsZS5tZXJnZUF0dHJzKHQsbiksdC5zZXRBdHRyaWJ1dGUoSixpKSx0LnNldEF0dHJpYnV0ZShcImRhdGEtcGh4LXJvb3QtaWRcIixlLnJvb3RJRCksITF9cmV0dXJuIGxlLmNvcHlQcml2YXRlcyhuLHQpLGxlLmRpc2NhcmRFcnJvcihvLG4sZCksYSYmdC5pc1NhbWVOb2RlKGEpJiZsZS5pc0Zvcm1JbnB1dCh0KSYmIWUuZm9yY2VGb2N1c2VkU2VsZWN0VXBkYXRlKHQsbik/KGUudHJhY2tCZWZvcmUoXCJ1cGRhdGVkXCIsdCxuKSxsZS5tZXJnZUZvY3VzZWRJbnB1dCh0LG4pLGxlLnN5bmNBdHRyc1RvUHJvcHModCkscC5wdXNoKHQpLCExKToobGUuaXNQaHhVcGRhdGUobixsLFtcImFwcGVuZFwiLFwicHJlcGVuZFwiXSkmJmcucHVzaChuZXcgZGUodCxuLG4uZ2V0QXR0cmlidXRlKGwpKSksbGUuc3luY0F0dHJzVG9Qcm9wcyhuKSxlLnRyYWNrQmVmb3JlKFwidXBkYXRlZFwiLHQsbiksITApfX0pfSksbi5pc0RlYnVnRW5hYmxlZCgpJiZmdW5jdGlvbigpe2Zvcih2YXIgZT1uZXcgU2V0LHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIipbaWRdXCIpLG49MCxpPXQubGVuZ3RoO248aTtuKyspZS5oYXModFtuXS5pZCk/Y29uc29sZS5lcnJvcihcIk11bHRpcGxlIElEcyBkZXRlY3RlZDogXCIuY29uY2F0KHRbbl0uaWQsXCIuIEVuc3VyZSB1bmlxdWUgZWxlbWVudCBpZHMuXCIpKTplLmFkZCh0W25dLmlkKX0oKSxnLmxlbmd0aD4wJiZuLnRpbWUoXCJwb3N0LW1vcnBoIGFwcGVuZC9wcmVwZW5kIHJlc3RvcmF0aW9uXCIsZnVuY3Rpb24oKXtnLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUucGVyZm9ybSgpfSl9KSxuLnNpbGVuY2VFdmVudHMoZnVuY3Rpb24oKXtyZXR1cm4gbGUucmVzdG9yZUZvY3VzKGEscyxjKX0pLGxlLmRpc3BhdGNoRXZlbnQoZG9jdW1lbnQsXCJwaHg6dXBkYXRlXCIpLHYuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gZS50cmFja0FmdGVyKFwiYWRkZWRcIix0KX0pLHAuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gZS50cmFja0FmdGVyKFwidXBkYXRlZFwiLHQpfSksbSYmKG4uZGlzY29ubmVjdCgpLG0uc3VibWl0KCkpLCEwfX19LHtrZXk6XCJmb3JjZUZvY3VzZWRTZWxlY3RVcGRhdGVcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3JldHVybiEwPT09ZS5tdWx0aXBsZXx8ZS5pbm5lckhUTUwhPXQuaW5uZXJIVE1MfX0se2tleTpcImlzQ0lEUGF0Y2hcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNpZFBhdGNofX0se2tleTpcInNraXBDSURTaWJsaW5nXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmbnVsbCE9PWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtc2tpcFwiKX19LHtrZXk6XCJ0YXJnZXRDSURDb250YWluZXJcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHRoaXMuaXNDSURQYXRjaCgpKXt2YXIgZT1rKGxlLmZpbmRDb21wb25lbnROb2RlTGlzdCh0aGlzLmNvbnRhaW5lcix0aGlzLnRhcmdldENJRCkpLHQ9ZVswXTtyZXR1cm4gMD09PWUuc2xpY2UoMSkubGVuZ3RoP3Q6dCYmdC5wYXJlbnROb2RlfX19LHtrZXk6XCJidWlsZERpZmZIVE1MXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4saSl7dmFyIHI9dGhpcyxvPXRoaXMuaXNDSURQYXRjaCgpLGE9byYmaS5nZXRBdHRyaWJ1dGUoaik9PT10aGlzLnRhcmdldENJRC50b1N0cmluZygpO2lmKCFvfHxhKXJldHVybiB0O3ZhciB1PW51bGwscz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7dT1sZS5jbG9uZU5vZGUoaSk7dmFyIGM9ayhsZS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodSx0aGlzLnRhcmdldENJRCkpLGw9Y1swXSxkPWMuc2xpY2UoMSk7cmV0dXJuIHMuaW5uZXJIVE1MPXQsZC5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJlbW92ZSgpfSksQXJyYXkuZnJvbSh1LmNoaWxkTm9kZXMpLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5pZCYmZS5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFJiZlLmdldEF0dHJpYnV0ZShqKSE9PXIudGFyZ2V0Q0lELnRvU3RyaW5nKCkmJihlLnNldEF0dHJpYnV0ZShcImRhdGEtcGh4LXNraXBcIixcIlwiKSxlLmlubmVySFRNTD1cIlwiKX0pLEFycmF5LmZyb20ocy5jb250ZW50LmNoaWxkTm9kZXMpLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIHUuaW5zZXJ0QmVmb3JlKGUsbCl9KSxsLnJlbW92ZSgpLHUub3V0ZXJIVE1MfX1dKSxlfSgpLGZlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4saSxyLG8pe3ZhciBhPXRoaXM7VCh0aGlzLGUpLHRoaXMubGl2ZVNvY2tldD1uLHRoaXMuZmxhc2g9byx0aGlzLnBhcmVudD1pLHRoaXMucm9vdD1pP2kucm9vdDp0aGlzLHRoaXMuZWw9dCx0aGlzLmlkPXRoaXMuZWwuaWQsdGhpcy52aWV3PXRoaXMuZWwuZ2V0QXR0cmlidXRlKE8pLHRoaXMucmVmPTAsdGhpcy5jaGlsZEpvaW5zPTAsdGhpcy5sb2FkZXJUaW1lcj1udWxsLHRoaXMucGVuZGluZ0RpZmZzPVtdLHRoaXMucHJ1bmluZ0NJRHM9W10sdGhpcy5ocmVmPXIsdGhpcy5qb2luQ291bnQ9dGhpcy5wYXJlbnQ/dGhpcy5wYXJlbnQuam9pbkNvdW50LTE6MCx0aGlzLmpvaW5QZW5kaW5nPSEwLHRoaXMuZGVzdHJveWVkPSExLHRoaXMuam9pbkNhbGxiYWNrPWZ1bmN0aW9uKCl7fSx0aGlzLnN0b3BDYWxsYmFjaz1mdW5jdGlvbigpe30sdGhpcy5wZW5kaW5nSm9pbk9wcz10aGlzLnBhcmVudD9udWxsOltdLHRoaXMudmlld0hvb2tzPXt9LHRoaXMudXBsb2FkZXJzPXt9LHRoaXMuZm9ybVN1Ym1pdHM9W10sdGhpcy5jaGlsZHJlbj10aGlzLnBhcmVudD9udWxsOnt9LHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXT17fSx0aGlzLmNoYW5uZWw9dGhpcy5saXZlU29ja2V0LmNoYW5uZWwoXCJsdjpcIi5jb25jYXQodGhpcy5pZCksZnVuY3Rpb24oKXtyZXR1cm57dXJsOmEuaHJlZixwYXJhbXM6YS5jb25uZWN0UGFyYW1zKCksc2Vzc2lvbjphLmdldFNlc3Npb24oKSxzdGF0aWM6YS5nZXRTdGF0aWMoKSxmbGFzaDphLmZsYXNofX0pLHRoaXMuc2hvd0xvYWRlcih0aGlzLmxpdmVTb2NrZXQubG9hZGVyVGltZW91dCksdGhpcy5iaW5kQ2hhbm5lbCgpfXJldHVybiBEKGUsW3trZXk6XCJpc01haW5cIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxpdmVTb2NrZXQubWFpbj09PXRoaXN9fSx7a2V5OlwiY29ubmVjdFBhcmFtc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5saXZlU29ja2V0LnBhcmFtcyh0aGlzLnZpZXcpLHQ9bGUuYWxsKGRvY3VtZW50LFwiW1wiLmNvbmNhdCh0aGlzLmJpbmRpbmcoXCJ0cmFjay1zdGF0aWNcIiksXCJdXCIpKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuc3JjfHxlLmhyZWZ9KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV9KTtyZXR1cm4gdC5sZW5ndGg+MCYmKGUuX3RyYWNrX3N0YXRpYz10KSxlLl9tb3VudHM9dGhpcy5qb2luQ291bnQsZX19LHtrZXk6XCJuYW1lXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWV3fX0se2tleTpcImlzQ29ubmVjdGVkXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaGFubmVsLmNhblB1c2goKX19LHtrZXk6XCJnZXRTZXNzaW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1zZXNzaW9uXCIpfX0se2tleTpcImdldFN0YXRpY1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5lbC5nZXRBdHRyaWJ1dGUoSik7cmV0dXJuXCJcIj09PWU/bnVsbDplfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06ZnVuY3Rpb24oKXt9O3RoaXMuZGVzdHJveUFsbENoaWxkcmVuKCksdGhpcy5kZXN0cm95ZWQ9ITAsZGVsZXRlIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXSx0aGlzLnBhcmVudCYmZGVsZXRlIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLnBhcmVudC5pZF1bdGhpcy5pZF0sY2xlYXJUaW1lb3V0KHRoaXMubG9hZGVyVGltZXIpO3ZhciBuPWZ1bmN0aW9uKCl7Zm9yKHZhciBuIGluIHQoKSxlLnZpZXdIb29rcyllLnZpZXdIb29rc1tuXS5fX3RyaWdnZXJfXyhcImJlZm9yZURlc3Ryb3lcIiksZS5kZXN0cm95SG9vayhlLnZpZXdIb29rc1tuXSl9O3RoaXMubG9nKFwiZGVzdHJveWVkXCIsZnVuY3Rpb24oKXtyZXR1cm5bXCJ0aGUgY2hpbGQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBwYXJlbnRcIl19KSx0aGlzLmNoYW5uZWwubGVhdmUoKS5yZWNlaXZlKFwib2tcIixuKS5yZWNlaXZlKFwiZXJyb3JcIixuKS5yZWNlaXZlKFwidGltZW91dFwiLG4pfX0se2tleTpcInNldENvbnRhaW5lckNsYXNzZXNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlO3RoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZShcInBoeC1jb25uZWN0ZWRcIixcInBoeC1kaXNjb25uZWN0ZWRcIixcInBoeC1lcnJvclwiKSwoZT10aGlzLmVsLmNsYXNzTGlzdCkuYWRkLmFwcGx5KGUsYXJndW1lbnRzKX19LHtrZXk6XCJpc0xvYWRpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsLmNsYXNzTGlzdC5jb250YWlucyhcInBoeC1kaXNjb25uZWN0ZWRcIil9fSx7a2V5Olwic2hvd0xvYWRlclwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYoY2xlYXJUaW1lb3V0KHRoaXMubG9hZGVyVGltZXIpLGUpdGhpcy5sb2FkZXJUaW1lcj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIHQuc2hvd0xvYWRlcigpfSxlKTtlbHNle2Zvcih2YXIgbiBpbiB0aGlzLnZpZXdIb29rcyl0aGlzLnZpZXdIb29rc1tuXS5fX3RyaWdnZXJfXyhcImRpc2Nvbm5lY3RlZFwiKTt0aGlzLnNldENvbnRhaW5lckNsYXNzZXMoXCJwaHgtZGlzY29ubmVjdGVkXCIpfX19LHtrZXk6XCJoaWRlTG9hZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGhpcy5sb2FkZXJUaW1lciksdGhpcy5zZXRDb250YWluZXJDbGFzc2VzKFwicGh4LWNvbm5lY3RlZFwiKX19LHtrZXk6XCJ0cmlnZ2VyUmVjb25uZWN0ZWRcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgZSBpbiB0aGlzLnZpZXdIb29rcyl0aGlzLnZpZXdIb29rc1tlXS5fX3RyaWdnZXJfXyhcInJlY29ubmVjdGVkXCIpfX0se2tleTpcImxvZ1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dGhpcy5saXZlU29ja2V0LmxvZyh0aGlzLGUsdCl9fSx7a2V5Olwid2l0aGluVGFyZ2V0c1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztpZigvXigwfFsxLTldXFxkKikkLy50ZXN0KGUpKXt2YXIgaT1sZS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5lbCxlKTswPT09aS5sZW5ndGg/eihcIm5vIGNvbXBvbmVudCBmb3VuZCBtYXRjaGluZyBwaHgtdGFyZ2V0IG9mIFwiLmNvbmNhdChlKSk6dCh0aGlzLGlbMF0pfWVsc2V7dmFyIHI9QXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGUpKTswPT09ci5sZW5ndGgmJnooJ25vdGhpbmcgZm91bmQgbWF0Y2hpbmcgdGhlIHBoeC10YXJnZXQgc2VsZWN0b3IgXCInLmNvbmNhdChlLCdcIicpKSxyLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIG4ubGl2ZVNvY2tldC5vd25lcihlLGZ1bmN0aW9uKG4pe3JldHVybiB0KG4sZSl9KX0pfX19LHtrZXk6XCJhcHBseURpZmZcIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7dGhpcy5sb2coZSxmdW5jdGlvbigpe3JldHVybltcIlwiLFgodCldfSk7dmFyIGk9dWUuZXh0cmFjdCh0KSxyPWkuZGlmZixvPWkucmVwbHksYT1pLmV2ZW50cyx1PWkudGl0bGU7cmV0dXJuIHUmJmxlLnB1dFRpdGxlKHUpLG4oe2RpZmY6cixyZXBseTpvLGV2ZW50czphfSksb319LHtrZXk6XCJvbkpvaW5cIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49ZS5yZW5kZXJlZDt0aGlzLmNoaWxkSm9pbnM9MCx0aGlzLmpvaW5QZW5kaW5nPSEwLHRoaXMuZmxhc2g9bnVsbCxjZS5kcm9wTG9jYWwodGhpcy5uYW1lKCksXCJjb25zZWN1dGl2ZS1yZWxvYWRzXCIpLHRoaXMuYXBwbHlEaWZmKFwibW91bnRcIixuLGZ1bmN0aW9uKG4pe3ZhciBpPW4uZGlmZixyPW4uZXZlbnRzO3QucmVuZGVyZWQ9bmV3IHVlKHQuaWQsaSk7dmFyIG89dC5yZW5kZXJDb250YWluZXIobnVsbCxcImpvaW5cIik7dC5kcm9wUGVuZGluZ1JlZnMoKTt2YXIgYT10LmZvcm1zRm9yUmVjb3Zlcnkobyk7dC5qb2luQ291bnQrKyxhLmxlbmd0aD4wP2EuZm9yRWFjaChmdW5jdGlvbihlLG4pe3QucHVzaEZvcm1SZWNvdmVyeShlLGZ1bmN0aW9uKGUpe249PT1hLmxlbmd0aC0xJiZ0Lm9uSm9pbkNvbXBsZXRlKGUsbyxyKX0pfSk6dC5vbkpvaW5Db21wbGV0ZShlLG8scil9KX19LHtrZXk6XCJkcm9wUGVuZGluZ1JlZnNcIix2YWx1ZTpmdW5jdGlvbigpe2xlLmFsbCh0aGlzLmVsLFwiW1wiLmNvbmNhdChGLFwiXVwiKSxmdW5jdGlvbihlKXtyZXR1cm4gZS5yZW1vdmVBdHRyaWJ1dGUoRil9KX19LHtrZXk6XCJvbkpvaW5Db21wbGV0ZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgaT10aGlzLHI9ZS5saXZlX3BhdGNoO2lmKHRoaXMuam9pbkNvdW50PjF8fHRoaXMucGFyZW50JiYhdGhpcy5wYXJlbnQuaXNKb2luUGVuZGluZygpKXJldHVybiB0aGlzLmFwcGx5Sm9pblBhdGNoKHIsdCxuKTswPT09bGUuZmluZFBoeENoaWxkcmVuSW5GcmFnbWVudCh0LHRoaXMuaWQpLmZpbHRlcihmdW5jdGlvbihlKXt2YXIgdD1lLmlkJiZpLmVsLnF1ZXJ5U2VsZWN0b3IoXCIjXCIuY29uY2F0KGUuaWQpKSxuPXQmJnQuZ2V0QXR0cmlidXRlKEopO3JldHVybiBuJiZlLnNldEF0dHJpYnV0ZShKLG4pLGkuam9pbkNoaWxkKGUpfSkubGVuZ3RoP3RoaXMucGFyZW50Pyh0aGlzLnJvb3QucGVuZGluZ0pvaW5PcHMucHVzaChbdGhpcyxmdW5jdGlvbigpe3JldHVybiBpLmFwcGx5Sm9pblBhdGNoKHIsdCxuKX1dKSx0aGlzLnBhcmVudC5hY2tKb2luKHRoaXMpKToodGhpcy5vbkFsbENoaWxkSm9pbnNDb21wbGV0ZSgpLHRoaXMuYXBwbHlKb2luUGF0Y2gocix0LG4pKTp0aGlzLnJvb3QucGVuZGluZ0pvaW5PcHMucHVzaChbdGhpcyxmdW5jdGlvbigpe3JldHVybiBpLmFwcGx5Sm9pblBhdGNoKHIsdCxuKX1dKX19LHtrZXk6XCJhdHRhY2hUcnVlRG9jRWxcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuZWw9bGUuYnlJZCh0aGlzLmlkKSx0aGlzLmVsLnNldEF0dHJpYnV0ZShcImRhdGEtcGh4LXJvb3QtaWRcIix0aGlzLnJvb3QuaWQpfX0se2tleTpcImRpc3BhdGNoRXZlbnRzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PXgoZSwyKSxuPXRbMF0saT10WzFdO3dpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcInBoeDpob29rOlwiLmNvbmNhdChuKSx7ZGV0YWlsOml9KSl9KX19LHtrZXk6XCJhcHBseUpvaW5QYXRjaFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgaT10aGlzO3RoaXMuYXR0YWNoVHJ1ZURvY0VsKCk7dmFyIHI9bmV3IGhlKHRoaXMsdGhpcy5lbCx0aGlzLmlkLHQsbnVsbCk7aWYoci5tYXJrUHJ1bmFibGVDb250ZW50Rm9yUmVtb3ZhbCgpLHRoaXMucGVyZm9ybVBhdGNoKHIsITEpLHRoaXMuam9pbk5ld0NoaWxkcmVuKCksbGUuYWxsKHRoaXMuZWwsXCJbXCIuY29uY2F0KHRoaXMuYmluZGluZyhcImhvb2tcIiksXCJdLCBbZGF0YS1waHgtXCIpLmNvbmNhdChcImhvb2tcIixcIl1cIiksZnVuY3Rpb24oZSl7dmFyIHQ9aS5hZGRIb29rKGUpO3QmJnQuX190cmlnZ2VyX18oXCJtb3VudGVkXCIpfSksdGhpcy5qb2luUGVuZGluZz0hMSx0aGlzLmRpc3BhdGNoRXZlbnRzKG4pLHRoaXMuYXBwbHlQZW5kaW5nVXBkYXRlcygpLGUpe3ZhciBvPWUua2luZCxhPWUudG87dGhpcy5saXZlU29ja2V0Lmhpc3RvcnlQYXRjaChhLG8pfXRoaXMuaGlkZUxvYWRlcigpLHRoaXMuam9pbkNvdW50PjEmJnRoaXMudHJpZ2dlclJlY29ubmVjdGVkKCksdGhpcy5zdG9wQ2FsbGJhY2soKX19LHtrZXk6XCJ0cmlnZ2VyQmVmb3JlVXBkYXRlSG9va1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dGhpcy5saXZlU29ja2V0LnRyaWdnZXJET00oXCJvbkJlZm9yZUVsVXBkYXRlZFwiLFtlLHRdKTt2YXIgbj10aGlzLmdldEhvb2soZSksaT1uJiZsZS5pc0lnbm9yZWQoZSx0aGlzLmJpbmRpbmcoXCJ1cGRhdGVcIikpO2lmKG4mJiFlLmlzRXF1YWxOb2RlKHQpJiYoIWl8fCFmdW5jdGlvbihlLHQpe3JldHVybiBKU09OLnN0cmluZ2lmeShlKT09PUpTT04uc3RyaW5naWZ5KHQpfShlLmRhdGFzZXQsdC5kYXRhc2V0KSkpcmV0dXJuIG4uX190cmlnZ2VyX18oXCJiZWZvcmVVcGRhdGVcIiksbn19LHtrZXk6XCJ0cmlnZ2VyVXBkYXRlZEhvb2tcIix2YWx1ZTpmdW5jdGlvbihlKXtlLl9fdHJpZ2dlcl9fKFwidXBkYXRlZFwiKX19LHtrZXk6XCJwZXJmb3JtUGF0Y2hcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMsaT1bXSxyPSExLG89bmV3IFNldDtyZXR1cm4gZS5hZnRlcihcImFkZGVkXCIsZnVuY3Rpb24oZSl7bi5saXZlU29ja2V0LnRyaWdnZXJET00oXCJvbk5vZGVBZGRlZFwiLFtlXSk7dmFyIHQ9bi5hZGRIb29rKGUpO3QmJnQuX190cmlnZ2VyX18oXCJtb3VudGVkXCIpfSksZS5hZnRlcihcInBoeENoaWxkQWRkZWRcIixmdW5jdGlvbihlKXtyZXR1cm4gcj0hMH0pLGUuYmVmb3JlKFwidXBkYXRlZFwiLGZ1bmN0aW9uKGUsdCl7bi50cmlnZ2VyQmVmb3JlVXBkYXRlSG9vayhlLHQpJiZvLmFkZChlLmlkKX0pLGUuYWZ0ZXIoXCJ1cGRhdGVkXCIsZnVuY3Rpb24oZSl7by5oYXMoZS5pZCkmJm4udHJpZ2dlclVwZGF0ZWRIb29rKG4uZ2V0SG9vayhlKSl9KSxlLmJlZm9yZShcImRpc2NhcmRlZFwiLGZ1bmN0aW9uKGUpe3ZhciB0PW4uZ2V0SG9vayhlKTt0JiZ0Ll9fdHJpZ2dlcl9fKFwiYmVmb3JlRGVzdHJveVwiKX0pLGUuYWZ0ZXIoXCJkaXNjYXJkZWRcIixmdW5jdGlvbihlKXt2YXIgdD1uLmNvbXBvbmVudElEKGUpO1wibnVtYmVyXCI9PXR5cGVvZiB0JiYtMT09PWkuaW5kZXhPZih0KSYmaS5wdXNoKHQpO3ZhciByPW4uZ2V0SG9vayhlKTtyJiZuLmRlc3Ryb3lIb29rKHIpfSksZS5wZXJmb3JtKCksdCYmdGhpcy5tYXliZVB1c2hDb21wb25lbnRzRGVzdHJveWVkKGkpLHJ9fSx7a2V5Olwiam9pbk5ld0NoaWxkcmVuXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2xlLmZpbmRQaHhDaGlsZHJlbih0aGlzLmVsLHRoaXMuaWQpLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIGUuam9pbkNoaWxkKHQpfSl9fSx7a2V5OlwiZ2V0Q2hpbGRCeUlkXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXVtlXX19LHtrZXk6XCJnZXREZXNjZW5kZW50QnlFbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlLmlkPT09dGhpcy5pZD90aGlzOnRoaXMuY2hpbGRyZW5bZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1wYXJlbnQtaWRcIildW2UuaWRdfX0se2tleTpcImRlc3Ryb3lEZXNjZW5kZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluIHRoaXMucm9vdC5jaGlsZHJlbilmb3IodmFyIG4gaW4gdGhpcy5yb290LmNoaWxkcmVuW3RdKWlmKG49PT1lKXJldHVybiB0aGlzLnJvb3QuY2hpbGRyZW5bdF1bbl0uZGVzdHJveSgpfX0se2tleTpcImpvaW5DaGlsZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKCF0aGlzLmdldENoaWxkQnlJZCh0LmlkKSl7dmFyIG49bmV3IGUodCx0aGlzLmxpdmVTb2NrZXQsdGhpcyk7cmV0dXJuIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXVtuLmlkXT1uLG4uam9pbigpLHRoaXMuY2hpbGRKb2lucysrLCEwfX19LHtrZXk6XCJpc0pvaW5QZW5kaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5qb2luUGVuZGluZ319LHtrZXk6XCJhY2tKb2luXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5jaGlsZEpvaW5zLS0sMD09PXRoaXMuY2hpbGRKb2lucyYmKHRoaXMucGFyZW50P3RoaXMucGFyZW50LmFja0pvaW4odGhpcyk6dGhpcy5vbkFsbENoaWxkSm9pbnNDb21wbGV0ZSgpKX19LHtrZXk6XCJvbkFsbENoaWxkSm9pbnNDb21wbGV0ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5qb2luQ2FsbGJhY2soKSx0aGlzLnBlbmRpbmdKb2luT3BzLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9eChlLDIpLG49dFswXSxpPXRbMV07bi5pc0Rlc3Ryb3llZCgpfHxpKCl9KSx0aGlzLnBlbmRpbmdKb2luT3BzPVtdfX0se2tleTpcInVwZGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztpZih0aGlzLmlzSm9pblBlbmRpbmcoKXx8dGhpcy5saXZlU29ja2V0Lmhhc1BlbmRpbmdMaW5rKCkpcmV0dXJuIHRoaXMucGVuZGluZ0RpZmZzLnB1c2goe2RpZmY6ZSxldmVudHM6dH0pO3RoaXMucmVuZGVyZWQubWVyZ2VEaWZmKGUpO3ZhciBpPSExO3RoaXMucmVuZGVyZWQuaXNDb21wb25lbnRPbmx5RGlmZihlKT90aGlzLmxpdmVTb2NrZXQudGltZShcImNvbXBvbmVudCBwYXRjaCBjb21wbGV0ZVwiLGZ1bmN0aW9uKCl7bGUuZmluZFBhcmVudENJRHMobi5lbCxuLnJlbmRlcmVkLmNvbXBvbmVudENJRHMoZSkpLmZvckVhY2goZnVuY3Rpb24odCl7bi5jb21wb25lbnRQYXRjaChuLnJlbmRlcmVkLmdldENvbXBvbmVudChlLHQpLHQpJiYoaT0hMCl9KX0pOlEoZSl8fHRoaXMubGl2ZVNvY2tldC50aW1lKFwiZnVsbCBwYXRjaCBjb21wbGV0ZVwiLGZ1bmN0aW9uKCl7dmFyIHQ9bi5yZW5kZXJDb250YWluZXIoZSxcInVwZGF0ZVwiKSxyPW5ldyBoZShuLG4uZWwsbi5pZCx0LG51bGwpO2k9bi5wZXJmb3JtUGF0Y2gociwhMCl9KSx0aGlzLmRpc3BhdGNoRXZlbnRzKHQpLGkmJnRoaXMuam9pbk5ld0NoaWxkcmVuKCl9fSx7a2V5OlwicmVuZGVyQ29udGFpbmVyXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO3JldHVybiB0aGlzLmxpdmVTb2NrZXQudGltZShcInRvU3RyaW5nIGRpZmYgKFwiLmNvbmNhdCh0LFwiKVwiKSxmdW5jdGlvbigpe3ZhciB0PW4uZWwudGFnTmFtZSxpPWU/bi5yZW5kZXJlZC5jb21wb25lbnRDSURzKGUpLmNvbmNhdChuLnBydW5pbmdDSURzKTpudWxsLHI9bi5yZW5kZXJlZC50b1N0cmluZyhpKTtyZXR1cm5cIjxcIi5jb25jYXQodCxcIj5cIikuY29uY2F0KHIsXCI8L1wiKS5jb25jYXQodCxcIj5cIil9KX19LHtrZXk6XCJjb21wb25lbnRQYXRjaFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7aWYoUShlKSlyZXR1cm4hMTt2YXIgbj10aGlzLnJlbmRlcmVkLmNvbXBvbmVudFRvU3RyaW5nKHQpLGk9bmV3IGhlKHRoaXMsdGhpcy5lbCx0aGlzLmlkLG4sdCk7cmV0dXJuIHRoaXMucGVyZm9ybVBhdGNoKGksITApfX0se2tleTpcImdldEhvb2tcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy52aWV3SG9va3NbcGUuZWxlbWVudElEKGUpXX19LHtrZXk6XCJhZGRIb29rXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoIXBlLmVsZW1lbnRJRChlKSYmZS5nZXRBdHRyaWJ1dGUpe3ZhciB0PWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtXCIuY29uY2F0KFwiaG9va1wiKSl8fGUuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcImhvb2tcIikpO2lmKCF0fHx0aGlzLm93bnNFbGVtZW50KGUpKXt2YXIgbj10aGlzLmxpdmVTb2NrZXQuZ2V0SG9va0NhbGxiYWNrcyh0KTtpZihuKXtlLmlkfHx6KCdubyBET00gSUQgZm9yIGhvb2sgXCInLmNvbmNhdCh0LCdcIi4gSG9va3MgcmVxdWlyZSBhIHVuaXF1ZSBJRCBvbiBlYWNoIGVsZW1lbnQuJyksZSk7dmFyIGk9bmV3IHBlKHRoaXMsZSxuKTtyZXR1cm4gdGhpcy52aWV3SG9va3NbcGUuZWxlbWVudElEKGkuZWwpXT1pLGl9bnVsbCE9PXQmJnooJ3Vua25vd24gaG9vayBmb3VuZCBmb3IgXCInLmNvbmNhdCh0LCdcIicpLGUpfX19fSx7a2V5OlwiZGVzdHJveUhvb2tcIix2YWx1ZTpmdW5jdGlvbihlKXtlLl9fdHJpZ2dlcl9fKFwiZGVzdHJveWVkXCIpLGUuX19jbGVhbnVwX18oKSxkZWxldGUgdGhpcy52aWV3SG9va3NbcGUuZWxlbWVudElEKGUuZWwpXX19LHtrZXk6XCJhcHBseVBlbmRpbmdVcGRhdGVzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMucGVuZGluZ0RpZmZzLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIG49dC5kaWZmLGk9dC5ldmVudHM7cmV0dXJuIGUudXBkYXRlKG4saSl9KSx0aGlzLnBlbmRpbmdEaWZmcz1bXX19LHtrZXk6XCJvbkNoYW5uZWxcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7dGhpcy5saXZlU29ja2V0Lm9uQ2hhbm5lbCh0aGlzLmNoYW5uZWwsZSxmdW5jdGlvbihlKXtuLmlzSm9pblBlbmRpbmcoKT9uLnJvb3QucGVuZGluZ0pvaW5PcHMucHVzaChbbixmdW5jdGlvbigpe3JldHVybiB0KGUpfV0pOnQoZSl9KX19LHtrZXk6XCJiaW5kQ2hhbm5lbFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmxpdmVTb2NrZXQub25DaGFubmVsKHRoaXMuY2hhbm5lbCxcImRpZmZcIixmdW5jdGlvbih0KXtlLmFwcGx5RGlmZihcInVwZGF0ZVwiLHQsZnVuY3Rpb24odCl7dmFyIG49dC5kaWZmLGk9dC5ldmVudHM7cmV0dXJuIGUudXBkYXRlKG4saSl9KX0pLHRoaXMub25DaGFubmVsKFwicmVkaXJlY3RcIixmdW5jdGlvbih0KXt2YXIgbj10LnRvLGk9dC5mbGFzaDtyZXR1cm4gZS5vblJlZGlyZWN0KHt0bzpuLGZsYXNoOml9KX0pLHRoaXMub25DaGFubmVsKFwibGl2ZV9wYXRjaFwiLGZ1bmN0aW9uKHQpe3JldHVybiBlLm9uTGl2ZVBhdGNoKHQpfSksdGhpcy5vbkNoYW5uZWwoXCJsaXZlX3JlZGlyZWN0XCIsZnVuY3Rpb24odCl7cmV0dXJuIGUub25MaXZlUmVkaXJlY3QodCl9KSx0aGlzLmNoYW5uZWwub25FcnJvcihmdW5jdGlvbih0KXtyZXR1cm4gZS5vbkVycm9yKHQpfSksdGhpcy5jaGFubmVsLm9uQ2xvc2UoZnVuY3Rpb24odCl7cmV0dXJuIGUub25DbG9zZSh0KX0pfX0se2tleTpcImRlc3Ryb3lBbGxDaGlsZHJlblwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlIGluIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXSl0aGlzLmdldENoaWxkQnlJZChlKS5kZXN0cm95KCl9fSx7a2V5Olwib25MaXZlUmVkaXJlY3RcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnRvLG49ZS5raW5kLGk9ZS5mbGFzaCxyPXRoaXMuZXhwYW5kVVJMKHQpO3RoaXMubGl2ZVNvY2tldC5oaXN0b3J5UmVkaXJlY3QocixuLGkpfX0se2tleTpcIm9uTGl2ZVBhdGNoXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50byxuPWUua2luZDt0aGlzLmhyZWY9dGhpcy5leHBhbmRVUkwodCksdGhpcy5saXZlU29ja2V0Lmhpc3RvcnlQYXRjaCh0LG4pfX0se2tleTpcImV4cGFuZFVSTFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnN0YXJ0c1dpdGgoXCIvXCIpP1wiXCIuY29uY2F0KHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCxcIi8vXCIpLmNvbmNhdCh3aW5kb3cubG9jYXRpb24uaG9zdCkuY29uY2F0KGUpOmV9fSx7a2V5Olwib25SZWRpcmVjdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUudG8sbj1lLmZsYXNoO3RoaXMubGl2ZVNvY2tldC5yZWRpcmVjdCh0LG4pfX0se2tleTpcImlzRGVzdHJveWVkXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kZXN0cm95ZWR9fSx7a2V5Olwiam9pblwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5wYXJlbnR8fCh0aGlzLnN0b3BDYWxsYmFjaz10aGlzLmxpdmVTb2NrZXQud2l0aFBhZ2VMb2FkaW5nKHt0bzp0aGlzLmhyZWYsa2luZDpcImluaXRpYWxcIn0pKSx0aGlzLmpvaW5DYWxsYmFjaz1mdW5jdGlvbigpe3JldHVybiBlJiZlKHQsdC5qb2luQ291bnQpfSx0aGlzLmxpdmVTb2NrZXQud3JhcFB1c2godGhpcyx7dGltZW91dDohMX0sZnVuY3Rpb24oKXtyZXR1cm4gdC5jaGFubmVsLmpvaW4oKS5yZWNlaXZlKFwib2tcIixmdW5jdGlvbihlKXtyZXR1cm4gdC5vbkpvaW4oZSl9KS5yZWNlaXZlKFwiZXJyb3JcIixmdW5jdGlvbihlKXtyZXR1cm4gdC5vbkpvaW5FcnJvcihlKX0pLnJlY2VpdmUoXCJ0aW1lb3V0XCIsZnVuY3Rpb24oKXtyZXR1cm4gdC5vbkpvaW5FcnJvcih7cmVhc29uOlwidGltZW91dFwifSl9KX0pfX0se2tleTpcIm9uSm9pbkVycm9yXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuKGUucmVkaXJlY3R8fGUubGl2ZV9yZWRpcmVjdCkmJih0aGlzLmpvaW5QZW5kaW5nPSExLHRoaXMuY2hhbm5lbC5sZWF2ZSgpKSxlLnJlZGlyZWN0P3RoaXMub25SZWRpcmVjdChlLnJlZGlyZWN0KTplLmxpdmVfcmVkaXJlY3Q/dGhpcy5vbkxpdmVSZWRpcmVjdChlLmxpdmVfcmVkaXJlY3QpOih0aGlzLmxvZyhcImVycm9yXCIsZnVuY3Rpb24oKXtyZXR1cm5bXCJ1bmFibGUgdG8gam9pblwiLGVdfSksdGhpcy5saXZlU29ja2V0LnJlbG9hZFdpdGhKaXR0ZXIodGhpcykpfX0se2tleTpcIm9uQ2xvc2VcIix2YWx1ZTpmdW5jdGlvbihlKXtpZighdGhpcy5pc0Rlc3Ryb3llZCgpKXtpZih0aGlzLmlzSm9pblBlbmRpbmcoKXx8dGhpcy5saXZlU29ja2V0Lmhhc1BlbmRpbmdMaW5rKCkmJlwibGVhdmVcIiE9PWUpcmV0dXJuIHRoaXMubGl2ZVNvY2tldC5yZWxvYWRXaXRoSml0dGVyKHRoaXMpO3RoaXMuZGVzdHJveUFsbENoaWxkcmVuKCksdGhpcy5saXZlU29ja2V0LmRyb3BBY3RpdmVFbGVtZW50KHRoaXMpLGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQmJmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpLHRoaXMubGl2ZVNvY2tldC5pc1VubG9hZGVkKCkmJnRoaXMuc2hvd0xvYWRlcigyMDApfX19LHtrZXk6XCJvbkVycm9yXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5vbkNsb3NlKGUpLHRoaXMubG9nKFwiZXJyb3JcIixmdW5jdGlvbigpe3JldHVybltcInZpZXcgY3Jhc2hlZFwiLGVdfSksdGhpcy5saXZlU29ja2V0LmlzVW5sb2FkZWQoKXx8dGhpcy5kaXNwbGF5RXJyb3IoKX19LHtrZXk6XCJkaXNwbGF5RXJyb3JcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuaXNNYWluKCkmJmxlLmRpc3BhdGNoRXZlbnQod2luZG93LFwicGh4OnBhZ2UtbG9hZGluZy1zdGFydFwiLHt0bzp0aGlzLmhyZWYsa2luZDpcImVycm9yXCJ9KSx0aGlzLnNob3dMb2FkZXIoKSx0aGlzLnNldENvbnRhaW5lckNsYXNzZXMoXCJwaHgtZGlzY29ubmVjdGVkXCIsXCJwaHgtZXJyb3JcIil9fSx7a2V5OlwicHVzaFdpdGhSZXBseVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgaT10aGlzLHI9YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOmZ1bmN0aW9uKCl7fSxvPXgoZT9lKCk6W251bGwsW11dLDIpLGE9b1swXSx1PXgob1sxXSwxKVswXSxzPWZ1bmN0aW9uKCl7fTtyZXR1cm4gdSYmbnVsbCE9PXUuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcInBhZ2UtbG9hZGluZ1wiKSkmJihzPXRoaXMubGl2ZVNvY2tldC53aXRoUGFnZUxvYWRpbmcoe2tpbmQ6XCJlbGVtZW50XCIsdGFyZ2V0OnV9KSksXCJudW1iZXJcIiE9dHlwZW9mIG4uY2lkJiZkZWxldGUgbi5jaWQsdGhpcy5saXZlU29ja2V0LndyYXBQdXNoKHRoaXMse3RpbWVvdXQ6ITB9LGZ1bmN0aW9uKCl7cmV0dXJuIGkuY2hhbm5lbC5wdXNoKHQsbiwzZTQpLnJlY2VpdmUoXCJva1wiLGZ1bmN0aW9uKGUpe3ZhciB0PW51bGw7bnVsbCE9PWEmJmkudW5kb1JlZnMoYSksZS5kaWZmJiYodD1pLmFwcGx5RGlmZihcInVwZGF0ZVwiLGUuZGlmZixmdW5jdGlvbihlKXt2YXIgdD1lLmRpZmYsbj1lLmV2ZW50cztpLnVwZGF0ZSh0LG4pfSkpLGUucmVkaXJlY3QmJmkub25SZWRpcmVjdChlLnJlZGlyZWN0KSxlLmxpdmVfcGF0Y2gmJmkub25MaXZlUGF0Y2goZS5saXZlX3BhdGNoKSxlLmxpdmVfcmVkaXJlY3QmJmkub25MaXZlUmVkaXJlY3QoZS5saXZlX3JlZGlyZWN0KSxzKCkscihlLHQpfSl9KX19LHtrZXk6XCJ1bmRvUmVmc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7bGUuYWxsKHRoaXMuZWwsXCJbXCIuY29uY2F0KEYsJz1cIicpLmNvbmNhdChlLCdcIl0nKSxmdW5jdGlvbihlKXtlLnJlbW92ZUF0dHJpYnV0ZShGKSxudWxsIT09ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1yZWFkb25seVwiKSYmKGUucmVhZE9ubHk9ITEsZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXBoeC1yZWFkb25seVwiKSksbnVsbCE9PWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtZGlzYWJsZWRcIikmJihlLmRpc2FibGVkPSExLGUucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1waHgtZGlzYWJsZWRcIikpLEguZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gbGUucmVtb3ZlQ2xhc3MoZSx0KX0pO3ZhciBuPWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtZGlzYWJsZS13aXRoLXJlc3RvcmVcIik7bnVsbCE9PW4mJihlLmlubmVyVGV4dD1uLGUucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1waHgtZGlzYWJsZS13aXRoLXJlc3RvcmVcIikpO3ZhciBpPWxlLnByaXZhdGUoZSxGKTtpZihpKXt2YXIgcj10LnRyaWdnZXJCZWZvcmVVcGRhdGVIb29rKGUsaSk7aGUucGF0Y2hFbChlLGksdC5saXZlU29ja2V0LmdldEFjdGl2ZUVsZW1lbnQoKSksciYmdC50cmlnZ2VyVXBkYXRlZEhvb2sociksbGUuZGVsZXRlUHJpdmF0ZShlLEYpfX0pfX0se2tleTpcInB1dFJlZlwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5yZWYrKyxpPXRoaXMuYmluZGluZyhcImRpc2FibGUtd2l0aFwiKTtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UuY2xhc3NMaXN0LmFkZChcInBoeC1cIi5jb25jYXQodCxcIi1sb2FkaW5nXCIpKSxlLnNldEF0dHJpYnV0ZShGLG4pO3ZhciByPWUuZ2V0QXR0cmlidXRlKGkpO251bGwhPT1yJiYoZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1kaXNhYmxlLXdpdGgtcmVzdG9yZVwiKXx8ZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1kaXNhYmxlLXdpdGgtcmVzdG9yZVwiLGUuaW5uZXJUZXh0KSxlLmlubmVyVGV4dD1yKX0pLFtuLGVdfX0se2tleTpcImNvbXBvbmVudElEXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5nZXRBdHRyaWJ1dGUmJmUuZ2V0QXR0cmlidXRlKGopO3JldHVybiB0P3BhcnNlSW50KHQpOm51bGx9fSx7a2V5OlwidGFyZ2V0Q29tcG9uZW50SURcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3JldHVybiBlLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJ0YXJnZXRcIikpP3RoaXMuY2xvc2VzdENvbXBvbmVudElEKHQpOm51bGx9fSx7a2V5OlwiY2xvc2VzdENvbXBvbmVudElEXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gZT9aKGUuY2xvc2VzdChcIltcIi5jb25jYXQoaixcIl1cIikpLGZ1bmN0aW9uKGUpe3JldHVybiB0Lm93bnNFbGVtZW50KGUpJiZ0LmNvbXBvbmVudElEKGUpfSk6bnVsbH19LHtrZXk6XCJwdXNoSG9va0V2ZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4saSl7dmFyIHI9eCh0aGlzLnB1dFJlZihbXSxcImhvb2tcIiksMiksbz1yWzBdLGE9clsxXTtyZXR1cm4gdGhpcy5wdXNoV2l0aFJlcGx5KGZ1bmN0aW9uKCl7cmV0dXJuW28sYV19LFwiZXZlbnRcIix7dHlwZTpcImhvb2tcIixldmVudDp0LHZhbHVlOm4sY2lkOnRoaXMuY2xvc2VzdENvbXBvbmVudElEKGUpfSxmdW5jdGlvbihlLHQpe3JldHVybiBpKHQsbyl9KSxvfX0se2tleTpcImV4dHJhY3RNZXRhXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dGhpcy5iaW5kaW5nKFwidmFsdWUtXCIpLGk9MDtpPGUuYXR0cmlidXRlcy5sZW5ndGg7aSsrKXt2YXIgcj1lLmF0dHJpYnV0ZXNbaV0ubmFtZTtyLnN0YXJ0c1dpdGgobikmJih0W3IucmVwbGFjZShuLFwiXCIpXT1lLmdldEF0dHJpYnV0ZShyKSl9cmV0dXJuIHZvaWQgMCE9PWUudmFsdWUmJih0LnZhbHVlPWUudmFsdWUsXCJJTlBVVFwiPT09ZS50YWdOYW1lJiZVLmluZGV4T2YoZS50eXBlKT49MCYmIWUuY2hlY2tlZCYmZGVsZXRlIHQudmFsdWUpLHR9fSx7a2V5OlwicHVzaEV2ZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4saSxyKXt2YXIgbz10aGlzO3RoaXMucHVzaFdpdGhSZXBseShmdW5jdGlvbigpe3JldHVybiBvLnB1dFJlZihbdF0sZSl9LFwiZXZlbnRcIix7dHlwZTplLGV2ZW50OmksdmFsdWU6dGhpcy5leHRyYWN0TWV0YSh0LHIpLGNpZDp0aGlzLnRhcmdldENvbXBvbmVudElEKHQsbil9KX19LHtrZXk6XCJwdXNoS2V5XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4saSxyKXt2YXIgbz10aGlzO3RoaXMucHVzaFdpdGhSZXBseShmdW5jdGlvbigpe3JldHVybiBvLnB1dFJlZihbZV0sbil9LFwiZXZlbnRcIix7dHlwZTpuLGV2ZW50OmksdmFsdWU6dGhpcy5leHRyYWN0TWV0YShlLHIpLGNpZDp0aGlzLnRhcmdldENvbXBvbmVudElEKGUsdCl9KX19LHtrZXk6XCJwdXNoRmlsZVByb2dyZXNzXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpmdW5jdGlvbigpe307dGhpcy5saXZlU29ja2V0LndpdGhpbk93bmVycyhlLmZvcm0sZnVuY3Rpb24ocixvKXtyLnB1c2hXaXRoUmVwbHkobnVsbCxcInByb2dyZXNzXCIse2V2ZW50OmUuZ2V0QXR0cmlidXRlKHIuYmluZGluZyhcInByb2dyZXNzXCIpKSxyZWY6ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC11cGxvYWQtcmVmXCIpLGVudHJ5X3JlZjp0LHByb2dyZXNzOm4sY2lkOnIudGFyZ2V0Q29tcG9uZW50SUQoZS5mb3JtLG8pfSxpKX0pfX0se2tleTpcInB1c2hJbnB1dFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuLGkscil7dmFyIG89dGhpcyxhPXRoaXMudGFyZ2V0Q29tcG9uZW50SUQoZS5mb3JtLHQpLHU9ZnVuY3Rpb24oKXtyZXR1cm4gby5wdXRSZWYoW2UsZS5mb3JtXSxcImNoYW5nZVwiKX0scz1hZShlLmZvcm0se190YXJnZXQ6aS5uYW1lfSk7ZS5maWxlcyYmZS5maWxlcy5sZW5ndGg+MCYmaWUudHJhY2tGaWxlcyhlLEFycmF5LmZyb20oZS5maWxlcykpO3ZhciBjPXt0eXBlOlwiZm9ybVwiLGV2ZW50Om4sdmFsdWU6cyx1cGxvYWRzOmllLnNlcmlhbGl6ZVVwbG9hZHMoZSksY2lkOmF9O3RoaXMucHVzaFdpdGhSZXBseSh1LFwiZXZlbnRcIixjLGZ1bmN0aW9uKG4pe2lmKFwiZmlsZVwiPT09ZS50eXBlJiZudWxsIT09ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1hdXRvLXVwbG9hZFwiKSl7aWYoaWUuZmlsZXNBd2FpdGluZ1ByZWZsaWdodChlKS5sZW5ndGg+MCl7dmFyIGk9eCh1KCksMikscz1pWzBdO2lbMV07by51cGxvYWRGaWxlcyhlLmZvcm0sdCxzLGEsZnVuY3Rpb24odCl7ciYmcihuKSxvLnRyaWdnZXJBd2FpdGluZ1N1Ym1pdChlLmZvcm0pfSl9fWVsc2UgciYmcihuKX0pfX0se2tleTpcInRyaWdnZXJBd2FpdGluZ1N1Ym1pdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZ2V0U2NoZWR1bGVkU3VibWl0KGUpO2lmKHQpe3ZhciBuPXgodCwzKSxpPShuWzBdLG5bMV0sblsyXSk7dGhpcy5jYW5jZWxTdWJtaXQoZSksaSgpfX19LHtrZXk6XCJnZXRTY2hlZHVsZWRTdWJtaXRcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5mb3JtU3VibWl0cy5maW5kKGZ1bmN0aW9uKHQpe3ZhciBuPXgodCwyKSxpPW5bMF07blsxXTtyZXR1cm4gaS5pc1NhbWVOb2RlKGUpfSl9fSx7a2V5Olwic2NoZWR1bGVTdWJtaXRcIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7aWYodGhpcy5nZXRTY2hlZHVsZWRTdWJtaXQoZSkpcmV0dXJuITA7dGhpcy5mb3JtU3VibWl0cy5wdXNoKFtlLHQsbl0pfX0se2tleTpcImNhbmNlbFN1Ym1pdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5mb3JtU3VibWl0cz10aGlzLmZvcm1TdWJtaXRzLmZpbHRlcihmdW5jdGlvbihuKXt2YXIgaT14KG4sMykscj1pWzBdLG89aVsxXTtpWzJdO3JldHVybiFyLmlzU2FtZU5vZGUoZSl8fCh0LnVuZG9SZWZzKG8pLCExKX0pfX0se2tleTpcInB1c2hGb3JtU3VibWl0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4saSl7dmFyIHI9dGhpcyxvPWZ1bmN0aW9uKGUpe3JldHVybiEoRyhlLFwiXCIuY29uY2F0KHIuYmluZGluZyhcInVwZGF0ZVwiKSxcIj1pZ25vcmVcIiksZS5mb3JtKXx8RyhlLFwiZGF0YS1waHgtdXBkYXRlPWlnbm9yZVwiLGUuZm9ybSkpfSxhPWZ1bmN0aW9uKCl7dmFyIHQ9bGUuYWxsKGUsXCJbXCIuY29uY2F0KHIuYmluZGluZyhcImRpc2FibGUtd2l0aFwiKSxcIl1cIikpLG49bGUuYWxsKGUsXCJidXR0b25cIikuZmlsdGVyKG8pLGk9bGUuYWxsKGUsXCJpbnB1dCx0ZXh0YXJlYSxzZWxlY3RcIikuZmlsdGVyKG8pO3JldHVybiBuLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1kaXNhYmxlZFwiLGUuZGlzYWJsZWQpLGUuZGlzYWJsZWQ9ITB9KSxpLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1yZWFkb25seVwiLGUucmVhZE9ubHkpLGUucmVhZE9ubHk9ITAsZS5maWxlcyYmKGUuc2V0QXR0cmlidXRlKFwiZGF0YS1waHgtZGlzYWJsZWRcIixlLmRpc2FibGVkKSxlLmRpc2FibGVkPSEwKX0pLGUuc2V0QXR0cmlidXRlKHIuYmluZGluZyhcInBhZ2UtbG9hZGluZ1wiKSxcIlwiKSxyLnB1dFJlZihbZV0uY29uY2F0KHQpLmNvbmNhdChuKS5jb25jYXQoaSksXCJzdWJtaXRcIil9LHU9dGhpcy50YXJnZXRDb21wb25lbnRJRChlLHQpO2lmKGllLmhhc1VwbG9hZHNJblByb2dyZXNzKGUpKXt2YXIgcz14KGEoKSwyKSxjPXNbMF07c1sxXTtyZXR1cm4gdGhpcy5zY2hlZHVsZVN1Ym1pdChlLGMsZnVuY3Rpb24oKXtyZXR1cm4gci5wdXNoRm9ybVN1Ym1pdChlLHQsbixpKX0pfWlmKGllLmlucHV0c0F3YWl0aW5nUHJlZmxpZ2h0KGUpLmxlbmd0aD4wKXt2YXIgbD14KGEoKSwyKSxkPWxbMF0saD1sWzFdLGY9ZnVuY3Rpb24oKXtyZXR1cm5bZCxoXX07dGhpcy51cGxvYWRGaWxlcyhlLHQsZCx1LGZ1bmN0aW9uKHQpe3ZhciBvPWFlKGUse30pO3IucHVzaFdpdGhSZXBseShmLFwiZXZlbnRcIix7dHlwZTpcImZvcm1cIixldmVudDpuLHZhbHVlOm8sY2lkOnV9LGkpfSl9ZWxzZXt2YXIgdj1hZShlKTt0aGlzLnB1c2hXaXRoUmVwbHkoYSxcImV2ZW50XCIse3R5cGU6XCJmb3JtXCIsZXZlbnQ6bix2YWx1ZTp2LGNpZDp1fSxpKX19fSx7a2V5OlwidXBsb2FkRmlsZXNcIix2YWx1ZTpmdW5jdGlvbihlLHQsbixpLHIpe3ZhciBvPXRoaXMsYT10aGlzLmpvaW5Db3VudDtpZS5hY3RpdmVGaWxlSW5wdXRzKGUpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIGk9bmV3IGllKGUsbyxyKTtvLnVwbG9hZGVyc1tlXT1pO3ZhciB1PWkuZW50cmllcygpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS50b1ByZWZsaWdodFBheWxvYWQoKX0pLHM9e3JlZjplLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LXVwbG9hZC1yZWZcIiksZW50cmllczp1LGNpZDpvLnRhcmdldENvbXBvbmVudElEKGUuZm9ybSx0KX07by5sb2coXCJ1cGxvYWRcIixmdW5jdGlvbigpe3JldHVybltcInNlbmRpbmcgcHJlZmxpZ2h0IHJlcXVlc3RcIixzXX0pLG8ucHVzaFdpdGhSZXBseShudWxsLFwiYWxsb3dfdXBsb2FkXCIscyxmdW5jdGlvbihlKXtpZihvLmxvZyhcInVwbG9hZFwiLGZ1bmN0aW9uKCl7cmV0dXJuW1wiZ290IHByZWZsaWdodCByZXNwb25zZVwiLGVdfSksZS5lcnJvcil7by51bmRvUmVmcyhuKTt2YXIgdD14KGUuZXJyb3IsMikscj10WzBdLHU9dFsxXTtvLmxvZyhcInVwbG9hZFwiLGZ1bmN0aW9uKCl7cmV0dXJuW1wiZXJyb3IgZm9yIGVudHJ5IFwiLmNvbmNhdChyKSx1XX0pfWVsc2V7aS5pbml0QWRhcHRlclVwbG9hZChlLGZ1bmN0aW9uKGUpe28uY2hhbm5lbC5vbkVycm9yKGZ1bmN0aW9uKCl7by5qb2luQ291bnQ9PT1hJiZlKCl9KX0sby5saXZlU29ja2V0KX19KX0pfX0se2tleTpcInB1c2hGb3JtUmVjb3ZlcnlcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7dGhpcy5saXZlU29ja2V0LndpdGhpbk93bmVycyhlLGZ1bmN0aW9uKGkscil7dmFyIG89ZS5lbGVtZW50c1swXSxhPWUuZ2V0QXR0cmlidXRlKG4uYmluZGluZyhcImF1dG8tcmVjb3ZlclwiKSl8fGUuZ2V0QXR0cmlidXRlKG4uYmluZGluZyhcImNoYW5nZVwiKSk7aS5wdXNoSW5wdXQobyxyLGEsbyx0KX0pfX0se2tleTpcInB1c2hMaW5rUGF0Y2hcIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7dmFyIGk9dGhpcyxyPXRoaXMubGl2ZVNvY2tldC5zZXRQZW5kaW5nTGluayhlKSxvPXQ/ZnVuY3Rpb24oKXtyZXR1cm4gaS5wdXRSZWYoW3RdLFwiY2xpY2tcIil9Om51bGw7dGhpcy5wdXNoV2l0aFJlcGx5KG8sXCJsaW5rXCIse3VybDplfSxmdW5jdGlvbih0KXt0LmxpbmtfcmVkaXJlY3Q/aS5saXZlU29ja2V0LnJlcGxhY2VNYWluKGUsbnVsbCxuLHIpOmkubGl2ZVNvY2tldC5jb21taXRQZW5kaW5nTGluayhyKSYmKGkuaHJlZj1lLGkuYXBwbHlQZW5kaW5nVXBkYXRlcygpLG4mJm4oKSl9KS5yZWNlaXZlKFwidGltZW91dFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkubGl2ZVNvY2tldC5yZWRpcmVjdCh3aW5kb3cubG9jYXRpb24uaHJlZil9KX19LHtrZXk6XCJmb3Jtc0ZvclJlY292ZXJ5XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZih0aGlzLmpvaW5Db3VudDw9MSlyZXR1cm5bXTt2YXIgbj10aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIiksaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7cmV0dXJuIGkuaW5uZXJIVE1MPWUsbGUuYWxsKHRoaXMuZWwsXCJmb3JtW1wiLmNvbmNhdChuLFwiXVwiKSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiB0Lm93bnNFbGVtZW50KGUpfSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLmVsZW1lbnRzLmxlbmd0aD4wfSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVyblwiaWdub3JlXCIhPT1lLmdldEF0dHJpYnV0ZSh0LmJpbmRpbmcoXCJhdXRvLXJlY292ZXJcIikpfSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBpLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcImZvcm1bXCIuY29uY2F0KG4sJz1cIicpLmNvbmNhdChlLmdldEF0dHJpYnV0ZShuKSwnXCJdJykpfSl9fSx7a2V5OlwibWF5YmVQdXNoQ29tcG9uZW50c0Rlc3Ryb3llZFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0LG49dGhpcyxpPWUuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiAwPT09bGUuZmluZENvbXBvbmVudE5vZGVMaXN0KG4uZWwsZSkubGVuZ3RofSk7aS5sZW5ndGg+MCYmKCh0PXRoaXMucHJ1bmluZ0NJRHMpLnB1c2guYXBwbHkodCxFKGkpKSx0aGlzLnB1c2hXaXRoUmVwbHkobnVsbCxcImNpZHNfd2lsbF9kZXN0cm95XCIse2NpZHM6aX0sZnVuY3Rpb24oKXtuLnBydW5pbmdDSURzPW4ucHJ1bmluZ0NJRHMuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybi0xIT09aS5pbmRleE9mKGUpfSk7dmFyIGU9aS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT1sZS5maW5kQ29tcG9uZW50Tm9kZUxpc3Qobi5lbCxlKS5sZW5ndGh9KTtlLmxlbmd0aD4wJiZuLnB1c2hXaXRoUmVwbHkobnVsbCxcImNpZHNfZGVzdHJveWVkXCIse2NpZHM6ZX0sZnVuY3Rpb24oZSl7bi5yZW5kZXJlZC5wcnVuZUNJRHMoZS5jaWRzKX0pfSkpfX0se2tleTpcIm93bnNFbGVtZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtcGFyZW50LWlkXCIpPT09dGhpcy5pZHx8WihlLmNsb3Nlc3QoTSksZnVuY3Rpb24oZSl7cmV0dXJuIGUuaWR9KT09PXRoaXMuaWR9fSx7a2V5Olwic3VibWl0Rm9ybVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgaT10aGlzO2xlLnB1dFByaXZhdGUoZSxcInBoeC1oYXMtc3VibWl0dGVkXCIsITApLHRoaXMubGl2ZVNvY2tldC5ibHVyQWN0aXZlRWxlbWVudCh0aGlzKSx0aGlzLnB1c2hGb3JtU3VibWl0KGUsdCxuLGZ1bmN0aW9uKCl7aS5saXZlU29ja2V0LnJlc3RvcmVQcmV2aW91c2x5QWN0aXZlRm9jdXMoKX0pfX0se2tleTpcImJpbmRpbmdcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5saXZlU29ja2V0LmJpbmRpbmcoZSl9fV0pLGV9KCksdmU9MSxwZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuLGkpe2Zvcih2YXIgciBpbiBUKHRoaXMsZSksdGhpcy5fX3ZpZXc9dCx0aGlzLl9fbGl2ZVNvY2tldD10LmxpdmVTb2NrZXQsdGhpcy5fX2NhbGxiYWNrcz1pLHRoaXMuX19saXN0ZW5lcnM9bmV3IFNldCx0aGlzLmVsPW4sdGhpcy52aWV3TmFtZT10Lm5hbWUoKSx0aGlzLmVsLnBoeEhvb2tJZD10aGlzLmNvbnN0cnVjdG9yLm1ha2VJRCgpLHRoaXMuX19jYWxsYmFja3MpdGhpc1tyXT10aGlzLl9fY2FsbGJhY2tzW3JdfXJldHVybiBEKGUsbnVsbCxbe2tleTpcIm1ha2VJRFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHZlKyt9fSx7a2V5OlwiZWxlbWVudElEXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucGh4SG9va0lkfX1dKSxEKGUsW3trZXk6XCJwdXNoRXZlbnRcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30sbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06ZnVuY3Rpb24oKXt9O3JldHVybiB0aGlzLl9fdmlldy5wdXNoSG9va0V2ZW50KG51bGwsZSx0LG4pfX0se2tleTpcInB1c2hFdmVudFRvXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e30saT1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106ZnVuY3Rpb24oKXt9O3JldHVybiB0aGlzLl9fdmlldy53aXRoaW5UYXJnZXRzKGUsZnVuY3Rpb24oZSxyKXtyZXR1cm4gZS5wdXNoSG9va0V2ZW50KHIsdCxuLGkpfSl9fSx7a2V5OlwiaGFuZGxlRXZlbnRcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPWZ1bmN0aW9uKG4saSl7cmV0dXJuIGk/ZTp0KG4uZGV0YWlsKX07cmV0dXJuIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGh4Omhvb2s6XCIuY29uY2F0KGUpLG4pLHRoaXMuX19saXN0ZW5lcnMuYWRkKG4pLG59fSx7a2V5OlwicmVtb3ZlSGFuZGxlRXZlbnRcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lKG51bGwsITApO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGh4Omhvb2s6XCIuY29uY2F0KHQpLGUpLHRoaXMuX19saXN0ZW5lcnMuZGVsZXRlKGUpfX0se2tleTpcIl9fY2xlYW51cF9fXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuX19saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gZS5yZW1vdmVIYW5kbGVFdmVudCh0KX0pfX0se2tleTpcIl9fdHJpZ2dlcl9fXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fX2NhbGxiYWNrc1tlXTt0JiZ0LmNhbGwodGhpcyl9fV0pLGV9KCk7dC5kZWZhdWx0PXNlfSxmdW5jdGlvbihlLHQpe3ZhciBuO249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30oKTt0cnl7bj1ufHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCl8fCgwLGV2YWwpKFwidGhpc1wiKX1jYXRjaChlKXtcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiYobj13aW5kb3cpfWUuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe3QuUGhvZW5peHx8KHQuUGhvZW5peD17fSksZS5leHBvcnRzPXQuUGhvZW5peC5MaXZlVmlldz1uKDApfSkuY2FsbCh0aGlzLG4oMSkpfV0pfSk7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/phoenix_live_view/priv/static/phoenix_live_view.js\n");

/***/ }),

/***/ 0:
/*!*************************!*\
  !*** multi ./js/app.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./js/app.js */"./js/app.js");


/***/ })

/******/ });